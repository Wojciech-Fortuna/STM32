
DS18B20Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000042d8  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  0800446c  0800446c  0000546c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080044a4  080044a4  0000600c  2**0
                  CONTENTS
  4 .ARM          00000000  080044a4  080044a4  0000600c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080044a4  080044a4  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080044a4  080044a4  000054a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080044a8  080044a8  000054a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080044ac  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000600c  2**0
                  CONTENTS
 10 .bss          0000014c  2000000c  2000000c  0000600c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000158  20000158  0000600c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000aaab  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001b20  00000000  00000000  00010ae7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000007a8  00000000  00000000  00012608  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000005dc  00000000  00000000  00012db0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f056  00000000  00000000  0001338c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b164  00000000  00000000  000323e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bc777  00000000  00000000  0003d546  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000f9cbd  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001df4  00000000  00000000  000f9d00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007f  00000000  00000000  000fbaf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08004454 	.word	0x08004454

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08004454 	.word	0x08004454

080001d4 <UART_Init>:
float Temperature;
int temp = 0;


void UART_Init(uint32_t baud)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b082      	sub	sp, #8
 80001d8:	af00      	add	r7, sp, #0
 80001da:	6078      	str	r0, [r7, #4]
  huart1.Instance = USART1;
 80001dc:	4b14      	ldr	r3, [pc, #80]	@ (8000230 <UART_Init+0x5c>)
 80001de:	4a15      	ldr	r2, [pc, #84]	@ (8000234 <UART_Init+0x60>)
 80001e0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = baud;
 80001e2:	4a13      	ldr	r2, [pc, #76]	@ (8000230 <UART_Init+0x5c>)
 80001e4:	687b      	ldr	r3, [r7, #4]
 80001e6:	6053      	str	r3, [r2, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80001e8:	4b11      	ldr	r3, [pc, #68]	@ (8000230 <UART_Init+0x5c>)
 80001ea:	2200      	movs	r2, #0
 80001ec:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80001ee:	4b10      	ldr	r3, [pc, #64]	@ (8000230 <UART_Init+0x5c>)
 80001f0:	2200      	movs	r2, #0
 80001f2:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80001f4:	4b0e      	ldr	r3, [pc, #56]	@ (8000230 <UART_Init+0x5c>)
 80001f6:	2200      	movs	r2, #0
 80001f8:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80001fa:	4b0d      	ldr	r3, [pc, #52]	@ (8000230 <UART_Init+0x5c>)
 80001fc:	220c      	movs	r2, #12
 80001fe:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000200:	4b0b      	ldr	r3, [pc, #44]	@ (8000230 <UART_Init+0x5c>)
 8000202:	2200      	movs	r2, #0
 8000204:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000206:	4b0a      	ldr	r3, [pc, #40]	@ (8000230 <UART_Init+0x5c>)
 8000208:	2200      	movs	r2, #0
 800020a:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800020c:	4b08      	ldr	r3, [pc, #32]	@ (8000230 <UART_Init+0x5c>)
 800020e:	2200      	movs	r2, #0
 8000210:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000212:	4b07      	ldr	r3, [pc, #28]	@ (8000230 <UART_Init+0x5c>)
 8000214:	2200      	movs	r2, #0
 8000216:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 8000218:	4805      	ldr	r0, [pc, #20]	@ (8000230 <UART_Init+0x5c>)
 800021a:	f002 fd23 	bl	8002c64 <HAL_HalfDuplex_Init>
 800021e:	4603      	mov	r3, r0
 8000220:	2b00      	cmp	r3, #0
 8000222:	d001      	beq.n	8000228 <UART_Init+0x54>
  {
    Error_Handler();
 8000224:	f000 f9e4 	bl	80005f0 <Error_Handler>
  }
}
 8000228:	bf00      	nop
 800022a:	3708      	adds	r7, #8
 800022c:	46bd      	mov	sp, r7
 800022e:	bd80      	pop	{r7, pc}
 8000230:	20000028 	.word	0x20000028
 8000234:	40013800 	.word	0x40013800

08000238 <DS18B20_Start>:

int DS18B20_Start(void){
 8000238:	b580      	push	{r7, lr}
 800023a:	b082      	sub	sp, #8
 800023c:	af00      	add	r7, sp, #0
	uint8_t data = 0xF0;
 800023e:	23f0      	movs	r3, #240	@ 0xf0
 8000240:	71fb      	strb	r3, [r7, #7]
	UART_Init(9600);
 8000242:	f44f 5016 	mov.w	r0, #9600	@ 0x2580
 8000246:	f7ff ffc5 	bl	80001d4 <UART_Init>
	HAL_UART_Transmit(&huart1, &data, 1, 100);
 800024a:	1df9      	adds	r1, r7, #7
 800024c:	2364      	movs	r3, #100	@ 0x64
 800024e:	2201      	movs	r2, #1
 8000250:	480f      	ldr	r0, [pc, #60]	@ (8000290 <DS18B20_Start+0x58>)
 8000252:	f002 fd5d 	bl	8002d10 <HAL_UART_Transmit>
	if (HAL_UART_Receive(&huart1, &data, 1, 1000) != HAL_OK) return -1; //failed
 8000256:	1df9      	adds	r1, r7, #7
 8000258:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800025c:	2201      	movs	r2, #1
 800025e:	480c      	ldr	r0, [pc, #48]	@ (8000290 <DS18B20_Start+0x58>)
 8000260:	f002 fddf 	bl	8002e22 <HAL_UART_Receive>
 8000264:	4603      	mov	r3, r0
 8000266:	2b00      	cmp	r3, #0
 8000268:	d002      	beq.n	8000270 <DS18B20_Start+0x38>
 800026a:	f04f 33ff 	mov.w	r3, #4294967295
 800026e:	e00a      	b.n	8000286 <DS18B20_Start+0x4e>
	//UART_Init(115200);
	if (data == 0xf0) return -2; // error no device connected
 8000270:	79fb      	ldrb	r3, [r7, #7]
 8000272:	2bf0      	cmp	r3, #240	@ 0xf0
 8000274:	d102      	bne.n	800027c <DS18B20_Start+0x44>
 8000276:	f06f 0301 	mvn.w	r3, #1
 800027a:	e004      	b.n	8000286 <DS18B20_Start+0x4e>
	UART_Init(9600);
 800027c:	f44f 5016 	mov.w	r0, #9600	@ 0x2580
 8000280:	f7ff ffa8 	bl	80001d4 <UART_Init>
	return 1;
 8000284:	2301      	movs	r3, #1
}
 8000286:	4618      	mov	r0, r3
 8000288:	3708      	adds	r7, #8
 800028a:	46bd      	mov	sp, r7
 800028c:	bd80      	pop	{r7, pc}
 800028e:	bf00      	nop
 8000290:	20000028 	.word	0x20000028

08000294 <DS18B20_Write>:

int DS18B20_Write(uint8_t data){
 8000294:	b580      	push	{r7, lr}
 8000296:	b086      	sub	sp, #24
 8000298:	af00      	add	r7, sp, #0
 800029a:	4603      	mov	r3, r0
 800029c:	71fb      	strb	r3, [r7, #7]
	uint8_t buffer[8];
	for (int i=0; i<8; ++i){
 800029e:	2300      	movs	r3, #0
 80002a0:	617b      	str	r3, [r7, #20]
 80002a2:	e015      	b.n	80002d0 <DS18B20_Write+0x3c>
		if ((data & (i<<1)) != 0){
 80002a4:	79fa      	ldrb	r2, [r7, #7]
 80002a6:	697b      	ldr	r3, [r7, #20]
 80002a8:	005b      	lsls	r3, r3, #1
 80002aa:	4013      	ands	r3, r2
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d006      	beq.n	80002be <DS18B20_Write+0x2a>
			buffer[i] = 0xFF; // send 1
 80002b0:	f107 020c 	add.w	r2, r7, #12
 80002b4:	697b      	ldr	r3, [r7, #20]
 80002b6:	4413      	add	r3, r2
 80002b8:	22ff      	movs	r2, #255	@ 0xff
 80002ba:	701a      	strb	r2, [r3, #0]
 80002bc:	e005      	b.n	80002ca <DS18B20_Write+0x36>
		}
		else{
			buffer[i] = 0xF0; // send 0
 80002be:	f107 020c 	add.w	r2, r7, #12
 80002c2:	697b      	ldr	r3, [r7, #20]
 80002c4:	4413      	add	r3, r2
 80002c6:	22f0      	movs	r2, #240	@ 0xf0
 80002c8:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<8; ++i){
 80002ca:	697b      	ldr	r3, [r7, #20]
 80002cc:	3301      	adds	r3, #1
 80002ce:	617b      	str	r3, [r7, #20]
 80002d0:	697b      	ldr	r3, [r7, #20]
 80002d2:	2b07      	cmp	r3, #7
 80002d4:	dde6      	ble.n	80002a4 <DS18B20_Write+0x10>
		}
	}
	HAL_UART_Transmit(&huart1, buffer, 8, 1000);
 80002d6:	f107 010c 	add.w	r1, r7, #12
 80002da:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80002de:	2208      	movs	r2, #8
 80002e0:	4803      	ldr	r0, [pc, #12]	@ (80002f0 <DS18B20_Write+0x5c>)
 80002e2:	f002 fd15 	bl	8002d10 <HAL_UART_Transmit>
	return 0;
 80002e6:	2300      	movs	r3, #0
}
 80002e8:	4618      	mov	r0, r3
 80002ea:	3718      	adds	r7, #24
 80002ec:	46bd      	mov	sp, r7
 80002ee:	bd80      	pop	{r7, pc}
 80002f0:	20000028 	.word	0x20000028

080002f4 <DS18B20_Read>:

uint8_t DS18B20_Read(void){
 80002f4:	b580      	push	{r7, lr}
 80002f6:	b086      	sub	sp, #24
 80002f8:	af00      	add	r7, sp, #0
	uint8_t buffer[8];
	uint8_t value = 0;
 80002fa:	2300      	movs	r3, #0
 80002fc:	75fb      	strb	r3, [r7, #23]
	for (int i=0; i<8; i++){
 80002fe:	2300      	movs	r3, #0
 8000300:	613b      	str	r3, [r7, #16]
 8000302:	e007      	b.n	8000314 <DS18B20_Read+0x20>
		buffer[i] = 0xFF;
 8000304:	1d3a      	adds	r2, r7, #4
 8000306:	693b      	ldr	r3, [r7, #16]
 8000308:	4413      	add	r3, r2
 800030a:	22ff      	movs	r2, #255	@ 0xff
 800030c:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<8; i++){
 800030e:	693b      	ldr	r3, [r7, #16]
 8000310:	3301      	adds	r3, #1
 8000312:	613b      	str	r3, [r7, #16]
 8000314:	693b      	ldr	r3, [r7, #16]
 8000316:	2b07      	cmp	r3, #7
 8000318:	ddf4      	ble.n	8000304 <DS18B20_Read+0x10>
	}
	HAL_UART_Transmit_DMA(&huart1, buffer, 8);
 800031a:	1d3b      	adds	r3, r7, #4
 800031c:	2208      	movs	r2, #8
 800031e:	4619      	mov	r1, r3
 8000320:	4816      	ldr	r0, [pc, #88]	@ (800037c <DS18B20_Read+0x88>)
 8000322:	f002 fe47 	bl	8002fb4 <HAL_UART_Transmit_DMA>
	HAL_UART_Receive_DMA(&huart1, RxData, 8);
 8000326:	2208      	movs	r2, #8
 8000328:	4915      	ldr	r1, [pc, #84]	@ (8000380 <DS18B20_Read+0x8c>)
 800032a:	4814      	ldr	r0, [pc, #80]	@ (800037c <DS18B20_Read+0x88>)
 800032c:	f002 febe 	bl	80030ac <HAL_UART_Receive_DMA>
	while (isRxed == 0);
 8000330:	bf00      	nop
 8000332:	4b14      	ldr	r3, [pc, #80]	@ (8000384 <DS18B20_Read+0x90>)
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	2b00      	cmp	r3, #0
 8000338:	d0fb      	beq.n	8000332 <DS18B20_Read+0x3e>
	for (int i=0; i<8; i++){
 800033a:	2300      	movs	r3, #0
 800033c:	60fb      	str	r3, [r7, #12]
 800033e:	e012      	b.n	8000366 <DS18B20_Read+0x72>
		if (RxData[i] == 0xFF){ // bit is 1
 8000340:	4a0f      	ldr	r2, [pc, #60]	@ (8000380 <DS18B20_Read+0x8c>)
 8000342:	68fb      	ldr	r3, [r7, #12]
 8000344:	4413      	add	r3, r2
 8000346:	781b      	ldrb	r3, [r3, #0]
 8000348:	2bff      	cmp	r3, #255	@ 0xff
 800034a:	d109      	bne.n	8000360 <DS18B20_Read+0x6c>
			value |= 1<<i; // write a 1 to that position
 800034c:	2201      	movs	r2, #1
 800034e:	68fb      	ldr	r3, [r7, #12]
 8000350:	fa02 f303 	lsl.w	r3, r2, r3
 8000354:	b25a      	sxtb	r2, r3
 8000356:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800035a:	4313      	orrs	r3, r2
 800035c:	b25b      	sxtb	r3, r3
 800035e:	75fb      	strb	r3, [r7, #23]
	for (int i=0; i<8; i++){
 8000360:	68fb      	ldr	r3, [r7, #12]
 8000362:	3301      	adds	r3, #1
 8000364:	60fb      	str	r3, [r7, #12]
 8000366:	68fb      	ldr	r3, [r7, #12]
 8000368:	2b07      	cmp	r3, #7
 800036a:	dde9      	ble.n	8000340 <DS18B20_Read+0x4c>
		}
	}
	isRxed = 0;
 800036c:	4b05      	ldr	r3, [pc, #20]	@ (8000384 <DS18B20_Read+0x90>)
 800036e:	2200      	movs	r2, #0
 8000370:	601a      	str	r2, [r3, #0]
	return value;
 8000372:	7dfb      	ldrb	r3, [r7, #23]
}
 8000374:	4618      	mov	r0, r3
 8000376:	3718      	adds	r7, #24
 8000378:	46bd      	mov	sp, r7
 800037a:	bd80      	pop	{r7, pc}
 800037c:	20000028 	.word	0x20000028
 8000380:	20000140 	.word	0x20000140
 8000384:	2000013c 	.word	0x2000013c

08000388 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000388:	b480      	push	{r7}
 800038a:	b083      	sub	sp, #12
 800038c:	af00      	add	r7, sp, #0
 800038e:	6078      	str	r0, [r7, #4]
	isRxed = 1;
 8000390:	4b06      	ldr	r3, [pc, #24]	@ (80003ac <HAL_UART_RxCpltCallback+0x24>)
 8000392:	2201      	movs	r2, #1
 8000394:	601a      	str	r2, [r3, #0]
	temp += 10;
 8000396:	4b06      	ldr	r3, [pc, #24]	@ (80003b0 <HAL_UART_RxCpltCallback+0x28>)
 8000398:	681b      	ldr	r3, [r3, #0]
 800039a:	330a      	adds	r3, #10
 800039c:	4a04      	ldr	r2, [pc, #16]	@ (80003b0 <HAL_UART_RxCpltCallback+0x28>)
 800039e:	6013      	str	r3, [r2, #0]
}
 80003a0:	bf00      	nop
 80003a2:	370c      	adds	r7, #12
 80003a4:	46bd      	mov	sp, r7
 80003a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003aa:	4770      	bx	lr
 80003ac:	2000013c 	.word	0x2000013c
 80003b0:	20000150 	.word	0x20000150

080003b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003b8:	f000 fa6e 	bl	8000898 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003bc:	f000 f858 	bl	8000470 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003c0:	f000 f8fe 	bl	80005c0 <MX_GPIO_Init>
  MX_DMA_Init();
 80003c4:	f000 f8d6 	bl	8000574 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80003c8:	f000 f8a4 	bl	8000514 <MX_USART1_UART_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  presence = DS18B20_Start();
 80003cc:	f7ff ff34 	bl	8000238 <DS18B20_Start>
 80003d0:	4603      	mov	r3, r0
 80003d2:	4a21      	ldr	r2, [pc, #132]	@ (8000458 <main+0xa4>)
 80003d4:	6013      	str	r3, [r2, #0]
	  DS18B20_Write(0xCC); // skip ROM
 80003d6:	20cc      	movs	r0, #204	@ 0xcc
 80003d8:	f7ff ff5c 	bl	8000294 <DS18B20_Write>
	  DS18B20_Write(0x44); // convert t
 80003dc:	2044      	movs	r0, #68	@ 0x44
 80003de:	f7ff ff59 	bl	8000294 <DS18B20_Write>
	  HAL_Delay(800);
 80003e2:	f44f 7048 	mov.w	r0, #800	@ 0x320
 80003e6:	f000 fabd 	bl	8000964 <HAL_Delay>
	  DS18B20_Write(0xCC); // skip ROM
 80003ea:	20cc      	movs	r0, #204	@ 0xcc
 80003ec:	f7ff ff52 	bl	8000294 <DS18B20_Write>
	  DS18B20_Write(0xBE); // read Scratchpad
 80003f0:	20be      	movs	r0, #190	@ 0xbe
 80003f2:	f7ff ff4f 	bl	8000294 <DS18B20_Write>
	  TempLSB = DS18B20_Read();
 80003f6:	f7ff ff7d 	bl	80002f4 <DS18B20_Read>
 80003fa:	4603      	mov	r3, r0
 80003fc:	461a      	mov	r2, r3
 80003fe:	4b17      	ldr	r3, [pc, #92]	@ (800045c <main+0xa8>)
 8000400:	701a      	strb	r2, [r3, #0]
	  TempMSB = DS18B20_Read();
 8000402:	f7ff ff77 	bl	80002f4 <DS18B20_Read>
 8000406:	4603      	mov	r3, r0
 8000408:	461a      	mov	r2, r3
 800040a:	4b15      	ldr	r3, [pc, #84]	@ (8000460 <main+0xac>)
 800040c:	701a      	strb	r2, [r3, #0]
	  temp = 3;
 800040e:	4b15      	ldr	r3, [pc, #84]	@ (8000464 <main+0xb0>)
 8000410:	2203      	movs	r2, #3
 8000412:	601a      	str	r2, [r3, #0]
	  Temp = (TempMSB) << 8 | TempLSB;
 8000414:	4b12      	ldr	r3, [pc, #72]	@ (8000460 <main+0xac>)
 8000416:	781b      	ldrb	r3, [r3, #0]
 8000418:	021b      	lsls	r3, r3, #8
 800041a:	b21a      	sxth	r2, r3
 800041c:	4b0f      	ldr	r3, [pc, #60]	@ (800045c <main+0xa8>)
 800041e:	781b      	ldrb	r3, [r3, #0]
 8000420:	b21b      	sxth	r3, r3
 8000422:	4313      	orrs	r3, r2
 8000424:	b21b      	sxth	r3, r3
 8000426:	b29a      	uxth	r2, r3
 8000428:	4b0f      	ldr	r3, [pc, #60]	@ (8000468 <main+0xb4>)
 800042a:	801a      	strh	r2, [r3, #0]
	  Temperature = (float)Temp/16.0; //
 800042c:	4b0e      	ldr	r3, [pc, #56]	@ (8000468 <main+0xb4>)
 800042e:	881b      	ldrh	r3, [r3, #0]
 8000430:	ee07 3a90 	vmov	s15, r3
 8000434:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000438:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 800043c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000440:	4b0a      	ldr	r3, [pc, #40]	@ (800046c <main+0xb8>)
 8000442:	edc3 7a00 	vstr	s15, [r3]
	  HAL_Delay(5000);
 8000446:	f241 3088 	movw	r0, #5000	@ 0x1388
 800044a:	f000 fa8b 	bl	8000964 <HAL_Delay>
	  temp = 4;
 800044e:	4b05      	ldr	r3, [pc, #20]	@ (8000464 <main+0xb0>)
 8000450:	2204      	movs	r2, #4
 8000452:	601a      	str	r2, [r3, #0]
	  presence = DS18B20_Start();
 8000454:	bf00      	nop
 8000456:	e7b9      	b.n	80003cc <main+0x18>
 8000458:	20000138 	.word	0x20000138
 800045c:	20000148 	.word	0x20000148
 8000460:	20000149 	.word	0x20000149
 8000464:	20000150 	.word	0x20000150
 8000468:	2000014a 	.word	0x2000014a
 800046c:	2000014c 	.word	0x2000014c

08000470 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000470:	b580      	push	{r7, lr}
 8000472:	b0a6      	sub	sp, #152	@ 0x98
 8000474:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000476:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800047a:	2228      	movs	r2, #40	@ 0x28
 800047c:	2100      	movs	r1, #0
 800047e:	4618      	mov	r0, r3
 8000480:	f003 ffbb 	bl	80043fa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000484:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000488:	2200      	movs	r2, #0
 800048a:	601a      	str	r2, [r3, #0]
 800048c:	605a      	str	r2, [r3, #4]
 800048e:	609a      	str	r2, [r3, #8]
 8000490:	60da      	str	r2, [r3, #12]
 8000492:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000494:	1d3b      	adds	r3, r7, #4
 8000496:	2258      	movs	r2, #88	@ 0x58
 8000498:	2100      	movs	r1, #0
 800049a:	4618      	mov	r0, r3
 800049c:	f003 ffad 	bl	80043fa <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80004a0:	2302      	movs	r3, #2
 80004a2:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004a4:	2301      	movs	r3, #1
 80004a6:	67fb      	str	r3, [r7, #124]	@ 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004a8:	2310      	movs	r3, #16
 80004aa:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80004ae:	2300      	movs	r3, #0
 80004b0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004b4:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80004b8:	4618      	mov	r0, r3
 80004ba:	f000 ff41 	bl	8001340 <HAL_RCC_OscConfig>
 80004be:	4603      	mov	r3, r0
 80004c0:	2b00      	cmp	r3, #0
 80004c2:	d001      	beq.n	80004c8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80004c4:	f000 f894 	bl	80005f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004c8:	230f      	movs	r3, #15
 80004ca:	65fb      	str	r3, [r7, #92]	@ 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80004cc:	2300      	movs	r3, #0
 80004ce:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004d0:	2300      	movs	r3, #0
 80004d2:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004d4:	2300      	movs	r3, #0
 80004d6:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004d8:	2300      	movs	r3, #0
 80004da:	66fb      	str	r3, [r7, #108]	@ 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80004dc:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80004e0:	2100      	movs	r1, #0
 80004e2:	4618      	mov	r0, r3
 80004e4:	f001 ff80 	bl	80023e8 <HAL_RCC_ClockConfig>
 80004e8:	4603      	mov	r3, r0
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	d001      	beq.n	80004f2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80004ee:	f000 f87f 	bl	80005f0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80004f2:	2301      	movs	r3, #1
 80004f4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80004f6:	2300      	movs	r3, #0
 80004f8:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80004fa:	1d3b      	adds	r3, r7, #4
 80004fc:	4618      	mov	r0, r3
 80004fe:	f002 f993 	bl	8002828 <HAL_RCCEx_PeriphCLKConfig>
 8000502:	4603      	mov	r3, r0
 8000504:	2b00      	cmp	r3, #0
 8000506:	d001      	beq.n	800050c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000508:	f000 f872 	bl	80005f0 <Error_Handler>
  }
}
 800050c:	bf00      	nop
 800050e:	3798      	adds	r7, #152	@ 0x98
 8000510:	46bd      	mov	sp, r7
 8000512:	bd80      	pop	{r7, pc}

08000514 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000518:	4b14      	ldr	r3, [pc, #80]	@ (800056c <MX_USART1_UART_Init+0x58>)
 800051a:	4a15      	ldr	r2, [pc, #84]	@ (8000570 <MX_USART1_UART_Init+0x5c>)
 800051c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800051e:	4b13      	ldr	r3, [pc, #76]	@ (800056c <MX_USART1_UART_Init+0x58>)
 8000520:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000524:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000526:	4b11      	ldr	r3, [pc, #68]	@ (800056c <MX_USART1_UART_Init+0x58>)
 8000528:	2200      	movs	r2, #0
 800052a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800052c:	4b0f      	ldr	r3, [pc, #60]	@ (800056c <MX_USART1_UART_Init+0x58>)
 800052e:	2200      	movs	r2, #0
 8000530:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000532:	4b0e      	ldr	r3, [pc, #56]	@ (800056c <MX_USART1_UART_Init+0x58>)
 8000534:	2200      	movs	r2, #0
 8000536:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000538:	4b0c      	ldr	r3, [pc, #48]	@ (800056c <MX_USART1_UART_Init+0x58>)
 800053a:	220c      	movs	r2, #12
 800053c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800053e:	4b0b      	ldr	r3, [pc, #44]	@ (800056c <MX_USART1_UART_Init+0x58>)
 8000540:	2200      	movs	r2, #0
 8000542:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000544:	4b09      	ldr	r3, [pc, #36]	@ (800056c <MX_USART1_UART_Init+0x58>)
 8000546:	2200      	movs	r2, #0
 8000548:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800054a:	4b08      	ldr	r3, [pc, #32]	@ (800056c <MX_USART1_UART_Init+0x58>)
 800054c:	2200      	movs	r2, #0
 800054e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000550:	4b06      	ldr	r3, [pc, #24]	@ (800056c <MX_USART1_UART_Init+0x58>)
 8000552:	2200      	movs	r2, #0
 8000554:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 8000556:	4805      	ldr	r0, [pc, #20]	@ (800056c <MX_USART1_UART_Init+0x58>)
 8000558:	f002 fb84 	bl	8002c64 <HAL_HalfDuplex_Init>
 800055c:	4603      	mov	r3, r0
 800055e:	2b00      	cmp	r3, #0
 8000560:	d001      	beq.n	8000566 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000562:	f000 f845 	bl	80005f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000566:	bf00      	nop
 8000568:	bd80      	pop	{r7, pc}
 800056a:	bf00      	nop
 800056c:	20000028 	.word	0x20000028
 8000570:	40013800 	.word	0x40013800

08000574 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b082      	sub	sp, #8
 8000578:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800057a:	4b10      	ldr	r3, [pc, #64]	@ (80005bc <MX_DMA_Init+0x48>)
 800057c:	695b      	ldr	r3, [r3, #20]
 800057e:	4a0f      	ldr	r2, [pc, #60]	@ (80005bc <MX_DMA_Init+0x48>)
 8000580:	f043 0301 	orr.w	r3, r3, #1
 8000584:	6153      	str	r3, [r2, #20]
 8000586:	4b0d      	ldr	r3, [pc, #52]	@ (80005bc <MX_DMA_Init+0x48>)
 8000588:	695b      	ldr	r3, [r3, #20]
 800058a:	f003 0301 	and.w	r3, r3, #1
 800058e:	607b      	str	r3, [r7, #4]
 8000590:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8000592:	2200      	movs	r2, #0
 8000594:	2100      	movs	r1, #0
 8000596:	200e      	movs	r0, #14
 8000598:	f000 fae3 	bl	8000b62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 800059c:	200e      	movs	r0, #14
 800059e:	f000 fafc 	bl	8000b9a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80005a2:	2200      	movs	r2, #0
 80005a4:	2100      	movs	r1, #0
 80005a6:	200f      	movs	r0, #15
 80005a8:	f000 fadb 	bl	8000b62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80005ac:	200f      	movs	r0, #15
 80005ae:	f000 faf4 	bl	8000b9a <HAL_NVIC_EnableIRQ>

}
 80005b2:	bf00      	nop
 80005b4:	3708      	adds	r7, #8
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bd80      	pop	{r7, pc}
 80005ba:	bf00      	nop
 80005bc:	40021000 	.word	0x40021000

080005c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005c0:	b480      	push	{r7}
 80005c2:	b083      	sub	sp, #12
 80005c4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005c6:	4b09      	ldr	r3, [pc, #36]	@ (80005ec <MX_GPIO_Init+0x2c>)
 80005c8:	695b      	ldr	r3, [r3, #20]
 80005ca:	4a08      	ldr	r2, [pc, #32]	@ (80005ec <MX_GPIO_Init+0x2c>)
 80005cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80005d0:	6153      	str	r3, [r2, #20]
 80005d2:	4b06      	ldr	r3, [pc, #24]	@ (80005ec <MX_GPIO_Init+0x2c>)
 80005d4:	695b      	ldr	r3, [r3, #20]
 80005d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80005da:	607b      	str	r3, [r7, #4]
 80005dc:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80005de:	bf00      	nop
 80005e0:	370c      	adds	r7, #12
 80005e2:	46bd      	mov	sp, r7
 80005e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop
 80005ec:	40021000 	.word	0x40021000

080005f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005f0:	b480      	push	{r7}
 80005f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005f4:	b672      	cpsid	i
}
 80005f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005f8:	bf00      	nop
 80005fa:	e7fd      	b.n	80005f8 <Error_Handler+0x8>

080005fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005fc:	b480      	push	{r7}
 80005fe:	b083      	sub	sp, #12
 8000600:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000602:	4b0f      	ldr	r3, [pc, #60]	@ (8000640 <HAL_MspInit+0x44>)
 8000604:	699b      	ldr	r3, [r3, #24]
 8000606:	4a0e      	ldr	r2, [pc, #56]	@ (8000640 <HAL_MspInit+0x44>)
 8000608:	f043 0301 	orr.w	r3, r3, #1
 800060c:	6193      	str	r3, [r2, #24]
 800060e:	4b0c      	ldr	r3, [pc, #48]	@ (8000640 <HAL_MspInit+0x44>)
 8000610:	699b      	ldr	r3, [r3, #24]
 8000612:	f003 0301 	and.w	r3, r3, #1
 8000616:	607b      	str	r3, [r7, #4]
 8000618:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800061a:	4b09      	ldr	r3, [pc, #36]	@ (8000640 <HAL_MspInit+0x44>)
 800061c:	69db      	ldr	r3, [r3, #28]
 800061e:	4a08      	ldr	r2, [pc, #32]	@ (8000640 <HAL_MspInit+0x44>)
 8000620:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000624:	61d3      	str	r3, [r2, #28]
 8000626:	4b06      	ldr	r3, [pc, #24]	@ (8000640 <HAL_MspInit+0x44>)
 8000628:	69db      	ldr	r3, [r3, #28]
 800062a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800062e:	603b      	str	r3, [r7, #0]
 8000630:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000632:	bf00      	nop
 8000634:	370c      	adds	r7, #12
 8000636:	46bd      	mov	sp, r7
 8000638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063c:	4770      	bx	lr
 800063e:	bf00      	nop
 8000640:	40021000 	.word	0x40021000

08000644 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b08a      	sub	sp, #40	@ 0x28
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800064c:	f107 0314 	add.w	r3, r7, #20
 8000650:	2200      	movs	r2, #0
 8000652:	601a      	str	r2, [r3, #0]
 8000654:	605a      	str	r2, [r3, #4]
 8000656:	609a      	str	r2, [r3, #8]
 8000658:	60da      	str	r2, [r3, #12]
 800065a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	4a42      	ldr	r2, [pc, #264]	@ (800076c <HAL_UART_MspInit+0x128>)
 8000662:	4293      	cmp	r3, r2
 8000664:	d17d      	bne.n	8000762 <HAL_UART_MspInit+0x11e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000666:	4b42      	ldr	r3, [pc, #264]	@ (8000770 <HAL_UART_MspInit+0x12c>)
 8000668:	699b      	ldr	r3, [r3, #24]
 800066a:	4a41      	ldr	r2, [pc, #260]	@ (8000770 <HAL_UART_MspInit+0x12c>)
 800066c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000670:	6193      	str	r3, [r2, #24]
 8000672:	4b3f      	ldr	r3, [pc, #252]	@ (8000770 <HAL_UART_MspInit+0x12c>)
 8000674:	699b      	ldr	r3, [r3, #24]
 8000676:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800067a:	613b      	str	r3, [r7, #16]
 800067c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800067e:	4b3c      	ldr	r3, [pc, #240]	@ (8000770 <HAL_UART_MspInit+0x12c>)
 8000680:	695b      	ldr	r3, [r3, #20]
 8000682:	4a3b      	ldr	r2, [pc, #236]	@ (8000770 <HAL_UART_MspInit+0x12c>)
 8000684:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000688:	6153      	str	r3, [r2, #20]
 800068a:	4b39      	ldr	r3, [pc, #228]	@ (8000770 <HAL_UART_MspInit+0x12c>)
 800068c:	695b      	ldr	r3, [r3, #20]
 800068e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000692:	60fb      	str	r3, [r7, #12]
 8000694:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000696:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800069a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800069c:	2312      	movs	r3, #18
 800069e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a0:	2300      	movs	r3, #0
 80006a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006a4:	2303      	movs	r3, #3
 80006a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80006a8:	2307      	movs	r3, #7
 80006aa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006ac:	f107 0314 	add.w	r3, r7, #20
 80006b0:	4619      	mov	r1, r3
 80006b2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006b6:	f000 fcb9 	bl	800102c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 80006ba:	4b2e      	ldr	r3, [pc, #184]	@ (8000774 <HAL_UART_MspInit+0x130>)
 80006bc:	4a2e      	ldr	r2, [pc, #184]	@ (8000778 <HAL_UART_MspInit+0x134>)
 80006be:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80006c0:	4b2c      	ldr	r3, [pc, #176]	@ (8000774 <HAL_UART_MspInit+0x130>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80006c6:	4b2b      	ldr	r3, [pc, #172]	@ (8000774 <HAL_UART_MspInit+0x130>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80006cc:	4b29      	ldr	r3, [pc, #164]	@ (8000774 <HAL_UART_MspInit+0x130>)
 80006ce:	2280      	movs	r2, #128	@ 0x80
 80006d0:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80006d2:	4b28      	ldr	r3, [pc, #160]	@ (8000774 <HAL_UART_MspInit+0x130>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80006d8:	4b26      	ldr	r3, [pc, #152]	@ (8000774 <HAL_UART_MspInit+0x130>)
 80006da:	2200      	movs	r2, #0
 80006dc:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80006de:	4b25      	ldr	r3, [pc, #148]	@ (8000774 <HAL_UART_MspInit+0x130>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80006e4:	4b23      	ldr	r3, [pc, #140]	@ (8000774 <HAL_UART_MspInit+0x130>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80006ea:	4822      	ldr	r0, [pc, #136]	@ (8000774 <HAL_UART_MspInit+0x130>)
 80006ec:	f000 fa6f 	bl	8000bce <HAL_DMA_Init>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d001      	beq.n	80006fa <HAL_UART_MspInit+0xb6>
    {
      Error_Handler();
 80006f6:	f7ff ff7b 	bl	80005f0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	4a1d      	ldr	r2, [pc, #116]	@ (8000774 <HAL_UART_MspInit+0x130>)
 80006fe:	675a      	str	r2, [r3, #116]	@ 0x74
 8000700:	4a1c      	ldr	r2, [pc, #112]	@ (8000774 <HAL_UART_MspInit+0x130>)
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8000706:	4b1d      	ldr	r3, [pc, #116]	@ (800077c <HAL_UART_MspInit+0x138>)
 8000708:	4a1d      	ldr	r2, [pc, #116]	@ (8000780 <HAL_UART_MspInit+0x13c>)
 800070a:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800070c:	4b1b      	ldr	r3, [pc, #108]	@ (800077c <HAL_UART_MspInit+0x138>)
 800070e:	2210      	movs	r2, #16
 8000710:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000712:	4b1a      	ldr	r3, [pc, #104]	@ (800077c <HAL_UART_MspInit+0x138>)
 8000714:	2200      	movs	r2, #0
 8000716:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000718:	4b18      	ldr	r3, [pc, #96]	@ (800077c <HAL_UART_MspInit+0x138>)
 800071a:	2280      	movs	r2, #128	@ 0x80
 800071c:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800071e:	4b17      	ldr	r3, [pc, #92]	@ (800077c <HAL_UART_MspInit+0x138>)
 8000720:	2200      	movs	r2, #0
 8000722:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000724:	4b15      	ldr	r3, [pc, #84]	@ (800077c <HAL_UART_MspInit+0x138>)
 8000726:	2200      	movs	r2, #0
 8000728:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800072a:	4b14      	ldr	r3, [pc, #80]	@ (800077c <HAL_UART_MspInit+0x138>)
 800072c:	2200      	movs	r2, #0
 800072e:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000730:	4b12      	ldr	r3, [pc, #72]	@ (800077c <HAL_UART_MspInit+0x138>)
 8000732:	2200      	movs	r2, #0
 8000734:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8000736:	4811      	ldr	r0, [pc, #68]	@ (800077c <HAL_UART_MspInit+0x138>)
 8000738:	f000 fa49 	bl	8000bce <HAL_DMA_Init>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d001      	beq.n	8000746 <HAL_UART_MspInit+0x102>
    {
      Error_Handler();
 8000742:	f7ff ff55 	bl	80005f0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	4a0c      	ldr	r2, [pc, #48]	@ (800077c <HAL_UART_MspInit+0x138>)
 800074a:	671a      	str	r2, [r3, #112]	@ 0x70
 800074c:	4a0b      	ldr	r2, [pc, #44]	@ (800077c <HAL_UART_MspInit+0x138>)
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000752:	2200      	movs	r2, #0
 8000754:	2100      	movs	r1, #0
 8000756:	2025      	movs	r0, #37	@ 0x25
 8000758:	f000 fa03 	bl	8000b62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800075c:	2025      	movs	r0, #37	@ 0x25
 800075e:	f000 fa1c 	bl	8000b9a <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8000762:	bf00      	nop
 8000764:	3728      	adds	r7, #40	@ 0x28
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	40013800 	.word	0x40013800
 8000770:	40021000 	.word	0x40021000
 8000774:	200000b0 	.word	0x200000b0
 8000778:	40020058 	.word	0x40020058
 800077c:	200000f4 	.word	0x200000f4
 8000780:	40020044 	.word	0x40020044

08000784 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000784:	b480      	push	{r7}
 8000786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000788:	bf00      	nop
 800078a:	e7fd      	b.n	8000788 <NMI_Handler+0x4>

0800078c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800078c:	b480      	push	{r7}
 800078e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000790:	bf00      	nop
 8000792:	e7fd      	b.n	8000790 <HardFault_Handler+0x4>

08000794 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000794:	b480      	push	{r7}
 8000796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000798:	bf00      	nop
 800079a:	e7fd      	b.n	8000798 <MemManage_Handler+0x4>

0800079c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800079c:	b480      	push	{r7}
 800079e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007a0:	bf00      	nop
 80007a2:	e7fd      	b.n	80007a0 <BusFault_Handler+0x4>

080007a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007a4:	b480      	push	{r7}
 80007a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007a8:	bf00      	nop
 80007aa:	e7fd      	b.n	80007a8 <UsageFault_Handler+0x4>

080007ac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007b0:	bf00      	nop
 80007b2:	46bd      	mov	sp, r7
 80007b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b8:	4770      	bx	lr

080007ba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007ba:	b480      	push	{r7}
 80007bc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007be:	bf00      	nop
 80007c0:	46bd      	mov	sp, r7
 80007c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c6:	4770      	bx	lr

080007c8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007c8:	b480      	push	{r7}
 80007ca:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007cc:	bf00      	nop
 80007ce:	46bd      	mov	sp, r7
 80007d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d4:	4770      	bx	lr

080007d6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007d6:	b580      	push	{r7, lr}
 80007d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007da:	f000 f8a3 	bl	8000924 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007de:	bf00      	nop
 80007e0:	bd80      	pop	{r7, pc}
	...

080007e4 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80007e8:	4802      	ldr	r0, [pc, #8]	@ (80007f4 <DMA1_Channel4_IRQHandler+0x10>)
 80007ea:	f000 fb12 	bl	8000e12 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80007ee:	bf00      	nop
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	200000f4 	.word	0x200000f4

080007f8 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80007fc:	4802      	ldr	r0, [pc, #8]	@ (8000808 <DMA1_Channel5_IRQHandler+0x10>)
 80007fe:	f000 fb08 	bl	8000e12 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8000802:	bf00      	nop
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	200000b0 	.word	0x200000b0

0800080c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000810:	4802      	ldr	r0, [pc, #8]	@ (800081c <USART1_IRQHandler+0x10>)
 8000812:	f002 fc8f 	bl	8003134 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000816:	bf00      	nop
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	20000028 	.word	0x20000028

08000820 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000820:	b480      	push	{r7}
 8000822:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000824:	4b06      	ldr	r3, [pc, #24]	@ (8000840 <SystemInit+0x20>)
 8000826:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800082a:	4a05      	ldr	r2, [pc, #20]	@ (8000840 <SystemInit+0x20>)
 800082c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000830:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000834:	bf00      	nop
 8000836:	46bd      	mov	sp, r7
 8000838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083c:	4770      	bx	lr
 800083e:	bf00      	nop
 8000840:	e000ed00 	.word	0xe000ed00

08000844 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000844:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800087c <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000848:	f7ff ffea 	bl	8000820 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800084c:	480c      	ldr	r0, [pc, #48]	@ (8000880 <LoopForever+0x6>)
  ldr r1, =_edata
 800084e:	490d      	ldr	r1, [pc, #52]	@ (8000884 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000850:	4a0d      	ldr	r2, [pc, #52]	@ (8000888 <LoopForever+0xe>)
  movs r3, #0
 8000852:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000854:	e002      	b.n	800085c <LoopCopyDataInit>

08000856 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000856:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000858:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800085a:	3304      	adds	r3, #4

0800085c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800085c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800085e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000860:	d3f9      	bcc.n	8000856 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000862:	4a0a      	ldr	r2, [pc, #40]	@ (800088c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000864:	4c0a      	ldr	r4, [pc, #40]	@ (8000890 <LoopForever+0x16>)
  movs r3, #0
 8000866:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000868:	e001      	b.n	800086e <LoopFillZerobss>

0800086a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800086a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800086c:	3204      	adds	r2, #4

0800086e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800086e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000870:	d3fb      	bcc.n	800086a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000872:	f003 fdcb 	bl	800440c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000876:	f7ff fd9d 	bl	80003b4 <main>

0800087a <LoopForever>:

LoopForever:
    b LoopForever
 800087a:	e7fe      	b.n	800087a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800087c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000880:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000884:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000888:	080044ac 	.word	0x080044ac
  ldr r2, =_sbss
 800088c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000890:	20000158 	.word	0x20000158

08000894 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000894:	e7fe      	b.n	8000894 <ADC1_2_IRQHandler>
	...

08000898 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800089c:	4b08      	ldr	r3, [pc, #32]	@ (80008c0 <HAL_Init+0x28>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	4a07      	ldr	r2, [pc, #28]	@ (80008c0 <HAL_Init+0x28>)
 80008a2:	f043 0310 	orr.w	r3, r3, #16
 80008a6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008a8:	2003      	movs	r0, #3
 80008aa:	f000 f94f 	bl	8000b4c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008ae:	200f      	movs	r0, #15
 80008b0:	f000 f808 	bl	80008c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008b4:	f7ff fea2 	bl	80005fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008b8:	2300      	movs	r3, #0
}
 80008ba:	4618      	mov	r0, r3
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	40022000 	.word	0x40022000

080008c4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b082      	sub	sp, #8
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008cc:	4b12      	ldr	r3, [pc, #72]	@ (8000918 <HAL_InitTick+0x54>)
 80008ce:	681a      	ldr	r2, [r3, #0]
 80008d0:	4b12      	ldr	r3, [pc, #72]	@ (800091c <HAL_InitTick+0x58>)
 80008d2:	781b      	ldrb	r3, [r3, #0]
 80008d4:	4619      	mov	r1, r3
 80008d6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80008da:	fbb3 f3f1 	udiv	r3, r3, r1
 80008de:	fbb2 f3f3 	udiv	r3, r2, r3
 80008e2:	4618      	mov	r0, r3
 80008e4:	f000 f967 	bl	8000bb6 <HAL_SYSTICK_Config>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d001      	beq.n	80008f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008ee:	2301      	movs	r3, #1
 80008f0:	e00e      	b.n	8000910 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	2b0f      	cmp	r3, #15
 80008f6:	d80a      	bhi.n	800090e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008f8:	2200      	movs	r2, #0
 80008fa:	6879      	ldr	r1, [r7, #4]
 80008fc:	f04f 30ff 	mov.w	r0, #4294967295
 8000900:	f000 f92f 	bl	8000b62 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000904:	4a06      	ldr	r2, [pc, #24]	@ (8000920 <HAL_InitTick+0x5c>)
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800090a:	2300      	movs	r3, #0
 800090c:	e000      	b.n	8000910 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800090e:	2301      	movs	r3, #1
}
 8000910:	4618      	mov	r0, r3
 8000912:	3708      	adds	r7, #8
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}
 8000918:	20000000 	.word	0x20000000
 800091c:	20000008 	.word	0x20000008
 8000920:	20000004 	.word	0x20000004

08000924 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000924:	b480      	push	{r7}
 8000926:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000928:	4b06      	ldr	r3, [pc, #24]	@ (8000944 <HAL_IncTick+0x20>)
 800092a:	781b      	ldrb	r3, [r3, #0]
 800092c:	461a      	mov	r2, r3
 800092e:	4b06      	ldr	r3, [pc, #24]	@ (8000948 <HAL_IncTick+0x24>)
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	4413      	add	r3, r2
 8000934:	4a04      	ldr	r2, [pc, #16]	@ (8000948 <HAL_IncTick+0x24>)
 8000936:	6013      	str	r3, [r2, #0]
}
 8000938:	bf00      	nop
 800093a:	46bd      	mov	sp, r7
 800093c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000940:	4770      	bx	lr
 8000942:	bf00      	nop
 8000944:	20000008 	.word	0x20000008
 8000948:	20000154 	.word	0x20000154

0800094c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0
  return uwTick;  
 8000950:	4b03      	ldr	r3, [pc, #12]	@ (8000960 <HAL_GetTick+0x14>)
 8000952:	681b      	ldr	r3, [r3, #0]
}
 8000954:	4618      	mov	r0, r3
 8000956:	46bd      	mov	sp, r7
 8000958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095c:	4770      	bx	lr
 800095e:	bf00      	nop
 8000960:	20000154 	.word	0x20000154

08000964 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b084      	sub	sp, #16
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800096c:	f7ff ffee 	bl	800094c <HAL_GetTick>
 8000970:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000976:	68fb      	ldr	r3, [r7, #12]
 8000978:	f1b3 3fff 	cmp.w	r3, #4294967295
 800097c:	d005      	beq.n	800098a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800097e:	4b0a      	ldr	r3, [pc, #40]	@ (80009a8 <HAL_Delay+0x44>)
 8000980:	781b      	ldrb	r3, [r3, #0]
 8000982:	461a      	mov	r2, r3
 8000984:	68fb      	ldr	r3, [r7, #12]
 8000986:	4413      	add	r3, r2
 8000988:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800098a:	bf00      	nop
 800098c:	f7ff ffde 	bl	800094c <HAL_GetTick>
 8000990:	4602      	mov	r2, r0
 8000992:	68bb      	ldr	r3, [r7, #8]
 8000994:	1ad3      	subs	r3, r2, r3
 8000996:	68fa      	ldr	r2, [r7, #12]
 8000998:	429a      	cmp	r2, r3
 800099a:	d8f7      	bhi.n	800098c <HAL_Delay+0x28>
  {
  }
}
 800099c:	bf00      	nop
 800099e:	bf00      	nop
 80009a0:	3710      	adds	r7, #16
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	20000008 	.word	0x20000008

080009ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009ac:	b480      	push	{r7}
 80009ae:	b085      	sub	sp, #20
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	f003 0307 	and.w	r3, r3, #7
 80009ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009bc:	4b0c      	ldr	r3, [pc, #48]	@ (80009f0 <__NVIC_SetPriorityGrouping+0x44>)
 80009be:	68db      	ldr	r3, [r3, #12]
 80009c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009c2:	68ba      	ldr	r2, [r7, #8]
 80009c4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80009c8:	4013      	ands	r3, r2
 80009ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009cc:	68fb      	ldr	r3, [r7, #12]
 80009ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009d0:	68bb      	ldr	r3, [r7, #8]
 80009d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009d4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80009d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80009dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009de:	4a04      	ldr	r2, [pc, #16]	@ (80009f0 <__NVIC_SetPriorityGrouping+0x44>)
 80009e0:	68bb      	ldr	r3, [r7, #8]
 80009e2:	60d3      	str	r3, [r2, #12]
}
 80009e4:	bf00      	nop
 80009e6:	3714      	adds	r7, #20
 80009e8:	46bd      	mov	sp, r7
 80009ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ee:	4770      	bx	lr
 80009f0:	e000ed00 	.word	0xe000ed00

080009f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009f8:	4b04      	ldr	r3, [pc, #16]	@ (8000a0c <__NVIC_GetPriorityGrouping+0x18>)
 80009fa:	68db      	ldr	r3, [r3, #12]
 80009fc:	0a1b      	lsrs	r3, r3, #8
 80009fe:	f003 0307 	and.w	r3, r3, #7
}
 8000a02:	4618      	mov	r0, r3
 8000a04:	46bd      	mov	sp, r7
 8000a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0a:	4770      	bx	lr
 8000a0c:	e000ed00 	.word	0xe000ed00

08000a10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a10:	b480      	push	{r7}
 8000a12:	b083      	sub	sp, #12
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	4603      	mov	r3, r0
 8000a18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	db0b      	blt.n	8000a3a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a22:	79fb      	ldrb	r3, [r7, #7]
 8000a24:	f003 021f 	and.w	r2, r3, #31
 8000a28:	4907      	ldr	r1, [pc, #28]	@ (8000a48 <__NVIC_EnableIRQ+0x38>)
 8000a2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a2e:	095b      	lsrs	r3, r3, #5
 8000a30:	2001      	movs	r0, #1
 8000a32:	fa00 f202 	lsl.w	r2, r0, r2
 8000a36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a3a:	bf00      	nop
 8000a3c:	370c      	adds	r7, #12
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a44:	4770      	bx	lr
 8000a46:	bf00      	nop
 8000a48:	e000e100 	.word	0xe000e100

08000a4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	b083      	sub	sp, #12
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	4603      	mov	r3, r0
 8000a54:	6039      	str	r1, [r7, #0]
 8000a56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	db0a      	blt.n	8000a76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a60:	683b      	ldr	r3, [r7, #0]
 8000a62:	b2da      	uxtb	r2, r3
 8000a64:	490c      	ldr	r1, [pc, #48]	@ (8000a98 <__NVIC_SetPriority+0x4c>)
 8000a66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a6a:	0112      	lsls	r2, r2, #4
 8000a6c:	b2d2      	uxtb	r2, r2
 8000a6e:	440b      	add	r3, r1
 8000a70:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a74:	e00a      	b.n	8000a8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a76:	683b      	ldr	r3, [r7, #0]
 8000a78:	b2da      	uxtb	r2, r3
 8000a7a:	4908      	ldr	r1, [pc, #32]	@ (8000a9c <__NVIC_SetPriority+0x50>)
 8000a7c:	79fb      	ldrb	r3, [r7, #7]
 8000a7e:	f003 030f 	and.w	r3, r3, #15
 8000a82:	3b04      	subs	r3, #4
 8000a84:	0112      	lsls	r2, r2, #4
 8000a86:	b2d2      	uxtb	r2, r2
 8000a88:	440b      	add	r3, r1
 8000a8a:	761a      	strb	r2, [r3, #24]
}
 8000a8c:	bf00      	nop
 8000a8e:	370c      	adds	r7, #12
 8000a90:	46bd      	mov	sp, r7
 8000a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a96:	4770      	bx	lr
 8000a98:	e000e100 	.word	0xe000e100
 8000a9c:	e000ed00 	.word	0xe000ed00

08000aa0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	b089      	sub	sp, #36	@ 0x24
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	60f8      	str	r0, [r7, #12]
 8000aa8:	60b9      	str	r1, [r7, #8]
 8000aaa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	f003 0307 	and.w	r3, r3, #7
 8000ab2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ab4:	69fb      	ldr	r3, [r7, #28]
 8000ab6:	f1c3 0307 	rsb	r3, r3, #7
 8000aba:	2b04      	cmp	r3, #4
 8000abc:	bf28      	it	cs
 8000abe:	2304      	movcs	r3, #4
 8000ac0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ac2:	69fb      	ldr	r3, [r7, #28]
 8000ac4:	3304      	adds	r3, #4
 8000ac6:	2b06      	cmp	r3, #6
 8000ac8:	d902      	bls.n	8000ad0 <NVIC_EncodePriority+0x30>
 8000aca:	69fb      	ldr	r3, [r7, #28]
 8000acc:	3b03      	subs	r3, #3
 8000ace:	e000      	b.n	8000ad2 <NVIC_EncodePriority+0x32>
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ad4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ad8:	69bb      	ldr	r3, [r7, #24]
 8000ada:	fa02 f303 	lsl.w	r3, r2, r3
 8000ade:	43da      	mvns	r2, r3
 8000ae0:	68bb      	ldr	r3, [r7, #8]
 8000ae2:	401a      	ands	r2, r3
 8000ae4:	697b      	ldr	r3, [r7, #20]
 8000ae6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ae8:	f04f 31ff 	mov.w	r1, #4294967295
 8000aec:	697b      	ldr	r3, [r7, #20]
 8000aee:	fa01 f303 	lsl.w	r3, r1, r3
 8000af2:	43d9      	mvns	r1, r3
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000af8:	4313      	orrs	r3, r2
         );
}
 8000afa:	4618      	mov	r0, r3
 8000afc:	3724      	adds	r7, #36	@ 0x24
 8000afe:	46bd      	mov	sp, r7
 8000b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b04:	4770      	bx	lr
	...

08000b08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b082      	sub	sp, #8
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	3b01      	subs	r3, #1
 8000b14:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000b18:	d301      	bcc.n	8000b1e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b1a:	2301      	movs	r3, #1
 8000b1c:	e00f      	b.n	8000b3e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b1e:	4a0a      	ldr	r2, [pc, #40]	@ (8000b48 <SysTick_Config+0x40>)
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	3b01      	subs	r3, #1
 8000b24:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b26:	210f      	movs	r1, #15
 8000b28:	f04f 30ff 	mov.w	r0, #4294967295
 8000b2c:	f7ff ff8e 	bl	8000a4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b30:	4b05      	ldr	r3, [pc, #20]	@ (8000b48 <SysTick_Config+0x40>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b36:	4b04      	ldr	r3, [pc, #16]	@ (8000b48 <SysTick_Config+0x40>)
 8000b38:	2207      	movs	r2, #7
 8000b3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b3c:	2300      	movs	r3, #0
}
 8000b3e:	4618      	mov	r0, r3
 8000b40:	3708      	adds	r7, #8
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	e000e010 	.word	0xe000e010

08000b4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b082      	sub	sp, #8
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b54:	6878      	ldr	r0, [r7, #4]
 8000b56:	f7ff ff29 	bl	80009ac <__NVIC_SetPriorityGrouping>
}
 8000b5a:	bf00      	nop
 8000b5c:	3708      	adds	r7, #8
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}

08000b62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b62:	b580      	push	{r7, lr}
 8000b64:	b086      	sub	sp, #24
 8000b66:	af00      	add	r7, sp, #0
 8000b68:	4603      	mov	r3, r0
 8000b6a:	60b9      	str	r1, [r7, #8]
 8000b6c:	607a      	str	r2, [r7, #4]
 8000b6e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b70:	2300      	movs	r3, #0
 8000b72:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b74:	f7ff ff3e 	bl	80009f4 <__NVIC_GetPriorityGrouping>
 8000b78:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b7a:	687a      	ldr	r2, [r7, #4]
 8000b7c:	68b9      	ldr	r1, [r7, #8]
 8000b7e:	6978      	ldr	r0, [r7, #20]
 8000b80:	f7ff ff8e 	bl	8000aa0 <NVIC_EncodePriority>
 8000b84:	4602      	mov	r2, r0
 8000b86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b8a:	4611      	mov	r1, r2
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f7ff ff5d 	bl	8000a4c <__NVIC_SetPriority>
}
 8000b92:	bf00      	nop
 8000b94:	3718      	adds	r7, #24
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}

08000b9a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b9a:	b580      	push	{r7, lr}
 8000b9c:	b082      	sub	sp, #8
 8000b9e:	af00      	add	r7, sp, #0
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ba4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f7ff ff31 	bl	8000a10 <__NVIC_EnableIRQ>
}
 8000bae:	bf00      	nop
 8000bb0:	3708      	adds	r7, #8
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}

08000bb6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bb6:	b580      	push	{r7, lr}
 8000bb8:	b082      	sub	sp, #8
 8000bba:	af00      	add	r7, sp, #0
 8000bbc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bbe:	6878      	ldr	r0, [r7, #4]
 8000bc0:	f7ff ffa2 	bl	8000b08 <SysTick_Config>
 8000bc4:	4603      	mov	r3, r0
}
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	3708      	adds	r7, #8
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}

08000bce <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000bce:	b580      	push	{r7, lr}
 8000bd0:	b084      	sub	sp, #16
 8000bd2:	af00      	add	r7, sp, #0
 8000bd4:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d101      	bne.n	8000be4 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000be0:	2301      	movs	r3, #1
 8000be2:	e037      	b.n	8000c54 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	2202      	movs	r2, #2
 8000be8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8000bfa:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8000bfe:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000c08:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	68db      	ldr	r3, [r3, #12]
 8000c0e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000c14:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	695b      	ldr	r3, [r3, #20]
 8000c1a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000c20:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	69db      	ldr	r3, [r3, #28]
 8000c26:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000c28:	68fa      	ldr	r2, [r7, #12]
 8000c2a:	4313      	orrs	r3, r2
 8000c2c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	68fa      	ldr	r2, [r7, #12]
 8000c34:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8000c36:	6878      	ldr	r0, [r7, #4]
 8000c38:	f000 f9bc 	bl	8000fb4 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	2200      	movs	r2, #0
 8000c40:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	2201      	movs	r2, #1
 8000c46:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000c52:	2300      	movs	r3, #0
}
 8000c54:	4618      	mov	r0, r3
 8000c56:	3710      	adds	r7, #16
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}

08000c5c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b086      	sub	sp, #24
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	60f8      	str	r0, [r7, #12]
 8000c64:	60b9      	str	r1, [r7, #8]
 8000c66:	607a      	str	r2, [r7, #4]
 8000c68:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000c74:	2b01      	cmp	r3, #1
 8000c76:	d101      	bne.n	8000c7c <HAL_DMA_Start_IT+0x20>
 8000c78:	2302      	movs	r3, #2
 8000c7a:	e04a      	b.n	8000d12 <HAL_DMA_Start_IT+0xb6>
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	2201      	movs	r2, #1
 8000c80:	f883 2020 	strb.w	r2, [r3, #32]

  if(HAL_DMA_STATE_READY == hdma->State)
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000c8a:	2b01      	cmp	r3, #1
 8000c8c:	d13a      	bne.n	8000d04 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000c8e:	68fb      	ldr	r3, [r7, #12]
 8000c90:	2202      	movs	r2, #2
 8000c92:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000c96:	68fb      	ldr	r3, [r7, #12]
 8000c98:	2200      	movs	r2, #0
 8000c9a:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	681a      	ldr	r2, [r3, #0]
 8000ca2:	68fb      	ldr	r3, [r7, #12]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	f022 0201 	bic.w	r2, r2, #1
 8000caa:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	687a      	ldr	r2, [r7, #4]
 8000cb0:	68b9      	ldr	r1, [r7, #8]
 8000cb2:	68f8      	ldr	r0, [r7, #12]
 8000cb4:	f000 f950 	bl	8000f58 <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d008      	beq.n	8000cd2 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	681a      	ldr	r2, [r3, #0]
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	f042 020e 	orr.w	r2, r2, #14
 8000cce:	601a      	str	r2, [r3, #0]
 8000cd0:	e00f      	b.n	8000cf2 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8000cd2:	68fb      	ldr	r3, [r7, #12]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	681a      	ldr	r2, [r3, #0]
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	f042 020a 	orr.w	r2, r2, #10
 8000ce0:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	681a      	ldr	r2, [r3, #0]
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	f022 0204 	bic.w	r2, r2, #4
 8000cf0:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	681a      	ldr	r2, [r3, #0]
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	f042 0201 	orr.w	r2, r2, #1
 8000d00:	601a      	str	r2, [r3, #0]
 8000d02:	e005      	b.n	8000d10 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	2200      	movs	r2, #0
 8000d08:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8000d0c:	2302      	movs	r3, #2
 8000d0e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8000d10:	7dfb      	ldrb	r3, [r7, #23]
}
 8000d12:	4618      	mov	r0, r3
 8000d14:	3718      	adds	r7, #24
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}

08000d1a <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000d1a:	b480      	push	{r7}
 8000d1c:	b083      	sub	sp, #12
 8000d1e:	af00      	add	r7, sp, #0
 8000d20:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d101      	bne.n	8000d2c <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8000d28:	2301      	movs	r3, #1
 8000d2a:	e02e      	b.n	8000d8a <HAL_DMA_Abort+0x70>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000d32:	2b02      	cmp	r3, #2
 8000d34:	d008      	beq.n	8000d48 <HAL_DMA_Abort+0x2e>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	2204      	movs	r2, #4
 8000d3a:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	2200      	movs	r2, #0
 8000d40:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 8000d44:	2301      	movs	r3, #1
 8000d46:	e020      	b.n	8000d8a <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	681a      	ldr	r2, [r3, #0]
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	f022 020e 	bic.w	r2, r2, #14
 8000d56:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	681a      	ldr	r2, [r3, #0]
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	f022 0201 	bic.w	r2, r2, #1
 8000d66:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000d70:	2101      	movs	r1, #1
 8000d72:	fa01 f202 	lsl.w	r2, r1, r2
 8000d76:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	2201      	movs	r2, #1
 8000d7c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	2200      	movs	r2, #0
 8000d84:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000d88:	2300      	movs	r3, #0
}
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	370c      	adds	r7, #12
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d94:	4770      	bx	lr

08000d96 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000d96:	b580      	push	{r7, lr}
 8000d98:	b084      	sub	sp, #16
 8000d9a:	af00      	add	r7, sp, #0
 8000d9c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000da8:	2b02      	cmp	r3, #2
 8000daa:	d005      	beq.n	8000db8 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	2204      	movs	r2, #4
 8000db0:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 8000db2:	2301      	movs	r3, #1
 8000db4:	73fb      	strb	r3, [r7, #15]
 8000db6:	e027      	b.n	8000e08 <HAL_DMA_Abort_IT+0x72>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	681a      	ldr	r2, [r3, #0]
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	f022 020e 	bic.w	r2, r2, #14
 8000dc6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	681a      	ldr	r2, [r3, #0]
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	f022 0201 	bic.w	r2, r2, #1
 8000dd6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000de0:	2101      	movs	r1, #1
 8000de2:	fa01 f202 	lsl.w	r2, r1, r2
 8000de6:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	2201      	movs	r2, #1
 8000dec:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	2200      	movs	r2, #0
 8000df4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d003      	beq.n	8000e08 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000e04:	6878      	ldr	r0, [r7, #4]
 8000e06:	4798      	blx	r3
    }
  }
  return status;
 8000e08:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	3710      	adds	r7, #16
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}

08000e12 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000e12:	b580      	push	{r7, lr}
 8000e14:	b084      	sub	sp, #16
 8000e16:	af00      	add	r7, sp, #0
 8000e18:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e2e:	2204      	movs	r2, #4
 8000e30:	409a      	lsls	r2, r3
 8000e32:	68fb      	ldr	r3, [r7, #12]
 8000e34:	4013      	ands	r3, r2
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d024      	beq.n	8000e84 <HAL_DMA_IRQHandler+0x72>
 8000e3a:	68bb      	ldr	r3, [r7, #8]
 8000e3c:	f003 0304 	and.w	r3, r3, #4
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d01f      	beq.n	8000e84 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	f003 0320 	and.w	r3, r3, #32
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d107      	bne.n	8000e62 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	681a      	ldr	r2, [r3, #0]
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	f022 0204 	bic.w	r2, r2, #4
 8000e60:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000e6a:	2104      	movs	r1, #4
 8000e6c:	fa01 f202 	lsl.w	r2, r1, r2
 8000e70:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d06a      	beq.n	8000f50 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e7e:	6878      	ldr	r0, [r7, #4]
 8000e80:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8000e82:	e065      	b.n	8000f50 <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e88:	2202      	movs	r2, #2
 8000e8a:	409a      	lsls	r2, r3
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	4013      	ands	r3, r2
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d02c      	beq.n	8000eee <HAL_DMA_IRQHandler+0xdc>
 8000e94:	68bb      	ldr	r3, [r7, #8]
 8000e96:	f003 0302 	and.w	r3, r3, #2
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d027      	beq.n	8000eee <HAL_DMA_IRQHandler+0xdc>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	f003 0320 	and.w	r3, r3, #32
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d10b      	bne.n	8000ec4 <HAL_DMA_IRQHandler+0xb2>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	681a      	ldr	r2, [r3, #0]
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	f022 020a 	bic.w	r2, r2, #10
 8000eba:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	2201      	movs	r2, #1
 8000ec0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000ecc:	2102      	movs	r1, #2
 8000ece:	fa01 f202 	lsl.w	r2, r1, r2
 8000ed2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d035      	beq.n	8000f50 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ee8:	6878      	ldr	r0, [r7, #4]
 8000eea:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8000eec:	e030      	b.n	8000f50 <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ef2:	2208      	movs	r2, #8
 8000ef4:	409a      	lsls	r2, r3
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	4013      	ands	r3, r2
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d028      	beq.n	8000f50 <HAL_DMA_IRQHandler+0x13e>
 8000efe:	68bb      	ldr	r3, [r7, #8]
 8000f00:	f003 0308 	and.w	r3, r3, #8
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d023      	beq.n	8000f50 <HAL_DMA_IRQHandler+0x13e>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	681a      	ldr	r2, [r3, #0]
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	f022 020e 	bic.w	r2, r2, #14
 8000f16:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000f20:	2101      	movs	r1, #1
 8000f22:	fa01 f202 	lsl.w	r2, r1, r2
 8000f26:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	2201      	movs	r2, #1
 8000f2c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	2201      	movs	r2, #1
 8000f32:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	2200      	movs	r2, #0
 8000f3a:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferErrorCallback != NULL)
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d004      	beq.n	8000f50 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f4a:	6878      	ldr	r0, [r7, #4]
 8000f4c:	4798      	blx	r3
    }
  }
}
 8000f4e:	e7ff      	b.n	8000f50 <HAL_DMA_IRQHandler+0x13e>
 8000f50:	bf00      	nop
 8000f52:	3710      	adds	r7, #16
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}

08000f58 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b085      	sub	sp, #20
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	60f8      	str	r0, [r7, #12]
 8000f60:	60b9      	str	r1, [r7, #8]
 8000f62:	607a      	str	r2, [r7, #4]
 8000f64:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000f6e:	2101      	movs	r1, #1
 8000f70:	fa01 f202 	lsl.w	r2, r1, r2
 8000f74:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	683a      	ldr	r2, [r7, #0]
 8000f7c:	605a      	str	r2, [r3, #4]

  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	685b      	ldr	r3, [r3, #4]
 8000f82:	2b10      	cmp	r3, #16
 8000f84:	d108      	bne.n	8000f98 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	687a      	ldr	r2, [r7, #4]
 8000f8c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	68ba      	ldr	r2, [r7, #8]
 8000f94:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8000f96:	e007      	b.n	8000fa8 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	68ba      	ldr	r2, [r7, #8]
 8000f9e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	687a      	ldr	r2, [r7, #4]
 8000fa6:	60da      	str	r2, [r3, #12]
}
 8000fa8:	bf00      	nop
 8000faa:	3714      	adds	r7, #20
 8000fac:	46bd      	mov	sp, r7
 8000fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb2:	4770      	bx	lr

08000fb4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b083      	sub	sp, #12
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	461a      	mov	r2, r3
 8000fc2:	4b14      	ldr	r3, [pc, #80]	@ (8001014 <DMA_CalcBaseAndBitshift+0x60>)
 8000fc4:	429a      	cmp	r2, r3
 8000fc6:	d80f      	bhi.n	8000fe8 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	461a      	mov	r2, r3
 8000fce:	4b12      	ldr	r3, [pc, #72]	@ (8001018 <DMA_CalcBaseAndBitshift+0x64>)
 8000fd0:	4413      	add	r3, r2
 8000fd2:	4a12      	ldr	r2, [pc, #72]	@ (800101c <DMA_CalcBaseAndBitshift+0x68>)
 8000fd4:	fba2 2303 	umull	r2, r3, r2, r3
 8000fd8:	091b      	lsrs	r3, r3, #4
 8000fda:	009a      	lsls	r2, r3, #2
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA1;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	4a0f      	ldr	r2, [pc, #60]	@ (8001020 <DMA_CalcBaseAndBitshift+0x6c>)
 8000fe4:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8000fe6:	e00e      	b.n	8001006 <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	461a      	mov	r2, r3
 8000fee:	4b0d      	ldr	r3, [pc, #52]	@ (8001024 <DMA_CalcBaseAndBitshift+0x70>)
 8000ff0:	4413      	add	r3, r2
 8000ff2:	4a0a      	ldr	r2, [pc, #40]	@ (800101c <DMA_CalcBaseAndBitshift+0x68>)
 8000ff4:	fba2 2303 	umull	r2, r3, r2, r3
 8000ff8:	091b      	lsrs	r3, r3, #4
 8000ffa:	009a      	lsls	r2, r3, #2
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA2;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	4a09      	ldr	r2, [pc, #36]	@ (8001028 <DMA_CalcBaseAndBitshift+0x74>)
 8001004:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8001006:	bf00      	nop
 8001008:	370c      	adds	r7, #12
 800100a:	46bd      	mov	sp, r7
 800100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001010:	4770      	bx	lr
 8001012:	bf00      	nop
 8001014:	40020407 	.word	0x40020407
 8001018:	bffdfff8 	.word	0xbffdfff8
 800101c:	cccccccd 	.word	0xcccccccd
 8001020:	40020000 	.word	0x40020000
 8001024:	bffdfbf8 	.word	0xbffdfbf8
 8001028:	40020400 	.word	0x40020400

0800102c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800102c:	b480      	push	{r7}
 800102e:	b087      	sub	sp, #28
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
 8001034:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001036:	2300      	movs	r3, #0
 8001038:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800103a:	e160      	b.n	80012fe <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	681a      	ldr	r2, [r3, #0]
 8001040:	2101      	movs	r1, #1
 8001042:	697b      	ldr	r3, [r7, #20]
 8001044:	fa01 f303 	lsl.w	r3, r1, r3
 8001048:	4013      	ands	r3, r2
 800104a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	2b00      	cmp	r3, #0
 8001050:	f000 8152 	beq.w	80012f8 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	685b      	ldr	r3, [r3, #4]
 8001058:	f003 0303 	and.w	r3, r3, #3
 800105c:	2b01      	cmp	r3, #1
 800105e:	d005      	beq.n	800106c <HAL_GPIO_Init+0x40>
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	f003 0303 	and.w	r3, r3, #3
 8001068:	2b02      	cmp	r3, #2
 800106a:	d130      	bne.n	80010ce <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	689b      	ldr	r3, [r3, #8]
 8001070:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001072:	697b      	ldr	r3, [r7, #20]
 8001074:	005b      	lsls	r3, r3, #1
 8001076:	2203      	movs	r2, #3
 8001078:	fa02 f303 	lsl.w	r3, r2, r3
 800107c:	43db      	mvns	r3, r3
 800107e:	693a      	ldr	r2, [r7, #16]
 8001080:	4013      	ands	r3, r2
 8001082:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	68da      	ldr	r2, [r3, #12]
 8001088:	697b      	ldr	r3, [r7, #20]
 800108a:	005b      	lsls	r3, r3, #1
 800108c:	fa02 f303 	lsl.w	r3, r2, r3
 8001090:	693a      	ldr	r2, [r7, #16]
 8001092:	4313      	orrs	r3, r2
 8001094:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	693a      	ldr	r2, [r7, #16]
 800109a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	685b      	ldr	r3, [r3, #4]
 80010a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010a2:	2201      	movs	r2, #1
 80010a4:	697b      	ldr	r3, [r7, #20]
 80010a6:	fa02 f303 	lsl.w	r3, r2, r3
 80010aa:	43db      	mvns	r3, r3
 80010ac:	693a      	ldr	r2, [r7, #16]
 80010ae:	4013      	ands	r3, r2
 80010b0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	685b      	ldr	r3, [r3, #4]
 80010b6:	091b      	lsrs	r3, r3, #4
 80010b8:	f003 0201 	and.w	r2, r3, #1
 80010bc:	697b      	ldr	r3, [r7, #20]
 80010be:	fa02 f303 	lsl.w	r3, r2, r3
 80010c2:	693a      	ldr	r2, [r7, #16]
 80010c4:	4313      	orrs	r3, r2
 80010c6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	693a      	ldr	r2, [r7, #16]
 80010cc:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	685b      	ldr	r3, [r3, #4]
 80010d2:	f003 0303 	and.w	r3, r3, #3
 80010d6:	2b03      	cmp	r3, #3
 80010d8:	d017      	beq.n	800110a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	68db      	ldr	r3, [r3, #12]
 80010de:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80010e0:	697b      	ldr	r3, [r7, #20]
 80010e2:	005b      	lsls	r3, r3, #1
 80010e4:	2203      	movs	r2, #3
 80010e6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ea:	43db      	mvns	r3, r3
 80010ec:	693a      	ldr	r2, [r7, #16]
 80010ee:	4013      	ands	r3, r2
 80010f0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	689a      	ldr	r2, [r3, #8]
 80010f6:	697b      	ldr	r3, [r7, #20]
 80010f8:	005b      	lsls	r3, r3, #1
 80010fa:	fa02 f303 	lsl.w	r3, r2, r3
 80010fe:	693a      	ldr	r2, [r7, #16]
 8001100:	4313      	orrs	r3, r2
 8001102:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	693a      	ldr	r2, [r7, #16]
 8001108:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	685b      	ldr	r3, [r3, #4]
 800110e:	f003 0303 	and.w	r3, r3, #3
 8001112:	2b02      	cmp	r3, #2
 8001114:	d123      	bne.n	800115e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001116:	697b      	ldr	r3, [r7, #20]
 8001118:	08da      	lsrs	r2, r3, #3
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	3208      	adds	r2, #8
 800111e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001122:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001124:	697b      	ldr	r3, [r7, #20]
 8001126:	f003 0307 	and.w	r3, r3, #7
 800112a:	009b      	lsls	r3, r3, #2
 800112c:	220f      	movs	r2, #15
 800112e:	fa02 f303 	lsl.w	r3, r2, r3
 8001132:	43db      	mvns	r3, r3
 8001134:	693a      	ldr	r2, [r7, #16]
 8001136:	4013      	ands	r3, r2
 8001138:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	691a      	ldr	r2, [r3, #16]
 800113e:	697b      	ldr	r3, [r7, #20]
 8001140:	f003 0307 	and.w	r3, r3, #7
 8001144:	009b      	lsls	r3, r3, #2
 8001146:	fa02 f303 	lsl.w	r3, r2, r3
 800114a:	693a      	ldr	r2, [r7, #16]
 800114c:	4313      	orrs	r3, r2
 800114e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001150:	697b      	ldr	r3, [r7, #20]
 8001152:	08da      	lsrs	r2, r3, #3
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	3208      	adds	r2, #8
 8001158:	6939      	ldr	r1, [r7, #16]
 800115a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001164:	697b      	ldr	r3, [r7, #20]
 8001166:	005b      	lsls	r3, r3, #1
 8001168:	2203      	movs	r2, #3
 800116a:	fa02 f303 	lsl.w	r3, r2, r3
 800116e:	43db      	mvns	r3, r3
 8001170:	693a      	ldr	r2, [r7, #16]
 8001172:	4013      	ands	r3, r2
 8001174:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	f003 0203 	and.w	r2, r3, #3
 800117e:	697b      	ldr	r3, [r7, #20]
 8001180:	005b      	lsls	r3, r3, #1
 8001182:	fa02 f303 	lsl.w	r3, r2, r3
 8001186:	693a      	ldr	r2, [r7, #16]
 8001188:	4313      	orrs	r3, r2
 800118a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	693a      	ldr	r2, [r7, #16]
 8001190:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800119a:	2b00      	cmp	r3, #0
 800119c:	f000 80ac 	beq.w	80012f8 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011a0:	4b5e      	ldr	r3, [pc, #376]	@ (800131c <HAL_GPIO_Init+0x2f0>)
 80011a2:	699b      	ldr	r3, [r3, #24]
 80011a4:	4a5d      	ldr	r2, [pc, #372]	@ (800131c <HAL_GPIO_Init+0x2f0>)
 80011a6:	f043 0301 	orr.w	r3, r3, #1
 80011aa:	6193      	str	r3, [r2, #24]
 80011ac:	4b5b      	ldr	r3, [pc, #364]	@ (800131c <HAL_GPIO_Init+0x2f0>)
 80011ae:	699b      	ldr	r3, [r3, #24]
 80011b0:	f003 0301 	and.w	r3, r3, #1
 80011b4:	60bb      	str	r3, [r7, #8]
 80011b6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80011b8:	4a59      	ldr	r2, [pc, #356]	@ (8001320 <HAL_GPIO_Init+0x2f4>)
 80011ba:	697b      	ldr	r3, [r7, #20]
 80011bc:	089b      	lsrs	r3, r3, #2
 80011be:	3302      	adds	r3, #2
 80011c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011c4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80011c6:	697b      	ldr	r3, [r7, #20]
 80011c8:	f003 0303 	and.w	r3, r3, #3
 80011cc:	009b      	lsls	r3, r3, #2
 80011ce:	220f      	movs	r2, #15
 80011d0:	fa02 f303 	lsl.w	r3, r2, r3
 80011d4:	43db      	mvns	r3, r3
 80011d6:	693a      	ldr	r2, [r7, #16]
 80011d8:	4013      	ands	r3, r2
 80011da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80011e2:	d025      	beq.n	8001230 <HAL_GPIO_Init+0x204>
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	4a4f      	ldr	r2, [pc, #316]	@ (8001324 <HAL_GPIO_Init+0x2f8>)
 80011e8:	4293      	cmp	r3, r2
 80011ea:	d01f      	beq.n	800122c <HAL_GPIO_Init+0x200>
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	4a4e      	ldr	r2, [pc, #312]	@ (8001328 <HAL_GPIO_Init+0x2fc>)
 80011f0:	4293      	cmp	r3, r2
 80011f2:	d019      	beq.n	8001228 <HAL_GPIO_Init+0x1fc>
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	4a4d      	ldr	r2, [pc, #308]	@ (800132c <HAL_GPIO_Init+0x300>)
 80011f8:	4293      	cmp	r3, r2
 80011fa:	d013      	beq.n	8001224 <HAL_GPIO_Init+0x1f8>
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	4a4c      	ldr	r2, [pc, #304]	@ (8001330 <HAL_GPIO_Init+0x304>)
 8001200:	4293      	cmp	r3, r2
 8001202:	d00d      	beq.n	8001220 <HAL_GPIO_Init+0x1f4>
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	4a4b      	ldr	r2, [pc, #300]	@ (8001334 <HAL_GPIO_Init+0x308>)
 8001208:	4293      	cmp	r3, r2
 800120a:	d007      	beq.n	800121c <HAL_GPIO_Init+0x1f0>
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	4a4a      	ldr	r2, [pc, #296]	@ (8001338 <HAL_GPIO_Init+0x30c>)
 8001210:	4293      	cmp	r3, r2
 8001212:	d101      	bne.n	8001218 <HAL_GPIO_Init+0x1ec>
 8001214:	2306      	movs	r3, #6
 8001216:	e00c      	b.n	8001232 <HAL_GPIO_Init+0x206>
 8001218:	2307      	movs	r3, #7
 800121a:	e00a      	b.n	8001232 <HAL_GPIO_Init+0x206>
 800121c:	2305      	movs	r3, #5
 800121e:	e008      	b.n	8001232 <HAL_GPIO_Init+0x206>
 8001220:	2304      	movs	r3, #4
 8001222:	e006      	b.n	8001232 <HAL_GPIO_Init+0x206>
 8001224:	2303      	movs	r3, #3
 8001226:	e004      	b.n	8001232 <HAL_GPIO_Init+0x206>
 8001228:	2302      	movs	r3, #2
 800122a:	e002      	b.n	8001232 <HAL_GPIO_Init+0x206>
 800122c:	2301      	movs	r3, #1
 800122e:	e000      	b.n	8001232 <HAL_GPIO_Init+0x206>
 8001230:	2300      	movs	r3, #0
 8001232:	697a      	ldr	r2, [r7, #20]
 8001234:	f002 0203 	and.w	r2, r2, #3
 8001238:	0092      	lsls	r2, r2, #2
 800123a:	4093      	lsls	r3, r2
 800123c:	693a      	ldr	r2, [r7, #16]
 800123e:	4313      	orrs	r3, r2
 8001240:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001242:	4937      	ldr	r1, [pc, #220]	@ (8001320 <HAL_GPIO_Init+0x2f4>)
 8001244:	697b      	ldr	r3, [r7, #20]
 8001246:	089b      	lsrs	r3, r3, #2
 8001248:	3302      	adds	r3, #2
 800124a:	693a      	ldr	r2, [r7, #16]
 800124c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001250:	4b3a      	ldr	r3, [pc, #232]	@ (800133c <HAL_GPIO_Init+0x310>)
 8001252:	689b      	ldr	r3, [r3, #8]
 8001254:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	43db      	mvns	r3, r3
 800125a:	693a      	ldr	r2, [r7, #16]
 800125c:	4013      	ands	r3, r2
 800125e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001268:	2b00      	cmp	r3, #0
 800126a:	d003      	beq.n	8001274 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 800126c:	693a      	ldr	r2, [r7, #16]
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	4313      	orrs	r3, r2
 8001272:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001274:	4a31      	ldr	r2, [pc, #196]	@ (800133c <HAL_GPIO_Init+0x310>)
 8001276:	693b      	ldr	r3, [r7, #16]
 8001278:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800127a:	4b30      	ldr	r3, [pc, #192]	@ (800133c <HAL_GPIO_Init+0x310>)
 800127c:	68db      	ldr	r3, [r3, #12]
 800127e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	43db      	mvns	r3, r3
 8001284:	693a      	ldr	r2, [r7, #16]
 8001286:	4013      	ands	r3, r2
 8001288:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	685b      	ldr	r3, [r3, #4]
 800128e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001292:	2b00      	cmp	r3, #0
 8001294:	d003      	beq.n	800129e <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8001296:	693a      	ldr	r2, [r7, #16]
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	4313      	orrs	r3, r2
 800129c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800129e:	4a27      	ldr	r2, [pc, #156]	@ (800133c <HAL_GPIO_Init+0x310>)
 80012a0:	693b      	ldr	r3, [r7, #16]
 80012a2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80012a4:	4b25      	ldr	r3, [pc, #148]	@ (800133c <HAL_GPIO_Init+0x310>)
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	43db      	mvns	r3, r3
 80012ae:	693a      	ldr	r2, [r7, #16]
 80012b0:	4013      	ands	r3, r2
 80012b2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d003      	beq.n	80012c8 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80012c0:	693a      	ldr	r2, [r7, #16]
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	4313      	orrs	r3, r2
 80012c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80012c8:	4a1c      	ldr	r2, [pc, #112]	@ (800133c <HAL_GPIO_Init+0x310>)
 80012ca:	693b      	ldr	r3, [r7, #16]
 80012cc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012ce:	4b1b      	ldr	r3, [pc, #108]	@ (800133c <HAL_GPIO_Init+0x310>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	43db      	mvns	r3, r3
 80012d8:	693a      	ldr	r2, [r7, #16]
 80012da:	4013      	ands	r3, r2
 80012dc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d003      	beq.n	80012f2 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 80012ea:	693a      	ldr	r2, [r7, #16]
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	4313      	orrs	r3, r2
 80012f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80012f2:	4a12      	ldr	r2, [pc, #72]	@ (800133c <HAL_GPIO_Init+0x310>)
 80012f4:	693b      	ldr	r3, [r7, #16]
 80012f6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80012f8:	697b      	ldr	r3, [r7, #20]
 80012fa:	3301      	adds	r3, #1
 80012fc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	681a      	ldr	r2, [r3, #0]
 8001302:	697b      	ldr	r3, [r7, #20]
 8001304:	fa22 f303 	lsr.w	r3, r2, r3
 8001308:	2b00      	cmp	r3, #0
 800130a:	f47f ae97 	bne.w	800103c <HAL_GPIO_Init+0x10>
  }
}
 800130e:	bf00      	nop
 8001310:	bf00      	nop
 8001312:	371c      	adds	r7, #28
 8001314:	46bd      	mov	sp, r7
 8001316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131a:	4770      	bx	lr
 800131c:	40021000 	.word	0x40021000
 8001320:	40010000 	.word	0x40010000
 8001324:	48000400 	.word	0x48000400
 8001328:	48000800 	.word	0x48000800
 800132c:	48000c00 	.word	0x48000c00
 8001330:	48001000 	.word	0x48001000
 8001334:	48001400 	.word	0x48001400
 8001338:	48001800 	.word	0x48001800
 800133c:	40010400 	.word	0x40010400

08001340 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 8001346:	af00      	add	r7, sp, #0
 8001348:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800134c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001350:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001352:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001356:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	2b00      	cmp	r3, #0
 800135e:	d102      	bne.n	8001366 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001360:	2301      	movs	r3, #1
 8001362:	f001 b83a 	b.w	80023da <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001366:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800136a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f003 0301 	and.w	r3, r3, #1
 8001376:	2b00      	cmp	r3, #0
 8001378:	f000 816f 	beq.w	800165a <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800137c:	4bb5      	ldr	r3, [pc, #724]	@ (8001654 <HAL_RCC_OscConfig+0x314>)
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	f003 030c 	and.w	r3, r3, #12
 8001384:	2b04      	cmp	r3, #4
 8001386:	d00c      	beq.n	80013a2 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001388:	4bb2      	ldr	r3, [pc, #712]	@ (8001654 <HAL_RCC_OscConfig+0x314>)
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	f003 030c 	and.w	r3, r3, #12
 8001390:	2b08      	cmp	r3, #8
 8001392:	d15c      	bne.n	800144e <HAL_RCC_OscConfig+0x10e>
 8001394:	4baf      	ldr	r3, [pc, #700]	@ (8001654 <HAL_RCC_OscConfig+0x314>)
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 800139c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80013a0:	d155      	bne.n	800144e <HAL_RCC_OscConfig+0x10e>
 80013a2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80013a6:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013aa:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80013ae:	fa93 f3a3 	rbit	r3, r3
 80013b2:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80013b6:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013ba:	fab3 f383 	clz	r3, r3
 80013be:	b2db      	uxtb	r3, r3
 80013c0:	095b      	lsrs	r3, r3, #5
 80013c2:	b2db      	uxtb	r3, r3
 80013c4:	f043 0301 	orr.w	r3, r3, #1
 80013c8:	b2db      	uxtb	r3, r3
 80013ca:	2b01      	cmp	r3, #1
 80013cc:	d102      	bne.n	80013d4 <HAL_RCC_OscConfig+0x94>
 80013ce:	4ba1      	ldr	r3, [pc, #644]	@ (8001654 <HAL_RCC_OscConfig+0x314>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	e015      	b.n	8001400 <HAL_RCC_OscConfig+0xc0>
 80013d4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80013d8:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013dc:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 80013e0:	fa93 f3a3 	rbit	r3, r3
 80013e4:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 80013e8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80013ec:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 80013f0:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 80013f4:	fa93 f3a3 	rbit	r3, r3
 80013f8:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 80013fc:	4b95      	ldr	r3, [pc, #596]	@ (8001654 <HAL_RCC_OscConfig+0x314>)
 80013fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001400:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001404:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 8001408:	f8d7 21dc 	ldr.w	r2, [r7, #476]	@ 0x1dc
 800140c:	fa92 f2a2 	rbit	r2, r2
 8001410:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
  return result;
 8001414:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8001418:	fab2 f282 	clz	r2, r2
 800141c:	b2d2      	uxtb	r2, r2
 800141e:	f042 0220 	orr.w	r2, r2, #32
 8001422:	b2d2      	uxtb	r2, r2
 8001424:	f002 021f 	and.w	r2, r2, #31
 8001428:	2101      	movs	r1, #1
 800142a:	fa01 f202 	lsl.w	r2, r1, r2
 800142e:	4013      	ands	r3, r2
 8001430:	2b00      	cmp	r3, #0
 8001432:	f000 8111 	beq.w	8001658 <HAL_RCC_OscConfig+0x318>
 8001436:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800143a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	2b00      	cmp	r3, #0
 8001444:	f040 8108 	bne.w	8001658 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8001448:	2301      	movs	r3, #1
 800144a:	f000 bfc6 	b.w	80023da <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800144e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001452:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800145e:	d106      	bne.n	800146e <HAL_RCC_OscConfig+0x12e>
 8001460:	4b7c      	ldr	r3, [pc, #496]	@ (8001654 <HAL_RCC_OscConfig+0x314>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4a7b      	ldr	r2, [pc, #492]	@ (8001654 <HAL_RCC_OscConfig+0x314>)
 8001466:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800146a:	6013      	str	r3, [r2, #0]
 800146c:	e036      	b.n	80014dc <HAL_RCC_OscConfig+0x19c>
 800146e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001472:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d10c      	bne.n	8001498 <HAL_RCC_OscConfig+0x158>
 800147e:	4b75      	ldr	r3, [pc, #468]	@ (8001654 <HAL_RCC_OscConfig+0x314>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	4a74      	ldr	r2, [pc, #464]	@ (8001654 <HAL_RCC_OscConfig+0x314>)
 8001484:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001488:	6013      	str	r3, [r2, #0]
 800148a:	4b72      	ldr	r3, [pc, #456]	@ (8001654 <HAL_RCC_OscConfig+0x314>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	4a71      	ldr	r2, [pc, #452]	@ (8001654 <HAL_RCC_OscConfig+0x314>)
 8001490:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001494:	6013      	str	r3, [r2, #0]
 8001496:	e021      	b.n	80014dc <HAL_RCC_OscConfig+0x19c>
 8001498:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800149c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80014a8:	d10c      	bne.n	80014c4 <HAL_RCC_OscConfig+0x184>
 80014aa:	4b6a      	ldr	r3, [pc, #424]	@ (8001654 <HAL_RCC_OscConfig+0x314>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	4a69      	ldr	r2, [pc, #420]	@ (8001654 <HAL_RCC_OscConfig+0x314>)
 80014b0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80014b4:	6013      	str	r3, [r2, #0]
 80014b6:	4b67      	ldr	r3, [pc, #412]	@ (8001654 <HAL_RCC_OscConfig+0x314>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4a66      	ldr	r2, [pc, #408]	@ (8001654 <HAL_RCC_OscConfig+0x314>)
 80014bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80014c0:	6013      	str	r3, [r2, #0]
 80014c2:	e00b      	b.n	80014dc <HAL_RCC_OscConfig+0x19c>
 80014c4:	4b63      	ldr	r3, [pc, #396]	@ (8001654 <HAL_RCC_OscConfig+0x314>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a62      	ldr	r2, [pc, #392]	@ (8001654 <HAL_RCC_OscConfig+0x314>)
 80014ca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80014ce:	6013      	str	r3, [r2, #0]
 80014d0:	4b60      	ldr	r3, [pc, #384]	@ (8001654 <HAL_RCC_OscConfig+0x314>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4a5f      	ldr	r2, [pc, #380]	@ (8001654 <HAL_RCC_OscConfig+0x314>)
 80014d6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80014da:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014dc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80014e0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d059      	beq.n	80015a0 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014ec:	f7ff fa2e 	bl	800094c <HAL_GetTick>
 80014f0:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014f4:	e00a      	b.n	800150c <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014f6:	f7ff fa29 	bl	800094c <HAL_GetTick>
 80014fa:	4602      	mov	r2, r0
 80014fc:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001500:	1ad3      	subs	r3, r2, r3
 8001502:	2b64      	cmp	r3, #100	@ 0x64
 8001504:	d902      	bls.n	800150c <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8001506:	2303      	movs	r3, #3
 8001508:	f000 bf67 	b.w	80023da <HAL_RCC_OscConfig+0x109a>
 800150c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001510:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001514:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8001518:	fa93 f3a3 	rbit	r3, r3
 800151c:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
  return result;
 8001520:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001524:	fab3 f383 	clz	r3, r3
 8001528:	b2db      	uxtb	r3, r3
 800152a:	095b      	lsrs	r3, r3, #5
 800152c:	b2db      	uxtb	r3, r3
 800152e:	f043 0301 	orr.w	r3, r3, #1
 8001532:	b2db      	uxtb	r3, r3
 8001534:	2b01      	cmp	r3, #1
 8001536:	d102      	bne.n	800153e <HAL_RCC_OscConfig+0x1fe>
 8001538:	4b46      	ldr	r3, [pc, #280]	@ (8001654 <HAL_RCC_OscConfig+0x314>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	e015      	b.n	800156a <HAL_RCC_OscConfig+0x22a>
 800153e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001542:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001546:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 800154a:	fa93 f3a3 	rbit	r3, r3
 800154e:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 8001552:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001556:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 800155a:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 800155e:	fa93 f3a3 	rbit	r3, r3
 8001562:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8001566:	4b3b      	ldr	r3, [pc, #236]	@ (8001654 <HAL_RCC_OscConfig+0x314>)
 8001568:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800156a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800156e:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 8001572:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 8001576:	fa92 f2a2 	rbit	r2, r2
 800157a:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
  return result;
 800157e:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8001582:	fab2 f282 	clz	r2, r2
 8001586:	b2d2      	uxtb	r2, r2
 8001588:	f042 0220 	orr.w	r2, r2, #32
 800158c:	b2d2      	uxtb	r2, r2
 800158e:	f002 021f 	and.w	r2, r2, #31
 8001592:	2101      	movs	r1, #1
 8001594:	fa01 f202 	lsl.w	r2, r1, r2
 8001598:	4013      	ands	r3, r2
 800159a:	2b00      	cmp	r3, #0
 800159c:	d0ab      	beq.n	80014f6 <HAL_RCC_OscConfig+0x1b6>
 800159e:	e05c      	b.n	800165a <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015a0:	f7ff f9d4 	bl	800094c <HAL_GetTick>
 80015a4:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015a8:	e00a      	b.n	80015c0 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015aa:	f7ff f9cf 	bl	800094c <HAL_GetTick>
 80015ae:	4602      	mov	r2, r0
 80015b0:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80015b4:	1ad3      	subs	r3, r2, r3
 80015b6:	2b64      	cmp	r3, #100	@ 0x64
 80015b8:	d902      	bls.n	80015c0 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 80015ba:	2303      	movs	r3, #3
 80015bc:	f000 bf0d 	b.w	80023da <HAL_RCC_OscConfig+0x109a>
 80015c0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80015c4:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015c8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 80015cc:	fa93 f3a3 	rbit	r3, r3
 80015d0:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
  return result;
 80015d4:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015d8:	fab3 f383 	clz	r3, r3
 80015dc:	b2db      	uxtb	r3, r3
 80015de:	095b      	lsrs	r3, r3, #5
 80015e0:	b2db      	uxtb	r3, r3
 80015e2:	f043 0301 	orr.w	r3, r3, #1
 80015e6:	b2db      	uxtb	r3, r3
 80015e8:	2b01      	cmp	r3, #1
 80015ea:	d102      	bne.n	80015f2 <HAL_RCC_OscConfig+0x2b2>
 80015ec:	4b19      	ldr	r3, [pc, #100]	@ (8001654 <HAL_RCC_OscConfig+0x314>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	e015      	b.n	800161e <HAL_RCC_OscConfig+0x2de>
 80015f2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80015f6:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015fa:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 80015fe:	fa93 f3a3 	rbit	r3, r3
 8001602:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 8001606:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800160a:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 800160e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8001612:	fa93 f3a3 	rbit	r3, r3
 8001616:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 800161a:	4b0e      	ldr	r3, [pc, #56]	@ (8001654 <HAL_RCC_OscConfig+0x314>)
 800161c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800161e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001622:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 8001626:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 800162a:	fa92 f2a2 	rbit	r2, r2
 800162e:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
  return result;
 8001632:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8001636:	fab2 f282 	clz	r2, r2
 800163a:	b2d2      	uxtb	r2, r2
 800163c:	f042 0220 	orr.w	r2, r2, #32
 8001640:	b2d2      	uxtb	r2, r2
 8001642:	f002 021f 	and.w	r2, r2, #31
 8001646:	2101      	movs	r1, #1
 8001648:	fa01 f202 	lsl.w	r2, r1, r2
 800164c:	4013      	ands	r3, r2
 800164e:	2b00      	cmp	r3, #0
 8001650:	d1ab      	bne.n	80015aa <HAL_RCC_OscConfig+0x26a>
 8001652:	e002      	b.n	800165a <HAL_RCC_OscConfig+0x31a>
 8001654:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001658:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800165a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800165e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f003 0302 	and.w	r3, r3, #2
 800166a:	2b00      	cmp	r3, #0
 800166c:	f000 817f 	beq.w	800196e <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001670:	4ba7      	ldr	r3, [pc, #668]	@ (8001910 <HAL_RCC_OscConfig+0x5d0>)
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	f003 030c 	and.w	r3, r3, #12
 8001678:	2b00      	cmp	r3, #0
 800167a:	d00c      	beq.n	8001696 <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800167c:	4ba4      	ldr	r3, [pc, #656]	@ (8001910 <HAL_RCC_OscConfig+0x5d0>)
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	f003 030c 	and.w	r3, r3, #12
 8001684:	2b08      	cmp	r3, #8
 8001686:	d173      	bne.n	8001770 <HAL_RCC_OscConfig+0x430>
 8001688:	4ba1      	ldr	r3, [pc, #644]	@ (8001910 <HAL_RCC_OscConfig+0x5d0>)
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8001690:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001694:	d16c      	bne.n	8001770 <HAL_RCC_OscConfig+0x430>
 8001696:	2302      	movs	r3, #2
 8001698:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800169c:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 80016a0:	fa93 f3a3 	rbit	r3, r3
 80016a4:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
  return result;
 80016a8:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016ac:	fab3 f383 	clz	r3, r3
 80016b0:	b2db      	uxtb	r3, r3
 80016b2:	095b      	lsrs	r3, r3, #5
 80016b4:	b2db      	uxtb	r3, r3
 80016b6:	f043 0301 	orr.w	r3, r3, #1
 80016ba:	b2db      	uxtb	r3, r3
 80016bc:	2b01      	cmp	r3, #1
 80016be:	d102      	bne.n	80016c6 <HAL_RCC_OscConfig+0x386>
 80016c0:	4b93      	ldr	r3, [pc, #588]	@ (8001910 <HAL_RCC_OscConfig+0x5d0>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	e013      	b.n	80016ee <HAL_RCC_OscConfig+0x3ae>
 80016c6:	2302      	movs	r3, #2
 80016c8:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016cc:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 80016d0:	fa93 f3a3 	rbit	r3, r3
 80016d4:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 80016d8:	2302      	movs	r3, #2
 80016da:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 80016de:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 80016e2:	fa93 f3a3 	rbit	r3, r3
 80016e6:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 80016ea:	4b89      	ldr	r3, [pc, #548]	@ (8001910 <HAL_RCC_OscConfig+0x5d0>)
 80016ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016ee:	2202      	movs	r2, #2
 80016f0:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 80016f4:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 80016f8:	fa92 f2a2 	rbit	r2, r2
 80016fc:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
  return result;
 8001700:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8001704:	fab2 f282 	clz	r2, r2
 8001708:	b2d2      	uxtb	r2, r2
 800170a:	f042 0220 	orr.w	r2, r2, #32
 800170e:	b2d2      	uxtb	r2, r2
 8001710:	f002 021f 	and.w	r2, r2, #31
 8001714:	2101      	movs	r1, #1
 8001716:	fa01 f202 	lsl.w	r2, r1, r2
 800171a:	4013      	ands	r3, r2
 800171c:	2b00      	cmp	r3, #0
 800171e:	d00a      	beq.n	8001736 <HAL_RCC_OscConfig+0x3f6>
 8001720:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001724:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	68db      	ldr	r3, [r3, #12]
 800172c:	2b01      	cmp	r3, #1
 800172e:	d002      	beq.n	8001736 <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8001730:	2301      	movs	r3, #1
 8001732:	f000 be52 	b.w	80023da <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001736:	4b76      	ldr	r3, [pc, #472]	@ (8001910 <HAL_RCC_OscConfig+0x5d0>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800173e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001742:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	691b      	ldr	r3, [r3, #16]
 800174a:	21f8      	movs	r1, #248	@ 0xf8
 800174c:	f8c7 1174 	str.w	r1, [r7, #372]	@ 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001750:	f8d7 1174 	ldr.w	r1, [r7, #372]	@ 0x174
 8001754:	fa91 f1a1 	rbit	r1, r1
 8001758:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
  return result;
 800175c:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8001760:	fab1 f181 	clz	r1, r1
 8001764:	b2c9      	uxtb	r1, r1
 8001766:	408b      	lsls	r3, r1
 8001768:	4969      	ldr	r1, [pc, #420]	@ (8001910 <HAL_RCC_OscConfig+0x5d0>)
 800176a:	4313      	orrs	r3, r2
 800176c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800176e:	e0fe      	b.n	800196e <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001770:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001774:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	68db      	ldr	r3, [r3, #12]
 800177c:	2b00      	cmp	r3, #0
 800177e:	f000 8088 	beq.w	8001892 <HAL_RCC_OscConfig+0x552>
 8001782:	2301      	movs	r3, #1
 8001784:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001788:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 800178c:	fa93 f3a3 	rbit	r3, r3
 8001790:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
  return result;
 8001794:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001798:	fab3 f383 	clz	r3, r3
 800179c:	b2db      	uxtb	r3, r3
 800179e:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80017a2:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80017a6:	009b      	lsls	r3, r3, #2
 80017a8:	461a      	mov	r2, r3
 80017aa:	2301      	movs	r3, #1
 80017ac:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017ae:	f7ff f8cd 	bl	800094c <HAL_GetTick>
 80017b2:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017b6:	e00a      	b.n	80017ce <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017b8:	f7ff f8c8 	bl	800094c <HAL_GetTick>
 80017bc:	4602      	mov	r2, r0
 80017be:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80017c2:	1ad3      	subs	r3, r2, r3
 80017c4:	2b02      	cmp	r3, #2
 80017c6:	d902      	bls.n	80017ce <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80017c8:	2303      	movs	r3, #3
 80017ca:	f000 be06 	b.w	80023da <HAL_RCC_OscConfig+0x109a>
 80017ce:	2302      	movs	r3, #2
 80017d0:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017d4:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 80017d8:	fa93 f3a3 	rbit	r3, r3
 80017dc:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
  return result;
 80017e0:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017e4:	fab3 f383 	clz	r3, r3
 80017e8:	b2db      	uxtb	r3, r3
 80017ea:	095b      	lsrs	r3, r3, #5
 80017ec:	b2db      	uxtb	r3, r3
 80017ee:	f043 0301 	orr.w	r3, r3, #1
 80017f2:	b2db      	uxtb	r3, r3
 80017f4:	2b01      	cmp	r3, #1
 80017f6:	d102      	bne.n	80017fe <HAL_RCC_OscConfig+0x4be>
 80017f8:	4b45      	ldr	r3, [pc, #276]	@ (8001910 <HAL_RCC_OscConfig+0x5d0>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	e013      	b.n	8001826 <HAL_RCC_OscConfig+0x4e6>
 80017fe:	2302      	movs	r3, #2
 8001800:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001804:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8001808:	fa93 f3a3 	rbit	r3, r3
 800180c:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 8001810:	2302      	movs	r3, #2
 8001812:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8001816:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 800181a:	fa93 f3a3 	rbit	r3, r3
 800181e:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8001822:	4b3b      	ldr	r3, [pc, #236]	@ (8001910 <HAL_RCC_OscConfig+0x5d0>)
 8001824:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001826:	2202      	movs	r2, #2
 8001828:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 800182c:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8001830:	fa92 f2a2 	rbit	r2, r2
 8001834:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
  return result;
 8001838:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 800183c:	fab2 f282 	clz	r2, r2
 8001840:	b2d2      	uxtb	r2, r2
 8001842:	f042 0220 	orr.w	r2, r2, #32
 8001846:	b2d2      	uxtb	r2, r2
 8001848:	f002 021f 	and.w	r2, r2, #31
 800184c:	2101      	movs	r1, #1
 800184e:	fa01 f202 	lsl.w	r2, r1, r2
 8001852:	4013      	ands	r3, r2
 8001854:	2b00      	cmp	r3, #0
 8001856:	d0af      	beq.n	80017b8 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001858:	4b2d      	ldr	r3, [pc, #180]	@ (8001910 <HAL_RCC_OscConfig+0x5d0>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001860:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001864:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	691b      	ldr	r3, [r3, #16]
 800186c:	21f8      	movs	r1, #248	@ 0xf8
 800186e:	f8c7 1144 	str.w	r1, [r7, #324]	@ 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001872:	f8d7 1144 	ldr.w	r1, [r7, #324]	@ 0x144
 8001876:	fa91 f1a1 	rbit	r1, r1
 800187a:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
  return result;
 800187e:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8001882:	fab1 f181 	clz	r1, r1
 8001886:	b2c9      	uxtb	r1, r1
 8001888:	408b      	lsls	r3, r1
 800188a:	4921      	ldr	r1, [pc, #132]	@ (8001910 <HAL_RCC_OscConfig+0x5d0>)
 800188c:	4313      	orrs	r3, r2
 800188e:	600b      	str	r3, [r1, #0]
 8001890:	e06d      	b.n	800196e <HAL_RCC_OscConfig+0x62e>
 8001892:	2301      	movs	r3, #1
 8001894:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001898:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 800189c:	fa93 f3a3 	rbit	r3, r3
 80018a0:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  return result;
 80018a4:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018a8:	fab3 f383 	clz	r3, r3
 80018ac:	b2db      	uxtb	r3, r3
 80018ae:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80018b2:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80018b6:	009b      	lsls	r3, r3, #2
 80018b8:	461a      	mov	r2, r3
 80018ba:	2300      	movs	r3, #0
 80018bc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018be:	f7ff f845 	bl	800094c <HAL_GetTick>
 80018c2:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018c6:	e00a      	b.n	80018de <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018c8:	f7ff f840 	bl	800094c <HAL_GetTick>
 80018cc:	4602      	mov	r2, r0
 80018ce:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80018d2:	1ad3      	subs	r3, r2, r3
 80018d4:	2b02      	cmp	r3, #2
 80018d6:	d902      	bls.n	80018de <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 80018d8:	2303      	movs	r3, #3
 80018da:	f000 bd7e 	b.w	80023da <HAL_RCC_OscConfig+0x109a>
 80018de:	2302      	movs	r3, #2
 80018e0:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018e4:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80018e8:	fa93 f3a3 	rbit	r3, r3
 80018ec:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  return result;
 80018f0:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018f4:	fab3 f383 	clz	r3, r3
 80018f8:	b2db      	uxtb	r3, r3
 80018fa:	095b      	lsrs	r3, r3, #5
 80018fc:	b2db      	uxtb	r3, r3
 80018fe:	f043 0301 	orr.w	r3, r3, #1
 8001902:	b2db      	uxtb	r3, r3
 8001904:	2b01      	cmp	r3, #1
 8001906:	d105      	bne.n	8001914 <HAL_RCC_OscConfig+0x5d4>
 8001908:	4b01      	ldr	r3, [pc, #4]	@ (8001910 <HAL_RCC_OscConfig+0x5d0>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	e016      	b.n	800193c <HAL_RCC_OscConfig+0x5fc>
 800190e:	bf00      	nop
 8001910:	40021000 	.word	0x40021000
 8001914:	2302      	movs	r3, #2
 8001916:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800191a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800191e:	fa93 f3a3 	rbit	r3, r3
 8001922:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8001926:	2302      	movs	r3, #2
 8001928:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 800192c:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8001930:	fa93 f3a3 	rbit	r3, r3
 8001934:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8001938:	4bbf      	ldr	r3, [pc, #764]	@ (8001c38 <HAL_RCC_OscConfig+0x8f8>)
 800193a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800193c:	2202      	movs	r2, #2
 800193e:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 8001942:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8001946:	fa92 f2a2 	rbit	r2, r2
 800194a:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
  return result;
 800194e:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8001952:	fab2 f282 	clz	r2, r2
 8001956:	b2d2      	uxtb	r2, r2
 8001958:	f042 0220 	orr.w	r2, r2, #32
 800195c:	b2d2      	uxtb	r2, r2
 800195e:	f002 021f 	and.w	r2, r2, #31
 8001962:	2101      	movs	r1, #1
 8001964:	fa01 f202 	lsl.w	r2, r1, r2
 8001968:	4013      	ands	r3, r2
 800196a:	2b00      	cmp	r3, #0
 800196c:	d1ac      	bne.n	80018c8 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800196e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001972:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f003 0308 	and.w	r3, r3, #8
 800197e:	2b00      	cmp	r3, #0
 8001980:	f000 8113 	beq.w	8001baa <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001984:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001988:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	695b      	ldr	r3, [r3, #20]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d07c      	beq.n	8001a8e <HAL_RCC_OscConfig+0x74e>
 8001994:	2301      	movs	r3, #1
 8001996:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800199a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800199e:	fa93 f3a3 	rbit	r3, r3
 80019a2:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  return result;
 80019a6:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019aa:	fab3 f383 	clz	r3, r3
 80019ae:	b2db      	uxtb	r3, r3
 80019b0:	461a      	mov	r2, r3
 80019b2:	4ba2      	ldr	r3, [pc, #648]	@ (8001c3c <HAL_RCC_OscConfig+0x8fc>)
 80019b4:	4413      	add	r3, r2
 80019b6:	009b      	lsls	r3, r3, #2
 80019b8:	461a      	mov	r2, r3
 80019ba:	2301      	movs	r3, #1
 80019bc:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019be:	f7fe ffc5 	bl	800094c <HAL_GetTick>
 80019c2:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019c6:	e00a      	b.n	80019de <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80019c8:	f7fe ffc0 	bl	800094c <HAL_GetTick>
 80019cc:	4602      	mov	r2, r0
 80019ce:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80019d2:	1ad3      	subs	r3, r2, r3
 80019d4:	2b02      	cmp	r3, #2
 80019d6:	d902      	bls.n	80019de <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 80019d8:	2303      	movs	r3, #3
 80019da:	f000 bcfe 	b.w	80023da <HAL_RCC_OscConfig+0x109a>
 80019de:	2302      	movs	r3, #2
 80019e0:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80019e8:	fa93 f2a3 	rbit	r2, r3
 80019ec:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80019f0:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80019f4:	601a      	str	r2, [r3, #0]
 80019f6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80019fa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80019fe:	2202      	movs	r2, #2
 8001a00:	601a      	str	r2, [r3, #0]
 8001a02:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a06:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	fa93 f2a3 	rbit	r2, r3
 8001a10:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a14:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001a18:	601a      	str	r2, [r3, #0]
 8001a1a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a1e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001a22:	2202      	movs	r2, #2
 8001a24:	601a      	str	r2, [r3, #0]
 8001a26:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a2a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	fa93 f2a3 	rbit	r2, r3
 8001a34:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a38:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001a3c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a3e:	4b7e      	ldr	r3, [pc, #504]	@ (8001c38 <HAL_RCC_OscConfig+0x8f8>)
 8001a40:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001a42:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a46:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001a4a:	2102      	movs	r1, #2
 8001a4c:	6019      	str	r1, [r3, #0]
 8001a4e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a52:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	fa93 f1a3 	rbit	r1, r3
 8001a5c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a60:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001a64:	6019      	str	r1, [r3, #0]
  return result;
 8001a66:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a6a:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	fab3 f383 	clz	r3, r3
 8001a74:	b2db      	uxtb	r3, r3
 8001a76:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001a7a:	b2db      	uxtb	r3, r3
 8001a7c:	f003 031f 	and.w	r3, r3, #31
 8001a80:	2101      	movs	r1, #1
 8001a82:	fa01 f303 	lsl.w	r3, r1, r3
 8001a86:	4013      	ands	r3, r2
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d09d      	beq.n	80019c8 <HAL_RCC_OscConfig+0x688>
 8001a8c:	e08d      	b.n	8001baa <HAL_RCC_OscConfig+0x86a>
 8001a8e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a92:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001a96:	2201      	movs	r2, #1
 8001a98:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a9a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a9e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	fa93 f2a3 	rbit	r2, r3
 8001aa8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001aac:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001ab0:	601a      	str	r2, [r3, #0]
  return result;
 8001ab2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ab6:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001aba:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001abc:	fab3 f383 	clz	r3, r3
 8001ac0:	b2db      	uxtb	r3, r3
 8001ac2:	461a      	mov	r2, r3
 8001ac4:	4b5d      	ldr	r3, [pc, #372]	@ (8001c3c <HAL_RCC_OscConfig+0x8fc>)
 8001ac6:	4413      	add	r3, r2
 8001ac8:	009b      	lsls	r3, r3, #2
 8001aca:	461a      	mov	r2, r3
 8001acc:	2300      	movs	r3, #0
 8001ace:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ad0:	f7fe ff3c 	bl	800094c <HAL_GetTick>
 8001ad4:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ad8:	e00a      	b.n	8001af0 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ada:	f7fe ff37 	bl	800094c <HAL_GetTick>
 8001ade:	4602      	mov	r2, r0
 8001ae0:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001ae4:	1ad3      	subs	r3, r2, r3
 8001ae6:	2b02      	cmp	r3, #2
 8001ae8:	d902      	bls.n	8001af0 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8001aea:	2303      	movs	r3, #3
 8001aec:	f000 bc75 	b.w	80023da <HAL_RCC_OscConfig+0x109a>
 8001af0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001af4:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001af8:	2202      	movs	r2, #2
 8001afa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001afc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b00:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	fa93 f2a3 	rbit	r2, r3
 8001b0a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b0e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001b12:	601a      	str	r2, [r3, #0]
 8001b14:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b18:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001b1c:	2202      	movs	r2, #2
 8001b1e:	601a      	str	r2, [r3, #0]
 8001b20:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b24:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	fa93 f2a3 	rbit	r2, r3
 8001b2e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b32:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001b36:	601a      	str	r2, [r3, #0]
 8001b38:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b3c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001b40:	2202      	movs	r2, #2
 8001b42:	601a      	str	r2, [r3, #0]
 8001b44:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b48:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	fa93 f2a3 	rbit	r2, r3
 8001b52:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b56:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001b5a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b5c:	4b36      	ldr	r3, [pc, #216]	@ (8001c38 <HAL_RCC_OscConfig+0x8f8>)
 8001b5e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001b60:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b64:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001b68:	2102      	movs	r1, #2
 8001b6a:	6019      	str	r1, [r3, #0]
 8001b6c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b70:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	fa93 f1a3 	rbit	r1, r3
 8001b7a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b7e:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001b82:	6019      	str	r1, [r3, #0]
  return result;
 8001b84:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b88:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	fab3 f383 	clz	r3, r3
 8001b92:	b2db      	uxtb	r3, r3
 8001b94:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001b98:	b2db      	uxtb	r3, r3
 8001b9a:	f003 031f 	and.w	r3, r3, #31
 8001b9e:	2101      	movs	r1, #1
 8001ba0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ba4:	4013      	ands	r3, r2
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d197      	bne.n	8001ada <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001baa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001bae:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f003 0304 	and.w	r3, r3, #4
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	f000 81a5 	beq.w	8001f0a <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001bc6:	4b1c      	ldr	r3, [pc, #112]	@ (8001c38 <HAL_RCC_OscConfig+0x8f8>)
 8001bc8:	69db      	ldr	r3, [r3, #28]
 8001bca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d116      	bne.n	8001c00 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bd2:	4b19      	ldr	r3, [pc, #100]	@ (8001c38 <HAL_RCC_OscConfig+0x8f8>)
 8001bd4:	69db      	ldr	r3, [r3, #28]
 8001bd6:	4a18      	ldr	r2, [pc, #96]	@ (8001c38 <HAL_RCC_OscConfig+0x8f8>)
 8001bd8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001bdc:	61d3      	str	r3, [r2, #28]
 8001bde:	4b16      	ldr	r3, [pc, #88]	@ (8001c38 <HAL_RCC_OscConfig+0x8f8>)
 8001be0:	69db      	ldr	r3, [r3, #28]
 8001be2:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8001be6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001bea:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001bee:	601a      	str	r2, [r3, #0]
 8001bf0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001bf4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001bf8:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c00:	4b0f      	ldr	r3, [pc, #60]	@ (8001c40 <HAL_RCC_OscConfig+0x900>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d121      	bne.n	8001c50 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c0c:	4b0c      	ldr	r3, [pc, #48]	@ (8001c40 <HAL_RCC_OscConfig+0x900>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a0b      	ldr	r2, [pc, #44]	@ (8001c40 <HAL_RCC_OscConfig+0x900>)
 8001c12:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c16:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c18:	f7fe fe98 	bl	800094c <HAL_GetTick>
 8001c1c:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c20:	e010      	b.n	8001c44 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c22:	f7fe fe93 	bl	800094c <HAL_GetTick>
 8001c26:	4602      	mov	r2, r0
 8001c28:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001c2c:	1ad3      	subs	r3, r2, r3
 8001c2e:	2b64      	cmp	r3, #100	@ 0x64
 8001c30:	d908      	bls.n	8001c44 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 8001c32:	2303      	movs	r3, #3
 8001c34:	e3d1      	b.n	80023da <HAL_RCC_OscConfig+0x109a>
 8001c36:	bf00      	nop
 8001c38:	40021000 	.word	0x40021000
 8001c3c:	10908120 	.word	0x10908120
 8001c40:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c44:	4b8d      	ldr	r3, [pc, #564]	@ (8001e7c <HAL_RCC_OscConfig+0xb3c>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d0e8      	beq.n	8001c22 <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c50:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c54:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	689b      	ldr	r3, [r3, #8]
 8001c5c:	2b01      	cmp	r3, #1
 8001c5e:	d106      	bne.n	8001c6e <HAL_RCC_OscConfig+0x92e>
 8001c60:	4b87      	ldr	r3, [pc, #540]	@ (8001e80 <HAL_RCC_OscConfig+0xb40>)
 8001c62:	6a1b      	ldr	r3, [r3, #32]
 8001c64:	4a86      	ldr	r2, [pc, #536]	@ (8001e80 <HAL_RCC_OscConfig+0xb40>)
 8001c66:	f043 0301 	orr.w	r3, r3, #1
 8001c6a:	6213      	str	r3, [r2, #32]
 8001c6c:	e035      	b.n	8001cda <HAL_RCC_OscConfig+0x99a>
 8001c6e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c72:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	689b      	ldr	r3, [r3, #8]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d10c      	bne.n	8001c98 <HAL_RCC_OscConfig+0x958>
 8001c7e:	4b80      	ldr	r3, [pc, #512]	@ (8001e80 <HAL_RCC_OscConfig+0xb40>)
 8001c80:	6a1b      	ldr	r3, [r3, #32]
 8001c82:	4a7f      	ldr	r2, [pc, #508]	@ (8001e80 <HAL_RCC_OscConfig+0xb40>)
 8001c84:	f023 0301 	bic.w	r3, r3, #1
 8001c88:	6213      	str	r3, [r2, #32]
 8001c8a:	4b7d      	ldr	r3, [pc, #500]	@ (8001e80 <HAL_RCC_OscConfig+0xb40>)
 8001c8c:	6a1b      	ldr	r3, [r3, #32]
 8001c8e:	4a7c      	ldr	r2, [pc, #496]	@ (8001e80 <HAL_RCC_OscConfig+0xb40>)
 8001c90:	f023 0304 	bic.w	r3, r3, #4
 8001c94:	6213      	str	r3, [r2, #32]
 8001c96:	e020      	b.n	8001cda <HAL_RCC_OscConfig+0x99a>
 8001c98:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c9c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	689b      	ldr	r3, [r3, #8]
 8001ca4:	2b05      	cmp	r3, #5
 8001ca6:	d10c      	bne.n	8001cc2 <HAL_RCC_OscConfig+0x982>
 8001ca8:	4b75      	ldr	r3, [pc, #468]	@ (8001e80 <HAL_RCC_OscConfig+0xb40>)
 8001caa:	6a1b      	ldr	r3, [r3, #32]
 8001cac:	4a74      	ldr	r2, [pc, #464]	@ (8001e80 <HAL_RCC_OscConfig+0xb40>)
 8001cae:	f043 0304 	orr.w	r3, r3, #4
 8001cb2:	6213      	str	r3, [r2, #32]
 8001cb4:	4b72      	ldr	r3, [pc, #456]	@ (8001e80 <HAL_RCC_OscConfig+0xb40>)
 8001cb6:	6a1b      	ldr	r3, [r3, #32]
 8001cb8:	4a71      	ldr	r2, [pc, #452]	@ (8001e80 <HAL_RCC_OscConfig+0xb40>)
 8001cba:	f043 0301 	orr.w	r3, r3, #1
 8001cbe:	6213      	str	r3, [r2, #32]
 8001cc0:	e00b      	b.n	8001cda <HAL_RCC_OscConfig+0x99a>
 8001cc2:	4b6f      	ldr	r3, [pc, #444]	@ (8001e80 <HAL_RCC_OscConfig+0xb40>)
 8001cc4:	6a1b      	ldr	r3, [r3, #32]
 8001cc6:	4a6e      	ldr	r2, [pc, #440]	@ (8001e80 <HAL_RCC_OscConfig+0xb40>)
 8001cc8:	f023 0301 	bic.w	r3, r3, #1
 8001ccc:	6213      	str	r3, [r2, #32]
 8001cce:	4b6c      	ldr	r3, [pc, #432]	@ (8001e80 <HAL_RCC_OscConfig+0xb40>)
 8001cd0:	6a1b      	ldr	r3, [r3, #32]
 8001cd2:	4a6b      	ldr	r2, [pc, #428]	@ (8001e80 <HAL_RCC_OscConfig+0xb40>)
 8001cd4:	f023 0304 	bic.w	r3, r3, #4
 8001cd8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001cda:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001cde:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	689b      	ldr	r3, [r3, #8]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	f000 8081 	beq.w	8001dee <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cec:	f7fe fe2e 	bl	800094c <HAL_GetTick>
 8001cf0:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cf4:	e00b      	b.n	8001d0e <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001cf6:	f7fe fe29 	bl	800094c <HAL_GetTick>
 8001cfa:	4602      	mov	r2, r0
 8001cfc:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001d00:	1ad3      	subs	r3, r2, r3
 8001d02:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d901      	bls.n	8001d0e <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8001d0a:	2303      	movs	r3, #3
 8001d0c:	e365      	b.n	80023da <HAL_RCC_OscConfig+0x109a>
 8001d0e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d12:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8001d16:	2202      	movs	r2, #2
 8001d18:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d1a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d1e:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	fa93 f2a3 	rbit	r2, r3
 8001d28:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d2c:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8001d30:	601a      	str	r2, [r3, #0]
 8001d32:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d36:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001d3a:	2202      	movs	r2, #2
 8001d3c:	601a      	str	r2, [r3, #0]
 8001d3e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d42:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	fa93 f2a3 	rbit	r2, r3
 8001d4c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d50:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001d54:	601a      	str	r2, [r3, #0]
  return result;
 8001d56:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d5a:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001d5e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d60:	fab3 f383 	clz	r3, r3
 8001d64:	b2db      	uxtb	r3, r3
 8001d66:	095b      	lsrs	r3, r3, #5
 8001d68:	b2db      	uxtb	r3, r3
 8001d6a:	f043 0302 	orr.w	r3, r3, #2
 8001d6e:	b2db      	uxtb	r3, r3
 8001d70:	2b02      	cmp	r3, #2
 8001d72:	d102      	bne.n	8001d7a <HAL_RCC_OscConfig+0xa3a>
 8001d74:	4b42      	ldr	r3, [pc, #264]	@ (8001e80 <HAL_RCC_OscConfig+0xb40>)
 8001d76:	6a1b      	ldr	r3, [r3, #32]
 8001d78:	e013      	b.n	8001da2 <HAL_RCC_OscConfig+0xa62>
 8001d7a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d7e:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001d82:	2202      	movs	r2, #2
 8001d84:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d86:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d8a:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	fa93 f2a3 	rbit	r2, r3
 8001d94:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d98:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8001d9c:	601a      	str	r2, [r3, #0]
 8001d9e:	4b38      	ldr	r3, [pc, #224]	@ (8001e80 <HAL_RCC_OscConfig+0xb40>)
 8001da0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001da2:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001da6:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8001daa:	2102      	movs	r1, #2
 8001dac:	6011      	str	r1, [r2, #0]
 8001dae:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001db2:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8001db6:	6812      	ldr	r2, [r2, #0]
 8001db8:	fa92 f1a2 	rbit	r1, r2
 8001dbc:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001dc0:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 8001dc4:	6011      	str	r1, [r2, #0]
  return result;
 8001dc6:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001dca:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 8001dce:	6812      	ldr	r2, [r2, #0]
 8001dd0:	fab2 f282 	clz	r2, r2
 8001dd4:	b2d2      	uxtb	r2, r2
 8001dd6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001dda:	b2d2      	uxtb	r2, r2
 8001ddc:	f002 021f 	and.w	r2, r2, #31
 8001de0:	2101      	movs	r1, #1
 8001de2:	fa01 f202 	lsl.w	r2, r1, r2
 8001de6:	4013      	ands	r3, r2
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d084      	beq.n	8001cf6 <HAL_RCC_OscConfig+0x9b6>
 8001dec:	e083      	b.n	8001ef6 <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dee:	f7fe fdad 	bl	800094c <HAL_GetTick>
 8001df2:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001df6:	e00b      	b.n	8001e10 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001df8:	f7fe fda8 	bl	800094c <HAL_GetTick>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001e02:	1ad3      	subs	r3, r2, r3
 8001e04:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	d901      	bls.n	8001e10 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8001e0c:	2303      	movs	r3, #3
 8001e0e:	e2e4      	b.n	80023da <HAL_RCC_OscConfig+0x109a>
 8001e10:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e14:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8001e18:	2202      	movs	r2, #2
 8001e1a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e1c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e20:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	fa93 f2a3 	rbit	r2, r3
 8001e2a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e2e:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8001e32:	601a      	str	r2, [r3, #0]
 8001e34:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e38:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8001e3c:	2202      	movs	r2, #2
 8001e3e:	601a      	str	r2, [r3, #0]
 8001e40:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e44:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	fa93 f2a3 	rbit	r2, r3
 8001e4e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e52:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001e56:	601a      	str	r2, [r3, #0]
  return result;
 8001e58:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e5c:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001e60:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e62:	fab3 f383 	clz	r3, r3
 8001e66:	b2db      	uxtb	r3, r3
 8001e68:	095b      	lsrs	r3, r3, #5
 8001e6a:	b2db      	uxtb	r3, r3
 8001e6c:	f043 0302 	orr.w	r3, r3, #2
 8001e70:	b2db      	uxtb	r3, r3
 8001e72:	2b02      	cmp	r3, #2
 8001e74:	d106      	bne.n	8001e84 <HAL_RCC_OscConfig+0xb44>
 8001e76:	4b02      	ldr	r3, [pc, #8]	@ (8001e80 <HAL_RCC_OscConfig+0xb40>)
 8001e78:	6a1b      	ldr	r3, [r3, #32]
 8001e7a:	e017      	b.n	8001eac <HAL_RCC_OscConfig+0xb6c>
 8001e7c:	40007000 	.word	0x40007000
 8001e80:	40021000 	.word	0x40021000
 8001e84:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e88:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8001e8c:	2202      	movs	r2, #2
 8001e8e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e90:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e94:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	fa93 f2a3 	rbit	r2, r3
 8001e9e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ea2:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8001ea6:	601a      	str	r2, [r3, #0]
 8001ea8:	4bb3      	ldr	r3, [pc, #716]	@ (8002178 <HAL_RCC_OscConfig+0xe38>)
 8001eaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eac:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001eb0:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8001eb4:	2102      	movs	r1, #2
 8001eb6:	6011      	str	r1, [r2, #0]
 8001eb8:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001ebc:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8001ec0:	6812      	ldr	r2, [r2, #0]
 8001ec2:	fa92 f1a2 	rbit	r1, r2
 8001ec6:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001eca:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8001ece:	6011      	str	r1, [r2, #0]
  return result;
 8001ed0:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001ed4:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8001ed8:	6812      	ldr	r2, [r2, #0]
 8001eda:	fab2 f282 	clz	r2, r2
 8001ede:	b2d2      	uxtb	r2, r2
 8001ee0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001ee4:	b2d2      	uxtb	r2, r2
 8001ee6:	f002 021f 	and.w	r2, r2, #31
 8001eea:	2101      	movs	r1, #1
 8001eec:	fa01 f202 	lsl.w	r2, r1, r2
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d180      	bne.n	8001df8 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001ef6:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 8001efa:	2b01      	cmp	r3, #1
 8001efc:	d105      	bne.n	8001f0a <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001efe:	4b9e      	ldr	r3, [pc, #632]	@ (8002178 <HAL_RCC_OscConfig+0xe38>)
 8001f00:	69db      	ldr	r3, [r3, #28]
 8001f02:	4a9d      	ldr	r2, [pc, #628]	@ (8002178 <HAL_RCC_OscConfig+0xe38>)
 8001f04:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001f08:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f0a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f0e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	699b      	ldr	r3, [r3, #24]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	f000 825e 	beq.w	80023d8 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f1c:	4b96      	ldr	r3, [pc, #600]	@ (8002178 <HAL_RCC_OscConfig+0xe38>)
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	f003 030c 	and.w	r3, r3, #12
 8001f24:	2b08      	cmp	r3, #8
 8001f26:	f000 821f 	beq.w	8002368 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f2a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f2e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	699b      	ldr	r3, [r3, #24]
 8001f36:	2b02      	cmp	r3, #2
 8001f38:	f040 8170 	bne.w	800221c <HAL_RCC_OscConfig+0xedc>
 8001f3c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f40:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8001f44:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001f48:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f4a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f4e:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	fa93 f2a3 	rbit	r2, r3
 8001f58:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f5c:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8001f60:	601a      	str	r2, [r3, #0]
  return result;
 8001f62:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f66:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8001f6a:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f6c:	fab3 f383 	clz	r3, r3
 8001f70:	b2db      	uxtb	r3, r3
 8001f72:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001f76:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001f7a:	009b      	lsls	r3, r3, #2
 8001f7c:	461a      	mov	r2, r3
 8001f7e:	2300      	movs	r3, #0
 8001f80:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f82:	f7fe fce3 	bl	800094c <HAL_GetTick>
 8001f86:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f8a:	e009      	b.n	8001fa0 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f8c:	f7fe fcde 	bl	800094c <HAL_GetTick>
 8001f90:	4602      	mov	r2, r0
 8001f92:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001f96:	1ad3      	subs	r3, r2, r3
 8001f98:	2b02      	cmp	r3, #2
 8001f9a:	d901      	bls.n	8001fa0 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8001f9c:	2303      	movs	r3, #3
 8001f9e:	e21c      	b.n	80023da <HAL_RCC_OscConfig+0x109a>
 8001fa0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001fa4:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8001fa8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001fac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fae:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001fb2:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	fa93 f2a3 	rbit	r2, r3
 8001fbc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001fc0:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8001fc4:	601a      	str	r2, [r3, #0]
  return result;
 8001fc6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001fca:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8001fce:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fd0:	fab3 f383 	clz	r3, r3
 8001fd4:	b2db      	uxtb	r3, r3
 8001fd6:	095b      	lsrs	r3, r3, #5
 8001fd8:	b2db      	uxtb	r3, r3
 8001fda:	f043 0301 	orr.w	r3, r3, #1
 8001fde:	b2db      	uxtb	r3, r3
 8001fe0:	2b01      	cmp	r3, #1
 8001fe2:	d102      	bne.n	8001fea <HAL_RCC_OscConfig+0xcaa>
 8001fe4:	4b64      	ldr	r3, [pc, #400]	@ (8002178 <HAL_RCC_OscConfig+0xe38>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	e027      	b.n	800203a <HAL_RCC_OscConfig+0xcfa>
 8001fea:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001fee:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8001ff2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001ff6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ff8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ffc:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	fa93 f2a3 	rbit	r2, r3
 8002006:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800200a:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 800200e:	601a      	str	r2, [r3, #0]
 8002010:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002014:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8002018:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800201c:	601a      	str	r2, [r3, #0]
 800201e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002022:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	fa93 f2a3 	rbit	r2, r3
 800202c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002030:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 8002034:	601a      	str	r2, [r3, #0]
 8002036:	4b50      	ldr	r3, [pc, #320]	@ (8002178 <HAL_RCC_OscConfig+0xe38>)
 8002038:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800203a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800203e:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002042:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002046:	6011      	str	r1, [r2, #0]
 8002048:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800204c:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002050:	6812      	ldr	r2, [r2, #0]
 8002052:	fa92 f1a2 	rbit	r1, r2
 8002056:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800205a:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 800205e:	6011      	str	r1, [r2, #0]
  return result;
 8002060:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002064:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8002068:	6812      	ldr	r2, [r2, #0]
 800206a:	fab2 f282 	clz	r2, r2
 800206e:	b2d2      	uxtb	r2, r2
 8002070:	f042 0220 	orr.w	r2, r2, #32
 8002074:	b2d2      	uxtb	r2, r2
 8002076:	f002 021f 	and.w	r2, r2, #31
 800207a:	2101      	movs	r1, #1
 800207c:	fa01 f202 	lsl.w	r2, r1, r2
 8002080:	4013      	ands	r3, r2
 8002082:	2b00      	cmp	r3, #0
 8002084:	d182      	bne.n	8001f8c <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002086:	4b3c      	ldr	r3, [pc, #240]	@ (8002178 <HAL_RCC_OscConfig+0xe38>)
 8002088:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800208a:	f023 020f 	bic.w	r2, r3, #15
 800208e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002092:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800209a:	4937      	ldr	r1, [pc, #220]	@ (8002178 <HAL_RCC_OscConfig+0xe38>)
 800209c:	4313      	orrs	r3, r2
 800209e:	62cb      	str	r3, [r1, #44]	@ 0x2c
 80020a0:	4b35      	ldr	r3, [pc, #212]	@ (8002178 <HAL_RCC_OscConfig+0xe38>)
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	f423 1276 	bic.w	r2, r3, #4030464	@ 0x3d8000
 80020a8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80020ac:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	6a19      	ldr	r1, [r3, #32]
 80020b4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80020b8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	69db      	ldr	r3, [r3, #28]
 80020c0:	430b      	orrs	r3, r1
 80020c2:	492d      	ldr	r1, [pc, #180]	@ (8002178 <HAL_RCC_OscConfig+0xe38>)
 80020c4:	4313      	orrs	r3, r2
 80020c6:	604b      	str	r3, [r1, #4]
 80020c8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80020cc:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80020d0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80020d4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020d6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80020da:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	fa93 f2a3 	rbit	r2, r3
 80020e4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80020e8:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80020ec:	601a      	str	r2, [r3, #0]
  return result;
 80020ee:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80020f2:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80020f6:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020f8:	fab3 f383 	clz	r3, r3
 80020fc:	b2db      	uxtb	r3, r3
 80020fe:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002102:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002106:	009b      	lsls	r3, r3, #2
 8002108:	461a      	mov	r2, r3
 800210a:	2301      	movs	r3, #1
 800210c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800210e:	f7fe fc1d 	bl	800094c <HAL_GetTick>
 8002112:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002116:	e009      	b.n	800212c <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002118:	f7fe fc18 	bl	800094c <HAL_GetTick>
 800211c:	4602      	mov	r2, r0
 800211e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002122:	1ad3      	subs	r3, r2, r3
 8002124:	2b02      	cmp	r3, #2
 8002126:	d901      	bls.n	800212c <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8002128:	2303      	movs	r3, #3
 800212a:	e156      	b.n	80023da <HAL_RCC_OscConfig+0x109a>
 800212c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002130:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002134:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002138:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800213a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800213e:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	fa93 f2a3 	rbit	r2, r3
 8002148:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800214c:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002150:	601a      	str	r2, [r3, #0]
  return result;
 8002152:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002156:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 800215a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800215c:	fab3 f383 	clz	r3, r3
 8002160:	b2db      	uxtb	r3, r3
 8002162:	095b      	lsrs	r3, r3, #5
 8002164:	b2db      	uxtb	r3, r3
 8002166:	f043 0301 	orr.w	r3, r3, #1
 800216a:	b2db      	uxtb	r3, r3
 800216c:	2b01      	cmp	r3, #1
 800216e:	d105      	bne.n	800217c <HAL_RCC_OscConfig+0xe3c>
 8002170:	4b01      	ldr	r3, [pc, #4]	@ (8002178 <HAL_RCC_OscConfig+0xe38>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	e02a      	b.n	80021cc <HAL_RCC_OscConfig+0xe8c>
 8002176:	bf00      	nop
 8002178:	40021000 	.word	0x40021000
 800217c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002180:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002184:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002188:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800218a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800218e:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	fa93 f2a3 	rbit	r2, r3
 8002198:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800219c:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80021a0:	601a      	str	r2, [r3, #0]
 80021a2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80021a6:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80021aa:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80021ae:	601a      	str	r2, [r3, #0]
 80021b0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80021b4:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	fa93 f2a3 	rbit	r2, r3
 80021be:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80021c2:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 80021c6:	601a      	str	r2, [r3, #0]
 80021c8:	4b86      	ldr	r3, [pc, #536]	@ (80023e4 <HAL_RCC_OscConfig+0x10a4>)
 80021ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021cc:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80021d0:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80021d4:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80021d8:	6011      	str	r1, [r2, #0]
 80021da:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80021de:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80021e2:	6812      	ldr	r2, [r2, #0]
 80021e4:	fa92 f1a2 	rbit	r1, r2
 80021e8:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80021ec:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 80021f0:	6011      	str	r1, [r2, #0]
  return result;
 80021f2:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80021f6:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 80021fa:	6812      	ldr	r2, [r2, #0]
 80021fc:	fab2 f282 	clz	r2, r2
 8002200:	b2d2      	uxtb	r2, r2
 8002202:	f042 0220 	orr.w	r2, r2, #32
 8002206:	b2d2      	uxtb	r2, r2
 8002208:	f002 021f 	and.w	r2, r2, #31
 800220c:	2101      	movs	r1, #1
 800220e:	fa01 f202 	lsl.w	r2, r1, r2
 8002212:	4013      	ands	r3, r2
 8002214:	2b00      	cmp	r3, #0
 8002216:	f43f af7f 	beq.w	8002118 <HAL_RCC_OscConfig+0xdd8>
 800221a:	e0dd      	b.n	80023d8 <HAL_RCC_OscConfig+0x1098>
 800221c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002220:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002224:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002228:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800222a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800222e:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	fa93 f2a3 	rbit	r2, r3
 8002238:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800223c:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002240:	601a      	str	r2, [r3, #0]
  return result;
 8002242:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002246:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 800224a:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800224c:	fab3 f383 	clz	r3, r3
 8002250:	b2db      	uxtb	r3, r3
 8002252:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002256:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800225a:	009b      	lsls	r3, r3, #2
 800225c:	461a      	mov	r2, r3
 800225e:	2300      	movs	r3, #0
 8002260:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002262:	f7fe fb73 	bl	800094c <HAL_GetTick>
 8002266:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800226a:	e009      	b.n	8002280 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800226c:	f7fe fb6e 	bl	800094c <HAL_GetTick>
 8002270:	4602      	mov	r2, r0
 8002272:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002276:	1ad3      	subs	r3, r2, r3
 8002278:	2b02      	cmp	r3, #2
 800227a:	d901      	bls.n	8002280 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 800227c:	2303      	movs	r3, #3
 800227e:	e0ac      	b.n	80023da <HAL_RCC_OscConfig+0x109a>
 8002280:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002284:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002288:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800228c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800228e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002292:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	fa93 f2a3 	rbit	r2, r3
 800229c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80022a0:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80022a4:	601a      	str	r2, [r3, #0]
  return result;
 80022a6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80022aa:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80022ae:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022b0:	fab3 f383 	clz	r3, r3
 80022b4:	b2db      	uxtb	r3, r3
 80022b6:	095b      	lsrs	r3, r3, #5
 80022b8:	b2db      	uxtb	r3, r3
 80022ba:	f043 0301 	orr.w	r3, r3, #1
 80022be:	b2db      	uxtb	r3, r3
 80022c0:	2b01      	cmp	r3, #1
 80022c2:	d102      	bne.n	80022ca <HAL_RCC_OscConfig+0xf8a>
 80022c4:	4b47      	ldr	r3, [pc, #284]	@ (80023e4 <HAL_RCC_OscConfig+0x10a4>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	e027      	b.n	800231a <HAL_RCC_OscConfig+0xfda>
 80022ca:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80022ce:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 80022d2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80022d6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022d8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80022dc:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	fa93 f2a3 	rbit	r2, r3
 80022e6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80022ea:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80022ee:	601a      	str	r2, [r3, #0]
 80022f0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80022f4:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80022f8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80022fc:	601a      	str	r2, [r3, #0]
 80022fe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002302:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	fa93 f2a3 	rbit	r2, r3
 800230c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002310:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 8002314:	601a      	str	r2, [r3, #0]
 8002316:	4b33      	ldr	r3, [pc, #204]	@ (80023e4 <HAL_RCC_OscConfig+0x10a4>)
 8002318:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800231a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800231e:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002322:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002326:	6011      	str	r1, [r2, #0]
 8002328:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800232c:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002330:	6812      	ldr	r2, [r2, #0]
 8002332:	fa92 f1a2 	rbit	r1, r2
 8002336:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800233a:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 800233e:	6011      	str	r1, [r2, #0]
  return result;
 8002340:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002344:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8002348:	6812      	ldr	r2, [r2, #0]
 800234a:	fab2 f282 	clz	r2, r2
 800234e:	b2d2      	uxtb	r2, r2
 8002350:	f042 0220 	orr.w	r2, r2, #32
 8002354:	b2d2      	uxtb	r2, r2
 8002356:	f002 021f 	and.w	r2, r2, #31
 800235a:	2101      	movs	r1, #1
 800235c:	fa01 f202 	lsl.w	r2, r1, r2
 8002360:	4013      	ands	r3, r2
 8002362:	2b00      	cmp	r3, #0
 8002364:	d182      	bne.n	800226c <HAL_RCC_OscConfig+0xf2c>
 8002366:	e037      	b.n	80023d8 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002368:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800236c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	699b      	ldr	r3, [r3, #24]
 8002374:	2b01      	cmp	r3, #1
 8002376:	d101      	bne.n	800237c <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8002378:	2301      	movs	r3, #1
 800237a:	e02e      	b.n	80023da <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800237c:	4b19      	ldr	r3, [pc, #100]	@ (80023e4 <HAL_RCC_OscConfig+0x10a4>)
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8002384:	4b17      	ldr	r3, [pc, #92]	@ (80023e4 <HAL_RCC_OscConfig+0x10a4>)
 8002386:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002388:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800238c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8002390:	f403 32c0 	and.w	r2, r3, #98304	@ 0x18000
 8002394:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002398:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	69db      	ldr	r3, [r3, #28]
 80023a0:	429a      	cmp	r2, r3
 80023a2:	d117      	bne.n	80023d4 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80023a4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80023a8:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80023ac:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80023b0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80023b8:	429a      	cmp	r2, r3
 80023ba:	d10b      	bne.n	80023d4 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 80023bc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80023c0:	f003 020f 	and.w	r2, r3, #15
 80023c4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80023c8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80023d0:	429a      	cmp	r2, r3
 80023d2:	d001      	beq.n	80023d8 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 80023d4:	2301      	movs	r3, #1
 80023d6:	e000      	b.n	80023da <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 80023d8:	2300      	movs	r3, #0
}
 80023da:	4618      	mov	r0, r3
 80023dc:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd80      	pop	{r7, pc}
 80023e4:	40021000 	.word	0x40021000

080023e8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b09e      	sub	sp, #120	@ 0x78
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
 80023f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80023f2:	2300      	movs	r3, #0
 80023f4:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d101      	bne.n	8002400 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80023fc:	2301      	movs	r3, #1
 80023fe:	e162      	b.n	80026c6 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002400:	4b90      	ldr	r3, [pc, #576]	@ (8002644 <HAL_RCC_ClockConfig+0x25c>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f003 0307 	and.w	r3, r3, #7
 8002408:	683a      	ldr	r2, [r7, #0]
 800240a:	429a      	cmp	r2, r3
 800240c:	d910      	bls.n	8002430 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800240e:	4b8d      	ldr	r3, [pc, #564]	@ (8002644 <HAL_RCC_ClockConfig+0x25c>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f023 0207 	bic.w	r2, r3, #7
 8002416:	498b      	ldr	r1, [pc, #556]	@ (8002644 <HAL_RCC_ClockConfig+0x25c>)
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	4313      	orrs	r3, r2
 800241c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800241e:	4b89      	ldr	r3, [pc, #548]	@ (8002644 <HAL_RCC_ClockConfig+0x25c>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f003 0307 	and.w	r3, r3, #7
 8002426:	683a      	ldr	r2, [r7, #0]
 8002428:	429a      	cmp	r2, r3
 800242a:	d001      	beq.n	8002430 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800242c:	2301      	movs	r3, #1
 800242e:	e14a      	b.n	80026c6 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f003 0302 	and.w	r3, r3, #2
 8002438:	2b00      	cmp	r3, #0
 800243a:	d008      	beq.n	800244e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800243c:	4b82      	ldr	r3, [pc, #520]	@ (8002648 <HAL_RCC_ClockConfig+0x260>)
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	689b      	ldr	r3, [r3, #8]
 8002448:	497f      	ldr	r1, [pc, #508]	@ (8002648 <HAL_RCC_ClockConfig+0x260>)
 800244a:	4313      	orrs	r3, r2
 800244c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f003 0301 	and.w	r3, r3, #1
 8002456:	2b00      	cmp	r3, #0
 8002458:	f000 80dc 	beq.w	8002614 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	2b01      	cmp	r3, #1
 8002462:	d13c      	bne.n	80024de <HAL_RCC_ClockConfig+0xf6>
 8002464:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002468:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800246a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800246c:	fa93 f3a3 	rbit	r3, r3
 8002470:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002472:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002474:	fab3 f383 	clz	r3, r3
 8002478:	b2db      	uxtb	r3, r3
 800247a:	095b      	lsrs	r3, r3, #5
 800247c:	b2db      	uxtb	r3, r3
 800247e:	f043 0301 	orr.w	r3, r3, #1
 8002482:	b2db      	uxtb	r3, r3
 8002484:	2b01      	cmp	r3, #1
 8002486:	d102      	bne.n	800248e <HAL_RCC_ClockConfig+0xa6>
 8002488:	4b6f      	ldr	r3, [pc, #444]	@ (8002648 <HAL_RCC_ClockConfig+0x260>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	e00f      	b.n	80024ae <HAL_RCC_ClockConfig+0xc6>
 800248e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002492:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002494:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002496:	fa93 f3a3 	rbit	r3, r3
 800249a:	667b      	str	r3, [r7, #100]	@ 0x64
 800249c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80024a0:	663b      	str	r3, [r7, #96]	@ 0x60
 80024a2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80024a4:	fa93 f3a3 	rbit	r3, r3
 80024a8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80024aa:	4b67      	ldr	r3, [pc, #412]	@ (8002648 <HAL_RCC_ClockConfig+0x260>)
 80024ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024ae:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80024b2:	65ba      	str	r2, [r7, #88]	@ 0x58
 80024b4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80024b6:	fa92 f2a2 	rbit	r2, r2
 80024ba:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 80024bc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80024be:	fab2 f282 	clz	r2, r2
 80024c2:	b2d2      	uxtb	r2, r2
 80024c4:	f042 0220 	orr.w	r2, r2, #32
 80024c8:	b2d2      	uxtb	r2, r2
 80024ca:	f002 021f 	and.w	r2, r2, #31
 80024ce:	2101      	movs	r1, #1
 80024d0:	fa01 f202 	lsl.w	r2, r1, r2
 80024d4:	4013      	ands	r3, r2
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d17b      	bne.n	80025d2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80024da:	2301      	movs	r3, #1
 80024dc:	e0f3      	b.n	80026c6 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	2b02      	cmp	r3, #2
 80024e4:	d13c      	bne.n	8002560 <HAL_RCC_ClockConfig+0x178>
 80024e6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80024ea:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80024ee:	fa93 f3a3 	rbit	r3, r3
 80024f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80024f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024f6:	fab3 f383 	clz	r3, r3
 80024fa:	b2db      	uxtb	r3, r3
 80024fc:	095b      	lsrs	r3, r3, #5
 80024fe:	b2db      	uxtb	r3, r3
 8002500:	f043 0301 	orr.w	r3, r3, #1
 8002504:	b2db      	uxtb	r3, r3
 8002506:	2b01      	cmp	r3, #1
 8002508:	d102      	bne.n	8002510 <HAL_RCC_ClockConfig+0x128>
 800250a:	4b4f      	ldr	r3, [pc, #316]	@ (8002648 <HAL_RCC_ClockConfig+0x260>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	e00f      	b.n	8002530 <HAL_RCC_ClockConfig+0x148>
 8002510:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002514:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002516:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002518:	fa93 f3a3 	rbit	r3, r3
 800251c:	647b      	str	r3, [r7, #68]	@ 0x44
 800251e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002522:	643b      	str	r3, [r7, #64]	@ 0x40
 8002524:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002526:	fa93 f3a3 	rbit	r3, r3
 800252a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800252c:	4b46      	ldr	r3, [pc, #280]	@ (8002648 <HAL_RCC_ClockConfig+0x260>)
 800252e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002530:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002534:	63ba      	str	r2, [r7, #56]	@ 0x38
 8002536:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002538:	fa92 f2a2 	rbit	r2, r2
 800253c:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 800253e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002540:	fab2 f282 	clz	r2, r2
 8002544:	b2d2      	uxtb	r2, r2
 8002546:	f042 0220 	orr.w	r2, r2, #32
 800254a:	b2d2      	uxtb	r2, r2
 800254c:	f002 021f 	and.w	r2, r2, #31
 8002550:	2101      	movs	r1, #1
 8002552:	fa01 f202 	lsl.w	r2, r1, r2
 8002556:	4013      	ands	r3, r2
 8002558:	2b00      	cmp	r3, #0
 800255a:	d13a      	bne.n	80025d2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800255c:	2301      	movs	r3, #1
 800255e:	e0b2      	b.n	80026c6 <HAL_RCC_ClockConfig+0x2de>
 8002560:	2302      	movs	r3, #2
 8002562:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002564:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002566:	fa93 f3a3 	rbit	r3, r3
 800256a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 800256c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800256e:	fab3 f383 	clz	r3, r3
 8002572:	b2db      	uxtb	r3, r3
 8002574:	095b      	lsrs	r3, r3, #5
 8002576:	b2db      	uxtb	r3, r3
 8002578:	f043 0301 	orr.w	r3, r3, #1
 800257c:	b2db      	uxtb	r3, r3
 800257e:	2b01      	cmp	r3, #1
 8002580:	d102      	bne.n	8002588 <HAL_RCC_ClockConfig+0x1a0>
 8002582:	4b31      	ldr	r3, [pc, #196]	@ (8002648 <HAL_RCC_ClockConfig+0x260>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	e00d      	b.n	80025a4 <HAL_RCC_ClockConfig+0x1bc>
 8002588:	2302      	movs	r3, #2
 800258a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800258c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800258e:	fa93 f3a3 	rbit	r3, r3
 8002592:	627b      	str	r3, [r7, #36]	@ 0x24
 8002594:	2302      	movs	r3, #2
 8002596:	623b      	str	r3, [r7, #32]
 8002598:	6a3b      	ldr	r3, [r7, #32]
 800259a:	fa93 f3a3 	rbit	r3, r3
 800259e:	61fb      	str	r3, [r7, #28]
 80025a0:	4b29      	ldr	r3, [pc, #164]	@ (8002648 <HAL_RCC_ClockConfig+0x260>)
 80025a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025a4:	2202      	movs	r2, #2
 80025a6:	61ba      	str	r2, [r7, #24]
 80025a8:	69ba      	ldr	r2, [r7, #24]
 80025aa:	fa92 f2a2 	rbit	r2, r2
 80025ae:	617a      	str	r2, [r7, #20]
  return result;
 80025b0:	697a      	ldr	r2, [r7, #20]
 80025b2:	fab2 f282 	clz	r2, r2
 80025b6:	b2d2      	uxtb	r2, r2
 80025b8:	f042 0220 	orr.w	r2, r2, #32
 80025bc:	b2d2      	uxtb	r2, r2
 80025be:	f002 021f 	and.w	r2, r2, #31
 80025c2:	2101      	movs	r1, #1
 80025c4:	fa01 f202 	lsl.w	r2, r1, r2
 80025c8:	4013      	ands	r3, r2
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d101      	bne.n	80025d2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	e079      	b.n	80026c6 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025d2:	4b1d      	ldr	r3, [pc, #116]	@ (8002648 <HAL_RCC_ClockConfig+0x260>)
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	f023 0203 	bic.w	r2, r3, #3
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	491a      	ldr	r1, [pc, #104]	@ (8002648 <HAL_RCC_ClockConfig+0x260>)
 80025e0:	4313      	orrs	r3, r2
 80025e2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80025e4:	f7fe f9b2 	bl	800094c <HAL_GetTick>
 80025e8:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025ea:	e00a      	b.n	8002602 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025ec:	f7fe f9ae 	bl	800094c <HAL_GetTick>
 80025f0:	4602      	mov	r2, r0
 80025f2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80025f4:	1ad3      	subs	r3, r2, r3
 80025f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d901      	bls.n	8002602 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80025fe:	2303      	movs	r3, #3
 8002600:	e061      	b.n	80026c6 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002602:	4b11      	ldr	r3, [pc, #68]	@ (8002648 <HAL_RCC_ClockConfig+0x260>)
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	f003 020c 	and.w	r2, r3, #12
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	009b      	lsls	r3, r3, #2
 8002610:	429a      	cmp	r2, r3
 8002612:	d1eb      	bne.n	80025ec <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002614:	4b0b      	ldr	r3, [pc, #44]	@ (8002644 <HAL_RCC_ClockConfig+0x25c>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f003 0307 	and.w	r3, r3, #7
 800261c:	683a      	ldr	r2, [r7, #0]
 800261e:	429a      	cmp	r2, r3
 8002620:	d214      	bcs.n	800264c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002622:	4b08      	ldr	r3, [pc, #32]	@ (8002644 <HAL_RCC_ClockConfig+0x25c>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f023 0207 	bic.w	r2, r3, #7
 800262a:	4906      	ldr	r1, [pc, #24]	@ (8002644 <HAL_RCC_ClockConfig+0x25c>)
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	4313      	orrs	r3, r2
 8002630:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002632:	4b04      	ldr	r3, [pc, #16]	@ (8002644 <HAL_RCC_ClockConfig+0x25c>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f003 0307 	and.w	r3, r3, #7
 800263a:	683a      	ldr	r2, [r7, #0]
 800263c:	429a      	cmp	r2, r3
 800263e:	d005      	beq.n	800264c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002640:	2301      	movs	r3, #1
 8002642:	e040      	b.n	80026c6 <HAL_RCC_ClockConfig+0x2de>
 8002644:	40022000 	.word	0x40022000
 8002648:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f003 0304 	and.w	r3, r3, #4
 8002654:	2b00      	cmp	r3, #0
 8002656:	d008      	beq.n	800266a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002658:	4b1d      	ldr	r3, [pc, #116]	@ (80026d0 <HAL_RCC_ClockConfig+0x2e8>)
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	68db      	ldr	r3, [r3, #12]
 8002664:	491a      	ldr	r1, [pc, #104]	@ (80026d0 <HAL_RCC_ClockConfig+0x2e8>)
 8002666:	4313      	orrs	r3, r2
 8002668:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f003 0308 	and.w	r3, r3, #8
 8002672:	2b00      	cmp	r3, #0
 8002674:	d009      	beq.n	800268a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002676:	4b16      	ldr	r3, [pc, #88]	@ (80026d0 <HAL_RCC_ClockConfig+0x2e8>)
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	691b      	ldr	r3, [r3, #16]
 8002682:	00db      	lsls	r3, r3, #3
 8002684:	4912      	ldr	r1, [pc, #72]	@ (80026d0 <HAL_RCC_ClockConfig+0x2e8>)
 8002686:	4313      	orrs	r3, r2
 8002688:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800268a:	f000 f829 	bl	80026e0 <HAL_RCC_GetSysClockFreq>
 800268e:	4601      	mov	r1, r0
 8002690:	4b0f      	ldr	r3, [pc, #60]	@ (80026d0 <HAL_RCC_ClockConfig+0x2e8>)
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002698:	22f0      	movs	r2, #240	@ 0xf0
 800269a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800269c:	693a      	ldr	r2, [r7, #16]
 800269e:	fa92 f2a2 	rbit	r2, r2
 80026a2:	60fa      	str	r2, [r7, #12]
  return result;
 80026a4:	68fa      	ldr	r2, [r7, #12]
 80026a6:	fab2 f282 	clz	r2, r2
 80026aa:	b2d2      	uxtb	r2, r2
 80026ac:	40d3      	lsrs	r3, r2
 80026ae:	4a09      	ldr	r2, [pc, #36]	@ (80026d4 <HAL_RCC_ClockConfig+0x2ec>)
 80026b0:	5cd3      	ldrb	r3, [r2, r3]
 80026b2:	fa21 f303 	lsr.w	r3, r1, r3
 80026b6:	4a08      	ldr	r2, [pc, #32]	@ (80026d8 <HAL_RCC_ClockConfig+0x2f0>)
 80026b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80026ba:	4b08      	ldr	r3, [pc, #32]	@ (80026dc <HAL_RCC_ClockConfig+0x2f4>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4618      	mov	r0, r3
 80026c0:	f7fe f900 	bl	80008c4 <HAL_InitTick>
  
  return HAL_OK;
 80026c4:	2300      	movs	r3, #0
}
 80026c6:	4618      	mov	r0, r3
 80026c8:	3778      	adds	r7, #120	@ 0x78
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}
 80026ce:	bf00      	nop
 80026d0:	40021000 	.word	0x40021000
 80026d4:	0800446c 	.word	0x0800446c
 80026d8:	20000000 	.word	0x20000000
 80026dc:	20000004 	.word	0x20000004

080026e0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026e0:	b480      	push	{r7}
 80026e2:	b087      	sub	sp, #28
 80026e4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80026e6:	2300      	movs	r3, #0
 80026e8:	60fb      	str	r3, [r7, #12]
 80026ea:	2300      	movs	r3, #0
 80026ec:	60bb      	str	r3, [r7, #8]
 80026ee:	2300      	movs	r3, #0
 80026f0:	617b      	str	r3, [r7, #20]
 80026f2:	2300      	movs	r3, #0
 80026f4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80026f6:	2300      	movs	r3, #0
 80026f8:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80026fa:	4b1f      	ldr	r3, [pc, #124]	@ (8002778 <HAL_RCC_GetSysClockFreq+0x98>)
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	f003 030c 	and.w	r3, r3, #12
 8002706:	2b04      	cmp	r3, #4
 8002708:	d002      	beq.n	8002710 <HAL_RCC_GetSysClockFreq+0x30>
 800270a:	2b08      	cmp	r3, #8
 800270c:	d003      	beq.n	8002716 <HAL_RCC_GetSysClockFreq+0x36>
 800270e:	e029      	b.n	8002764 <HAL_RCC_GetSysClockFreq+0x84>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002710:	4b1a      	ldr	r3, [pc, #104]	@ (800277c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002712:	613b      	str	r3, [r7, #16]
      break;
 8002714:	e029      	b.n	800276a <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	0c9b      	lsrs	r3, r3, #18
 800271a:	f003 030f 	and.w	r3, r3, #15
 800271e:	4a18      	ldr	r2, [pc, #96]	@ (8002780 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002720:	5cd3      	ldrb	r3, [r2, r3]
 8002722:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8002724:	4b14      	ldr	r3, [pc, #80]	@ (8002778 <HAL_RCC_GetSysClockFreq+0x98>)
 8002726:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002728:	f003 030f 	and.w	r3, r3, #15
 800272c:	4a15      	ldr	r2, [pc, #84]	@ (8002784 <HAL_RCC_GetSysClockFreq+0xa4>)
 800272e:	5cd3      	ldrb	r3, [r2, r3]
 8002730:	60bb      	str	r3, [r7, #8]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002738:	2b00      	cmp	r3, #0
 800273a:	d008      	beq.n	800274e <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800273c:	4a0f      	ldr	r2, [pc, #60]	@ (800277c <HAL_RCC_GetSysClockFreq+0x9c>)
 800273e:	68bb      	ldr	r3, [r7, #8]
 8002740:	fbb2 f2f3 	udiv	r2, r2, r3
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	fb02 f303 	mul.w	r3, r2, r3
 800274a:	617b      	str	r3, [r7, #20]
 800274c:	e007      	b.n	800275e <HAL_RCC_GetSysClockFreq+0x7e>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800274e:	4a0b      	ldr	r2, [pc, #44]	@ (800277c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	fbb2 f2f3 	udiv	r2, r2, r3
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	fb02 f303 	mul.w	r3, r2, r3
 800275c:	617b      	str	r3, [r7, #20]
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800275e:	697b      	ldr	r3, [r7, #20]
 8002760:	613b      	str	r3, [r7, #16]
      break;
 8002762:	e002      	b.n	800276a <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002764:	4b05      	ldr	r3, [pc, #20]	@ (800277c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002766:	613b      	str	r3, [r7, #16]
      break;
 8002768:	bf00      	nop
    }
  }
  return sysclockfreq;
 800276a:	693b      	ldr	r3, [r7, #16]
}
 800276c:	4618      	mov	r0, r3
 800276e:	371c      	adds	r7, #28
 8002770:	46bd      	mov	sp, r7
 8002772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002776:	4770      	bx	lr
 8002778:	40021000 	.word	0x40021000
 800277c:	007a1200 	.word	0x007a1200
 8002780:	08004484 	.word	0x08004484
 8002784:	08004494 	.word	0x08004494

08002788 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002788:	b480      	push	{r7}
 800278a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800278c:	4b03      	ldr	r3, [pc, #12]	@ (800279c <HAL_RCC_GetHCLKFreq+0x14>)
 800278e:	681b      	ldr	r3, [r3, #0]
}
 8002790:	4618      	mov	r0, r3
 8002792:	46bd      	mov	sp, r7
 8002794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002798:	4770      	bx	lr
 800279a:	bf00      	nop
 800279c:	20000000 	.word	0x20000000

080027a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b082      	sub	sp, #8
 80027a4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80027a6:	f7ff ffef 	bl	8002788 <HAL_RCC_GetHCLKFreq>
 80027aa:	4601      	mov	r1, r0
 80027ac:	4b0b      	ldr	r3, [pc, #44]	@ (80027dc <HAL_RCC_GetPCLK1Freq+0x3c>)
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80027b4:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80027b8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ba:	687a      	ldr	r2, [r7, #4]
 80027bc:	fa92 f2a2 	rbit	r2, r2
 80027c0:	603a      	str	r2, [r7, #0]
  return result;
 80027c2:	683a      	ldr	r2, [r7, #0]
 80027c4:	fab2 f282 	clz	r2, r2
 80027c8:	b2d2      	uxtb	r2, r2
 80027ca:	40d3      	lsrs	r3, r2
 80027cc:	4a04      	ldr	r2, [pc, #16]	@ (80027e0 <HAL_RCC_GetPCLK1Freq+0x40>)
 80027ce:	5cd3      	ldrb	r3, [r2, r3]
 80027d0:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80027d4:	4618      	mov	r0, r3
 80027d6:	3708      	adds	r7, #8
 80027d8:	46bd      	mov	sp, r7
 80027da:	bd80      	pop	{r7, pc}
 80027dc:	40021000 	.word	0x40021000
 80027e0:	0800447c 	.word	0x0800447c

080027e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b082      	sub	sp, #8
 80027e8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80027ea:	f7ff ffcd 	bl	8002788 <HAL_RCC_GetHCLKFreq>
 80027ee:	4601      	mov	r1, r0
 80027f0:	4b0b      	ldr	r3, [pc, #44]	@ (8002820 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 80027f8:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 80027fc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027fe:	687a      	ldr	r2, [r7, #4]
 8002800:	fa92 f2a2 	rbit	r2, r2
 8002804:	603a      	str	r2, [r7, #0]
  return result;
 8002806:	683a      	ldr	r2, [r7, #0]
 8002808:	fab2 f282 	clz	r2, r2
 800280c:	b2d2      	uxtb	r2, r2
 800280e:	40d3      	lsrs	r3, r2
 8002810:	4a04      	ldr	r2, [pc, #16]	@ (8002824 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002812:	5cd3      	ldrb	r3, [r2, r3]
 8002814:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002818:	4618      	mov	r0, r3
 800281a:	3708      	adds	r7, #8
 800281c:	46bd      	mov	sp, r7
 800281e:	bd80      	pop	{r7, pc}
 8002820:	40021000 	.word	0x40021000
 8002824:	0800447c 	.word	0x0800447c

08002828 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b092      	sub	sp, #72	@ 0x48
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002830:	2300      	movs	r3, #0
 8002832:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8002834:	2300      	movs	r3, #0
 8002836:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002838:	2300      	movs	r3, #0
 800283a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002846:	2b00      	cmp	r3, #0
 8002848:	f000 80d4 	beq.w	80029f4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800284c:	4b4e      	ldr	r3, [pc, #312]	@ (8002988 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800284e:	69db      	ldr	r3, [r3, #28]
 8002850:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002854:	2b00      	cmp	r3, #0
 8002856:	d10e      	bne.n	8002876 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002858:	4b4b      	ldr	r3, [pc, #300]	@ (8002988 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800285a:	69db      	ldr	r3, [r3, #28]
 800285c:	4a4a      	ldr	r2, [pc, #296]	@ (8002988 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800285e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002862:	61d3      	str	r3, [r2, #28]
 8002864:	4b48      	ldr	r3, [pc, #288]	@ (8002988 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002866:	69db      	ldr	r3, [r3, #28]
 8002868:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800286c:	60bb      	str	r3, [r7, #8]
 800286e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002870:	2301      	movs	r3, #1
 8002872:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002876:	4b45      	ldr	r3, [pc, #276]	@ (800298c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800287e:	2b00      	cmp	r3, #0
 8002880:	d118      	bne.n	80028b4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002882:	4b42      	ldr	r3, [pc, #264]	@ (800298c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4a41      	ldr	r2, [pc, #260]	@ (800298c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002888:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800288c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800288e:	f7fe f85d 	bl	800094c <HAL_GetTick>
 8002892:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002894:	e008      	b.n	80028a8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002896:	f7fe f859 	bl	800094c <HAL_GetTick>
 800289a:	4602      	mov	r2, r0
 800289c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800289e:	1ad3      	subs	r3, r2, r3
 80028a0:	2b64      	cmp	r3, #100	@ 0x64
 80028a2:	d901      	bls.n	80028a8 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80028a4:	2303      	movs	r3, #3
 80028a6:	e1d6      	b.n	8002c56 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028a8:	4b38      	ldr	r3, [pc, #224]	@ (800298c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d0f0      	beq.n	8002896 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80028b4:	4b34      	ldr	r3, [pc, #208]	@ (8002988 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028b6:	6a1b      	ldr	r3, [r3, #32]
 80028b8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80028bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80028be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	f000 8084 	beq.w	80029ce <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80028ce:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80028d0:	429a      	cmp	r2, r3
 80028d2:	d07c      	beq.n	80029ce <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80028d4:	4b2c      	ldr	r3, [pc, #176]	@ (8002988 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028d6:	6a1b      	ldr	r3, [r3, #32]
 80028d8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80028dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80028de:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80028e2:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028e6:	fa93 f3a3 	rbit	r3, r3
 80028ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80028ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80028ee:	fab3 f383 	clz	r3, r3
 80028f2:	b2db      	uxtb	r3, r3
 80028f4:	461a      	mov	r2, r3
 80028f6:	4b26      	ldr	r3, [pc, #152]	@ (8002990 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80028f8:	4413      	add	r3, r2
 80028fa:	009b      	lsls	r3, r3, #2
 80028fc:	461a      	mov	r2, r3
 80028fe:	2301      	movs	r3, #1
 8002900:	6013      	str	r3, [r2, #0]
 8002902:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002906:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002908:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800290a:	fa93 f3a3 	rbit	r3, r3
 800290e:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002910:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002912:	fab3 f383 	clz	r3, r3
 8002916:	b2db      	uxtb	r3, r3
 8002918:	461a      	mov	r2, r3
 800291a:	4b1d      	ldr	r3, [pc, #116]	@ (8002990 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800291c:	4413      	add	r3, r2
 800291e:	009b      	lsls	r3, r3, #2
 8002920:	461a      	mov	r2, r3
 8002922:	2300      	movs	r3, #0
 8002924:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002926:	4a18      	ldr	r2, [pc, #96]	@ (8002988 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002928:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800292a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800292c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800292e:	f003 0301 	and.w	r3, r3, #1
 8002932:	2b00      	cmp	r3, #0
 8002934:	d04b      	beq.n	80029ce <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002936:	f7fe f809 	bl	800094c <HAL_GetTick>
 800293a:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800293c:	e00a      	b.n	8002954 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800293e:	f7fe f805 	bl	800094c <HAL_GetTick>
 8002942:	4602      	mov	r2, r0
 8002944:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002946:	1ad3      	subs	r3, r2, r3
 8002948:	f241 3288 	movw	r2, #5000	@ 0x1388
 800294c:	4293      	cmp	r3, r2
 800294e:	d901      	bls.n	8002954 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002950:	2303      	movs	r3, #3
 8002952:	e180      	b.n	8002c56 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8002954:	2302      	movs	r3, #2
 8002956:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002958:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800295a:	fa93 f3a3 	rbit	r3, r3
 800295e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002960:	2302      	movs	r3, #2
 8002962:	623b      	str	r3, [r7, #32]
 8002964:	6a3b      	ldr	r3, [r7, #32]
 8002966:	fa93 f3a3 	rbit	r3, r3
 800296a:	61fb      	str	r3, [r7, #28]
  return result;
 800296c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800296e:	fab3 f383 	clz	r3, r3
 8002972:	b2db      	uxtb	r3, r3
 8002974:	095b      	lsrs	r3, r3, #5
 8002976:	b2db      	uxtb	r3, r3
 8002978:	f043 0302 	orr.w	r3, r3, #2
 800297c:	b2db      	uxtb	r3, r3
 800297e:	2b02      	cmp	r3, #2
 8002980:	d108      	bne.n	8002994 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002982:	4b01      	ldr	r3, [pc, #4]	@ (8002988 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002984:	6a1b      	ldr	r3, [r3, #32]
 8002986:	e00d      	b.n	80029a4 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002988:	40021000 	.word	0x40021000
 800298c:	40007000 	.word	0x40007000
 8002990:	10908100 	.word	0x10908100
 8002994:	2302      	movs	r3, #2
 8002996:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002998:	69bb      	ldr	r3, [r7, #24]
 800299a:	fa93 f3a3 	rbit	r3, r3
 800299e:	617b      	str	r3, [r7, #20]
 80029a0:	4b9a      	ldr	r3, [pc, #616]	@ (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80029a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029a4:	2202      	movs	r2, #2
 80029a6:	613a      	str	r2, [r7, #16]
 80029a8:	693a      	ldr	r2, [r7, #16]
 80029aa:	fa92 f2a2 	rbit	r2, r2
 80029ae:	60fa      	str	r2, [r7, #12]
  return result;
 80029b0:	68fa      	ldr	r2, [r7, #12]
 80029b2:	fab2 f282 	clz	r2, r2
 80029b6:	b2d2      	uxtb	r2, r2
 80029b8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80029bc:	b2d2      	uxtb	r2, r2
 80029be:	f002 021f 	and.w	r2, r2, #31
 80029c2:	2101      	movs	r1, #1
 80029c4:	fa01 f202 	lsl.w	r2, r1, r2
 80029c8:	4013      	ands	r3, r2
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d0b7      	beq.n	800293e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80029ce:	4b8f      	ldr	r3, [pc, #572]	@ (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80029d0:	6a1b      	ldr	r3, [r3, #32]
 80029d2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	498c      	ldr	r1, [pc, #560]	@ (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80029dc:	4313      	orrs	r3, r2
 80029de:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80029e0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80029e4:	2b01      	cmp	r3, #1
 80029e6:	d105      	bne.n	80029f4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029e8:	4b88      	ldr	r3, [pc, #544]	@ (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80029ea:	69db      	ldr	r3, [r3, #28]
 80029ec:	4a87      	ldr	r2, [pc, #540]	@ (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80029ee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80029f2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f003 0301 	and.w	r3, r3, #1
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d008      	beq.n	8002a12 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002a00:	4b82      	ldr	r3, [pc, #520]	@ (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a04:	f023 0203 	bic.w	r2, r3, #3
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	689b      	ldr	r3, [r3, #8]
 8002a0c:	497f      	ldr	r1, [pc, #508]	@ (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f003 0302 	and.w	r3, r3, #2
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d008      	beq.n	8002a30 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002a1e:	4b7b      	ldr	r3, [pc, #492]	@ (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a22:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	68db      	ldr	r3, [r3, #12]
 8002a2a:	4978      	ldr	r1, [pc, #480]	@ (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f003 0304 	and.w	r3, r3, #4
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d008      	beq.n	8002a4e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002a3c:	4b73      	ldr	r3, [pc, #460]	@ (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a40:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	691b      	ldr	r3, [r3, #16]
 8002a48:	4970      	ldr	r1, [pc, #448]	@ (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f003 0320 	and.w	r3, r3, #32
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d008      	beq.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002a5a:	4b6c      	ldr	r3, [pc, #432]	@ (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a5e:	f023 0210 	bic.w	r2, r3, #16
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	69db      	ldr	r3, [r3, #28]
 8002a66:	4969      	ldr	r1, [pc, #420]	@ (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d008      	beq.n	8002a8a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002a78:	4b64      	ldr	r3, [pc, #400]	@ (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a84:	4961      	ldr	r1, [pc, #388]	@ (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a86:	4313      	orrs	r3, r2
 8002a88:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d008      	beq.n	8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002a96:	4b5d      	ldr	r3, [pc, #372]	@ (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a9a:	f023 0220 	bic.w	r2, r3, #32
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6a1b      	ldr	r3, [r3, #32]
 8002aa2:	495a      	ldr	r1, [pc, #360]	@ (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d008      	beq.n	8002ac6 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002ab4:	4b55      	ldr	r3, [pc, #340]	@ (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ab6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ab8:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ac0:	4952      	ldr	r1, [pc, #328]	@ (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f003 0308 	and.w	r3, r3, #8
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d008      	beq.n	8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002ad2:	4b4e      	ldr	r3, [pc, #312]	@ (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ad4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ad6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	695b      	ldr	r3, [r3, #20]
 8002ade:	494b      	ldr	r1, [pc, #300]	@ (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f003 0310 	and.w	r3, r3, #16
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d008      	beq.n	8002b02 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002af0:	4b46      	ldr	r3, [pc, #280]	@ (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002af2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002af4:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	699b      	ldr	r3, [r3, #24]
 8002afc:	4943      	ldr	r1, [pc, #268]	@ (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002afe:	4313      	orrs	r3, r2
 8002b00:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d008      	beq.n	8002b20 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002b0e:	4b3f      	ldr	r3, [pc, #252]	@ (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b1a:	493c      	ldr	r1, [pc, #240]	@ (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d008      	beq.n	8002b3e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002b2c:	4b37      	ldr	r3, [pc, #220]	@ (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b30:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b38:	4934      	ldr	r1, [pc, #208]	@ (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d008      	beq.n	8002b5c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002b4a:	4b30      	ldr	r3, [pc, #192]	@ (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b4e:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b56:	492d      	ldr	r1, [pc, #180]	@ (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b58:	4313      	orrs	r3, r2
 8002b5a:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d008      	beq.n	8002b7a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002b68:	4b28      	ldr	r3, [pc, #160]	@ (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b6c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b74:	4925      	ldr	r1, [pc, #148]	@ (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b76:	4313      	orrs	r3, r2
 8002b78:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d008      	beq.n	8002b98 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002b86:	4b21      	ldr	r3, [pc, #132]	@ (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b8a:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b92:	491e      	ldr	r1, [pc, #120]	@ (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b94:	4313      	orrs	r3, r2
 8002b96:	630b      	str	r3, [r1, #48]	@ 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d008      	beq.n	8002bb6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8002ba4:	4b19      	ldr	r3, [pc, #100]	@ (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ba6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ba8:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bb0:	4916      	ldr	r1, [pc, #88]	@ (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d008      	beq.n	8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8002bc2:	4b12      	ldr	r3, [pc, #72]	@ (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002bc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bc6:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bce:	490f      	ldr	r1, [pc, #60]	@ (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d008      	beq.n	8002bf2 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002be0:	4b0a      	ldr	r3, [pc, #40]	@ (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002be2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002be4:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bec:	4907      	ldr	r1, [pc, #28]	@ (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d00c      	beq.n	8002c18 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8002bfe:	4b03      	ldr	r3, [pc, #12]	@ (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c02:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	e002      	b.n	8002c10 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8002c0a:	bf00      	nop
 8002c0c:	40021000 	.word	0x40021000
 8002c10:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c12:	4913      	ldr	r1, [pc, #76]	@ (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002c14:	4313      	orrs	r3, r2
 8002c16:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d008      	beq.n	8002c36 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8002c24:	4b0e      	ldr	r3, [pc, #56]	@ (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002c26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c28:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c30:	490b      	ldr	r1, [pc, #44]	@ (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002c32:	4313      	orrs	r3, r2
 8002c34:	630b      	str	r3, [r1, #48]	@ 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d008      	beq.n	8002c54 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8002c42:	4b07      	ldr	r3, [pc, #28]	@ (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002c44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c46:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c4e:	4904      	ldr	r1, [pc, #16]	@ (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002c50:	4313      	orrs	r3, r2
 8002c52:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002c54:	2300      	movs	r3, #0
}
 8002c56:	4618      	mov	r0, r3
 8002c58:	3748      	adds	r7, #72	@ 0x48
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bd80      	pop	{r7, pc}
 8002c5e:	bf00      	nop
 8002c60:	40021000 	.word	0x40021000

08002c64 <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b082      	sub	sp, #8
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d101      	bne.n	8002c76 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8002c72:	2301      	movs	r3, #1
 8002c74:	e048      	b.n	8002d08 <HAL_HalfDuplex_Init+0xa4>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d106      	bne.n	8002c8c <HAL_HalfDuplex_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2200      	movs	r2, #0
 8002c82:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c86:	6878      	ldr	r0, [r7, #4]
 8002c88:	f7fd fcdc 	bl	8000644 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2224      	movs	r2, #36	@ 0x24
 8002c90:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	681a      	ldr	r2, [r3, #0]
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f022 0201 	bic.w	r2, r2, #1
 8002ca0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d002      	beq.n	8002cb0 <HAL_HalfDuplex_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002caa:	6878      	ldr	r0, [r7, #4]
 8002cac:	f000 ff30 	bl	8003b10 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002cb0:	6878      	ldr	r0, [r7, #4]
 8002cb2:	f000 fd59 	bl	8003768 <UART_SetConfig>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	2b01      	cmp	r3, #1
 8002cba:	d101      	bne.n	8002cc0 <HAL_HalfDuplex_Init+0x5c>
  {
    return HAL_ERROR;
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	e023      	b.n	8002d08 <HAL_HalfDuplex_Init+0xa4>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	685a      	ldr	r2, [r3, #4]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002cce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	689a      	ldr	r2, [r3, #8]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f022 0222 	bic.w	r2, r2, #34	@ 0x22
 8002cde:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	689a      	ldr	r2, [r3, #8]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f042 0208 	orr.w	r2, r2, #8
 8002cee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	681a      	ldr	r2, [r3, #0]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f042 0201 	orr.w	r2, r2, #1
 8002cfe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002d00:	6878      	ldr	r0, [r7, #4]
 8002d02:	f000 ffa7 	bl	8003c54 <UART_CheckIdleState>
 8002d06:	4603      	mov	r3, r0
}
 8002d08:	4618      	mov	r0, r3
 8002d0a:	3708      	adds	r7, #8
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bd80      	pop	{r7, pc}

08002d10 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b08a      	sub	sp, #40	@ 0x28
 8002d14:	af02      	add	r7, sp, #8
 8002d16:	60f8      	str	r0, [r7, #12]
 8002d18:	60b9      	str	r1, [r7, #8]
 8002d1a:	603b      	str	r3, [r7, #0]
 8002d1c:	4613      	mov	r3, r2
 8002d1e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002d24:	2b20      	cmp	r3, #32
 8002d26:	d177      	bne.n	8002e18 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d28:	68bb      	ldr	r3, [r7, #8]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d002      	beq.n	8002d34 <HAL_UART_Transmit+0x24>
 8002d2e:	88fb      	ldrh	r3, [r7, #6]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d101      	bne.n	8002d38 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002d34:	2301      	movs	r3, #1
 8002d36:	e070      	b.n	8002e1a <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	2221      	movs	r2, #33	@ 0x21
 8002d44:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002d46:	f7fd fe01 	bl	800094c <HAL_GetTick>
 8002d4a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	88fa      	ldrh	r2, [r7, #6]
 8002d50:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	88fa      	ldrh	r2, [r7, #6]
 8002d58:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	689b      	ldr	r3, [r3, #8]
 8002d60:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002d64:	d108      	bne.n	8002d78 <HAL_UART_Transmit+0x68>
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	691b      	ldr	r3, [r3, #16]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d104      	bne.n	8002d78 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002d72:	68bb      	ldr	r3, [r7, #8]
 8002d74:	61bb      	str	r3, [r7, #24]
 8002d76:	e003      	b.n	8002d80 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002d78:	68bb      	ldr	r3, [r7, #8]
 8002d7a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002d80:	e02f      	b.n	8002de2 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	9300      	str	r3, [sp, #0]
 8002d86:	697b      	ldr	r3, [r7, #20]
 8002d88:	2200      	movs	r2, #0
 8002d8a:	2180      	movs	r1, #128	@ 0x80
 8002d8c:	68f8      	ldr	r0, [r7, #12]
 8002d8e:	f001 f809 	bl	8003da4 <UART_WaitOnFlagUntilTimeout>
 8002d92:	4603      	mov	r3, r0
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d004      	beq.n	8002da2 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	2220      	movs	r2, #32
 8002d9c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8002d9e:	2303      	movs	r3, #3
 8002da0:	e03b      	b.n	8002e1a <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8002da2:	69fb      	ldr	r3, [r7, #28]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d10b      	bne.n	8002dc0 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002da8:	69bb      	ldr	r3, [r7, #24]
 8002daa:	881a      	ldrh	r2, [r3, #0]
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002db4:	b292      	uxth	r2, r2
 8002db6:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002db8:	69bb      	ldr	r3, [r7, #24]
 8002dba:	3302      	adds	r3, #2
 8002dbc:	61bb      	str	r3, [r7, #24]
 8002dbe:	e007      	b.n	8002dd0 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002dc0:	69fb      	ldr	r3, [r7, #28]
 8002dc2:	781a      	ldrb	r2, [r3, #0]
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002dca:	69fb      	ldr	r3, [r7, #28]
 8002dcc:	3301      	adds	r3, #1
 8002dce:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002dd6:	b29b      	uxth	r3, r3
 8002dd8:	3b01      	subs	r3, #1
 8002dda:	b29a      	uxth	r2, r3
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002de8:	b29b      	uxth	r3, r3
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d1c9      	bne.n	8002d82 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	9300      	str	r3, [sp, #0]
 8002df2:	697b      	ldr	r3, [r7, #20]
 8002df4:	2200      	movs	r2, #0
 8002df6:	2140      	movs	r1, #64	@ 0x40
 8002df8:	68f8      	ldr	r0, [r7, #12]
 8002dfa:	f000 ffd3 	bl	8003da4 <UART_WaitOnFlagUntilTimeout>
 8002dfe:	4603      	mov	r3, r0
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d004      	beq.n	8002e0e <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	2220      	movs	r2, #32
 8002e08:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8002e0a:	2303      	movs	r3, #3
 8002e0c:	e005      	b.n	8002e1a <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	2220      	movs	r2, #32
 8002e12:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8002e14:	2300      	movs	r3, #0
 8002e16:	e000      	b.n	8002e1a <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8002e18:	2302      	movs	r3, #2
  }
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	3720      	adds	r7, #32
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}

08002e22 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e22:	b580      	push	{r7, lr}
 8002e24:	b08a      	sub	sp, #40	@ 0x28
 8002e26:	af02      	add	r7, sp, #8
 8002e28:	60f8      	str	r0, [r7, #12]
 8002e2a:	60b9      	str	r1, [r7, #8]
 8002e2c:	603b      	str	r3, [r7, #0]
 8002e2e:	4613      	mov	r3, r2
 8002e30:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002e38:	2b20      	cmp	r3, #32
 8002e3a:	f040 80b6 	bne.w	8002faa <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e3e:	68bb      	ldr	r3, [r7, #8]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d002      	beq.n	8002e4a <HAL_UART_Receive+0x28>
 8002e44:	88fb      	ldrh	r3, [r7, #6]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d101      	bne.n	8002e4e <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e0ae      	b.n	8002fac <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	2200      	movs	r2, #0
 8002e52:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	2222      	movs	r2, #34	@ 0x22
 8002e5a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	2200      	movs	r2, #0
 8002e62:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002e64:	f7fd fd72 	bl	800094c <HAL_GetTick>
 8002e68:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	88fa      	ldrh	r2, [r7, #6]
 8002e6e:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	88fa      	ldrh	r2, [r7, #6]
 8002e76:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	689b      	ldr	r3, [r3, #8]
 8002e7e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002e82:	d10e      	bne.n	8002ea2 <HAL_UART_Receive+0x80>
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	691b      	ldr	r3, [r3, #16]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d105      	bne.n	8002e98 <HAL_UART_Receive+0x76>
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8002e92:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8002e96:	e02d      	b.n	8002ef4 <HAL_UART_Receive+0xd2>
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	22ff      	movs	r2, #255	@ 0xff
 8002e9c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8002ea0:	e028      	b.n	8002ef4 <HAL_UART_Receive+0xd2>
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	689b      	ldr	r3, [r3, #8]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d10d      	bne.n	8002ec6 <HAL_UART_Receive+0xa4>
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	691b      	ldr	r3, [r3, #16]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d104      	bne.n	8002ebc <HAL_UART_Receive+0x9a>
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	22ff      	movs	r2, #255	@ 0xff
 8002eb6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8002eba:	e01b      	b.n	8002ef4 <HAL_UART_Receive+0xd2>
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	227f      	movs	r2, #127	@ 0x7f
 8002ec0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8002ec4:	e016      	b.n	8002ef4 <HAL_UART_Receive+0xd2>
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	689b      	ldr	r3, [r3, #8]
 8002eca:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002ece:	d10d      	bne.n	8002eec <HAL_UART_Receive+0xca>
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	691b      	ldr	r3, [r3, #16]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d104      	bne.n	8002ee2 <HAL_UART_Receive+0xc0>
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	227f      	movs	r2, #127	@ 0x7f
 8002edc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8002ee0:	e008      	b.n	8002ef4 <HAL_UART_Receive+0xd2>
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	223f      	movs	r2, #63	@ 0x3f
 8002ee6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8002eea:	e003      	b.n	8002ef4 <HAL_UART_Receive+0xd2>
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	2200      	movs	r2, #0
 8002ef0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8002efa:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	689b      	ldr	r3, [r3, #8]
 8002f00:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002f04:	d108      	bne.n	8002f18 <HAL_UART_Receive+0xf6>
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	691b      	ldr	r3, [r3, #16]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d104      	bne.n	8002f18 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002f12:	68bb      	ldr	r3, [r7, #8]
 8002f14:	61bb      	str	r3, [r7, #24]
 8002f16:	e003      	b.n	8002f20 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8002f18:	68bb      	ldr	r3, [r7, #8]
 8002f1a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8002f20:	e037      	b.n	8002f92 <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	9300      	str	r3, [sp, #0]
 8002f26:	697b      	ldr	r3, [r7, #20]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	2120      	movs	r1, #32
 8002f2c:	68f8      	ldr	r0, [r7, #12]
 8002f2e:	f000 ff39 	bl	8003da4 <UART_WaitOnFlagUntilTimeout>
 8002f32:	4603      	mov	r3, r0
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d005      	beq.n	8002f44 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	2220      	movs	r2, #32
 8002f3c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 8002f40:	2303      	movs	r3, #3
 8002f42:	e033      	b.n	8002fac <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 8002f44:	69fb      	ldr	r3, [r7, #28]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d10c      	bne.n	8002f64 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8002f50:	b29a      	uxth	r2, r3
 8002f52:	8a7b      	ldrh	r3, [r7, #18]
 8002f54:	4013      	ands	r3, r2
 8002f56:	b29a      	uxth	r2, r3
 8002f58:	69bb      	ldr	r3, [r7, #24]
 8002f5a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002f5c:	69bb      	ldr	r3, [r7, #24]
 8002f5e:	3302      	adds	r3, #2
 8002f60:	61bb      	str	r3, [r7, #24]
 8002f62:	e00d      	b.n	8002f80 <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8002f6a:	b29b      	uxth	r3, r3
 8002f6c:	b2da      	uxtb	r2, r3
 8002f6e:	8a7b      	ldrh	r3, [r7, #18]
 8002f70:	b2db      	uxtb	r3, r3
 8002f72:	4013      	ands	r3, r2
 8002f74:	b2da      	uxtb	r2, r3
 8002f76:	69fb      	ldr	r3, [r7, #28]
 8002f78:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8002f7a:	69fb      	ldr	r3, [r7, #28]
 8002f7c:	3301      	adds	r3, #1
 8002f7e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8002f86:	b29b      	uxth	r3, r3
 8002f88:	3b01      	subs	r3, #1
 8002f8a:	b29a      	uxth	r2, r3
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8002f98:	b29b      	uxth	r3, r3
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d1c1      	bne.n	8002f22 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	2220      	movs	r2, #32
 8002fa2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	e000      	b.n	8002fac <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 8002faa:	2302      	movs	r3, #2
  }
}
 8002fac:	4618      	mov	r0, r3
 8002fae:	3720      	adds	r7, #32
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bd80      	pop	{r7, pc}

08002fb4 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b08a      	sub	sp, #40	@ 0x28
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	60f8      	str	r0, [r7, #12]
 8002fbc:	60b9      	str	r1, [r7, #8]
 8002fbe:	4613      	mov	r3, r2
 8002fc0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002fc6:	2b20      	cmp	r3, #32
 8002fc8:	d165      	bne.n	8003096 <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 8002fca:	68bb      	ldr	r3, [r7, #8]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d002      	beq.n	8002fd6 <HAL_UART_Transmit_DMA+0x22>
 8002fd0:	88fb      	ldrh	r3, [r7, #6]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d101      	bne.n	8002fda <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	e05e      	b.n	8003098 <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	68ba      	ldr	r2, [r7, #8]
 8002fde:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	88fa      	ldrh	r2, [r7, #6]
 8002fe4:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	88fa      	ldrh	r2, [r7, #6]
 8002fec:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	2221      	movs	r2, #33	@ 0x21
 8002ffc:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003002:	2b00      	cmp	r3, #0
 8003004:	d027      	beq.n	8003056 <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800300a:	4a25      	ldr	r2, [pc, #148]	@ (80030a0 <HAL_UART_Transmit_DMA+0xec>)
 800300c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003012:	4a24      	ldr	r2, [pc, #144]	@ (80030a4 <HAL_UART_Transmit_DMA+0xf0>)
 8003014:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800301a:	4a23      	ldr	r2, [pc, #140]	@ (80030a8 <HAL_UART_Transmit_DMA+0xf4>)
 800301c:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003022:	2200      	movs	r2, #0
 8003024:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800302e:	4619      	mov	r1, r3
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	3328      	adds	r3, #40	@ 0x28
 8003036:	461a      	mov	r2, r3
 8003038:	88fb      	ldrh	r3, [r7, #6]
 800303a:	f7fd fe0f 	bl	8000c5c <HAL_DMA_Start_IT>
 800303e:	4603      	mov	r3, r0
 8003040:	2b00      	cmp	r3, #0
 8003042:	d008      	beq.n	8003056 <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	2210      	movs	r2, #16
 8003048:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	2220      	movs	r2, #32
 8003050:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 8003052:	2301      	movs	r3, #1
 8003054:	e020      	b.n	8003098 <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	2240      	movs	r2, #64	@ 0x40
 800305c:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	3308      	adds	r3, #8
 8003064:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003066:	697b      	ldr	r3, [r7, #20]
 8003068:	e853 3f00 	ldrex	r3, [r3]
 800306c:	613b      	str	r3, [r7, #16]
   return(result);
 800306e:	693b      	ldr	r3, [r7, #16]
 8003070:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003074:	627b      	str	r3, [r7, #36]	@ 0x24
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	3308      	adds	r3, #8
 800307c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800307e:	623a      	str	r2, [r7, #32]
 8003080:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003082:	69f9      	ldr	r1, [r7, #28]
 8003084:	6a3a      	ldr	r2, [r7, #32]
 8003086:	e841 2300 	strex	r3, r2, [r1]
 800308a:	61bb      	str	r3, [r7, #24]
   return(result);
 800308c:	69bb      	ldr	r3, [r7, #24]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d1e5      	bne.n	800305e <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 8003092:	2300      	movs	r3, #0
 8003094:	e000      	b.n	8003098 <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 8003096:	2302      	movs	r3, #2
  }
}
 8003098:	4618      	mov	r0, r3
 800309a:	3728      	adds	r7, #40	@ 0x28
 800309c:	46bd      	mov	sp, r7
 800309e:	bd80      	pop	{r7, pc}
 80030a0:	080040d5 	.word	0x080040d5
 80030a4:	08004169 	.word	0x08004169
 80030a8:	080042e9 	.word	0x080042e9

080030ac <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b08a      	sub	sp, #40	@ 0x28
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	60f8      	str	r0, [r7, #12]
 80030b4:	60b9      	str	r1, [r7, #8]
 80030b6:	4613      	mov	r3, r2
 80030b8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80030c0:	2b20      	cmp	r3, #32
 80030c2:	d132      	bne.n	800312a <HAL_UART_Receive_DMA+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 80030c4:	68bb      	ldr	r3, [r7, #8]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d002      	beq.n	80030d0 <HAL_UART_Receive_DMA+0x24>
 80030ca:	88fb      	ldrh	r3, [r7, #6]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d101      	bne.n	80030d4 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 80030d0:	2301      	movs	r3, #1
 80030d2:	e02b      	b.n	800312c <HAL_UART_Receive_DMA+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	2200      	movs	r2, #0
 80030d8:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d018      	beq.n	800311a <HAL_UART_Receive_DMA+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030ee:	697b      	ldr	r3, [r7, #20]
 80030f0:	e853 3f00 	ldrex	r3, [r3]
 80030f4:	613b      	str	r3, [r7, #16]
   return(result);
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80030fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	461a      	mov	r2, r3
 8003104:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003106:	623b      	str	r3, [r7, #32]
 8003108:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800310a:	69f9      	ldr	r1, [r7, #28]
 800310c:	6a3a      	ldr	r2, [r7, #32]
 800310e:	e841 2300 	strex	r3, r2, [r1]
 8003112:	61bb      	str	r3, [r7, #24]
   return(result);
 8003114:	69bb      	ldr	r3, [r7, #24]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d1e6      	bne.n	80030e8 <HAL_UART_Receive_DMA+0x3c>
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800311a:	88fb      	ldrh	r3, [r7, #6]
 800311c:	461a      	mov	r2, r3
 800311e:	68b9      	ldr	r1, [r7, #8]
 8003120:	68f8      	ldr	r0, [r7, #12]
 8003122:	f000 fead 	bl	8003e80 <UART_Start_Receive_DMA>
 8003126:	4603      	mov	r3, r0
 8003128:	e000      	b.n	800312c <HAL_UART_Receive_DMA+0x80>
  }
  else
  {
    return HAL_BUSY;
 800312a:	2302      	movs	r3, #2
  }
}
 800312c:	4618      	mov	r0, r3
 800312e:	3728      	adds	r7, #40	@ 0x28
 8003130:	46bd      	mov	sp, r7
 8003132:	bd80      	pop	{r7, pc}

08003134 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b0ba      	sub	sp, #232	@ 0xe8
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	69db      	ldr	r3, [r3, #28]
 8003142:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	689b      	ldr	r3, [r3, #8]
 8003156:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800315a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800315e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8003162:	4013      	ands	r3, r2
 8003164:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8003168:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800316c:	2b00      	cmp	r3, #0
 800316e:	d115      	bne.n	800319c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003170:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003174:	f003 0320 	and.w	r3, r3, #32
 8003178:	2b00      	cmp	r3, #0
 800317a:	d00f      	beq.n	800319c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800317c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003180:	f003 0320 	and.w	r3, r3, #32
 8003184:	2b00      	cmp	r3, #0
 8003186:	d009      	beq.n	800319c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800318c:	2b00      	cmp	r3, #0
 800318e:	f000 82ab 	beq.w	80036e8 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003196:	6878      	ldr	r0, [r7, #4]
 8003198:	4798      	blx	r3
      }
      return;
 800319a:	e2a5      	b.n	80036e8 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800319c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	f000 8117 	beq.w	80033d4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80031a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80031aa:	f003 0301 	and.w	r3, r3, #1
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d106      	bne.n	80031c0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80031b2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80031b6:	4b85      	ldr	r3, [pc, #532]	@ (80033cc <HAL_UART_IRQHandler+0x298>)
 80031b8:	4013      	ands	r3, r2
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	f000 810a 	beq.w	80033d4 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80031c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80031c4:	f003 0301 	and.w	r3, r3, #1
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d011      	beq.n	80031f0 <HAL_UART_IRQHandler+0xbc>
 80031cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80031d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d00b      	beq.n	80031f0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	2201      	movs	r2, #1
 80031de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80031e6:	f043 0201 	orr.w	r2, r3, #1
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80031f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80031f4:	f003 0302 	and.w	r3, r3, #2
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d011      	beq.n	8003220 <HAL_UART_IRQHandler+0xec>
 80031fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003200:	f003 0301 	and.w	r3, r3, #1
 8003204:	2b00      	cmp	r3, #0
 8003206:	d00b      	beq.n	8003220 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	2202      	movs	r2, #2
 800320e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003216:	f043 0204 	orr.w	r2, r3, #4
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003220:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003224:	f003 0304 	and.w	r3, r3, #4
 8003228:	2b00      	cmp	r3, #0
 800322a:	d011      	beq.n	8003250 <HAL_UART_IRQHandler+0x11c>
 800322c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003230:	f003 0301 	and.w	r3, r3, #1
 8003234:	2b00      	cmp	r3, #0
 8003236:	d00b      	beq.n	8003250 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	2204      	movs	r2, #4
 800323e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003246:	f043 0202 	orr.w	r2, r3, #2
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003250:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003254:	f003 0308 	and.w	r3, r3, #8
 8003258:	2b00      	cmp	r3, #0
 800325a:	d017      	beq.n	800328c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800325c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003260:	f003 0320 	and.w	r3, r3, #32
 8003264:	2b00      	cmp	r3, #0
 8003266:	d105      	bne.n	8003274 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003268:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800326c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003270:	2b00      	cmp	r3, #0
 8003272:	d00b      	beq.n	800328c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	2208      	movs	r2, #8
 800327a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003282:	f043 0208 	orr.w	r2, r3, #8
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800328c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003290:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003294:	2b00      	cmp	r3, #0
 8003296:	d012      	beq.n	80032be <HAL_UART_IRQHandler+0x18a>
 8003298:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800329c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d00c      	beq.n	80032be <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80032ac:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80032b4:	f043 0220 	orr.w	r2, r3, #32
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	f000 8211 	beq.w	80036ec <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80032ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80032ce:	f003 0320 	and.w	r3, r3, #32
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d00d      	beq.n	80032f2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80032d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80032da:	f003 0320 	and.w	r3, r3, #32
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d007      	beq.n	80032f2 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d003      	beq.n	80032f2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80032ee:	6878      	ldr	r0, [r7, #4]
 80032f0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80032f8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	689b      	ldr	r3, [r3, #8]
 8003302:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003306:	2b40      	cmp	r3, #64	@ 0x40
 8003308:	d005      	beq.n	8003316 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800330a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800330e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003312:	2b00      	cmp	r3, #0
 8003314:	d04f      	beq.n	80033b6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003316:	6878      	ldr	r0, [r7, #4]
 8003318:	f000 fe78 	bl	800400c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	689b      	ldr	r3, [r3, #8]
 8003322:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003326:	2b40      	cmp	r3, #64	@ 0x40
 8003328:	d141      	bne.n	80033ae <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	3308      	adds	r3, #8
 8003330:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003334:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003338:	e853 3f00 	ldrex	r3, [r3]
 800333c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003340:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003344:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003348:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	3308      	adds	r3, #8
 8003352:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003356:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800335a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800335e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003362:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003366:	e841 2300 	strex	r3, r2, [r1]
 800336a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800336e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003372:	2b00      	cmp	r3, #0
 8003374:	d1d9      	bne.n	800332a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800337a:	2b00      	cmp	r3, #0
 800337c:	d013      	beq.n	80033a6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003382:	4a13      	ldr	r2, [pc, #76]	@ (80033d0 <HAL_UART_IRQHandler+0x29c>)
 8003384:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800338a:	4618      	mov	r0, r3
 800338c:	f7fd fd03 	bl	8000d96 <HAL_DMA_Abort_IT>
 8003390:	4603      	mov	r3, r0
 8003392:	2b00      	cmp	r3, #0
 8003394:	d017      	beq.n	80033c6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800339a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800339c:	687a      	ldr	r2, [r7, #4]
 800339e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80033a0:	4610      	mov	r0, r2
 80033a2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033a4:	e00f      	b.n	80033c6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80033a6:	6878      	ldr	r0, [r7, #4]
 80033a8:	f000 f9c8 	bl	800373c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033ac:	e00b      	b.n	80033c6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80033ae:	6878      	ldr	r0, [r7, #4]
 80033b0:	f000 f9c4 	bl	800373c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033b4:	e007      	b.n	80033c6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80033b6:	6878      	ldr	r0, [r7, #4]
 80033b8:	f000 f9c0 	bl	800373c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2200      	movs	r2, #0
 80033c0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 80033c4:	e192      	b.n	80036ec <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033c6:	bf00      	nop
    return;
 80033c8:	e190      	b.n	80036ec <HAL_UART_IRQHandler+0x5b8>
 80033ca:	bf00      	nop
 80033cc:	04000120 	.word	0x04000120
 80033d0:	08004367 	.word	0x08004367

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80033d8:	2b01      	cmp	r3, #1
 80033da:	f040 814b 	bne.w	8003674 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80033de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80033e2:	f003 0310 	and.w	r3, r3, #16
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	f000 8144 	beq.w	8003674 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80033ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80033f0:	f003 0310 	and.w	r3, r3, #16
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	f000 813d 	beq.w	8003674 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	2210      	movs	r2, #16
 8003400:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	689b      	ldr	r3, [r3, #8]
 8003408:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800340c:	2b40      	cmp	r3, #64	@ 0x40
 800340e:	f040 80b5 	bne.w	800357c <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800341e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003422:	2b00      	cmp	r3, #0
 8003424:	f000 8164 	beq.w	80036f0 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800342e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003432:	429a      	cmp	r2, r3
 8003434:	f080 815c 	bcs.w	80036f0 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800343e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003446:	699b      	ldr	r3, [r3, #24]
 8003448:	2b20      	cmp	r3, #32
 800344a:	f000 8086 	beq.w	800355a <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003456:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800345a:	e853 3f00 	ldrex	r3, [r3]
 800345e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003462:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003466:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800346a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	461a      	mov	r2, r3
 8003474:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003478:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800347c:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003480:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003484:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003488:	e841 2300 	strex	r3, r2, [r1]
 800348c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003490:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003494:	2b00      	cmp	r3, #0
 8003496:	d1da      	bne.n	800344e <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	3308      	adds	r3, #8
 800349e:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034a0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80034a2:	e853 3f00 	ldrex	r3, [r3]
 80034a6:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80034a8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80034aa:	f023 0301 	bic.w	r3, r3, #1
 80034ae:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	3308      	adds	r3, #8
 80034b8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80034bc:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80034c0:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034c2:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80034c4:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80034c8:	e841 2300 	strex	r3, r2, [r1]
 80034cc:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80034ce:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d1e1      	bne.n	8003498 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	3308      	adds	r3, #8
 80034da:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034dc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80034de:	e853 3f00 	ldrex	r3, [r3]
 80034e2:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80034e4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80034e6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80034ea:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	3308      	adds	r3, #8
 80034f4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80034f8:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80034fa:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034fc:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80034fe:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003500:	e841 2300 	strex	r3, r2, [r1]
 8003504:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003506:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003508:	2b00      	cmp	r3, #0
 800350a:	d1e3      	bne.n	80034d4 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2220      	movs	r2, #32
 8003510:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2200      	movs	r2, #0
 8003518:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003520:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003522:	e853 3f00 	ldrex	r3, [r3]
 8003526:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003528:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800352a:	f023 0310 	bic.w	r3, r3, #16
 800352e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	461a      	mov	r2, r3
 8003538:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800353c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800353e:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003540:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003542:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003544:	e841 2300 	strex	r3, r2, [r1]
 8003548:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800354a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800354c:	2b00      	cmp	r3, #0
 800354e:	d1e4      	bne.n	800351a <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003554:	4618      	mov	r0, r3
 8003556:	f7fd fbe0 	bl	8000d1a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2202      	movs	r2, #2
 800355e:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800356c:	b29b      	uxth	r3, r3
 800356e:	1ad3      	subs	r3, r2, r3
 8003570:	b29b      	uxth	r3, r3
 8003572:	4619      	mov	r1, r3
 8003574:	6878      	ldr	r0, [r7, #4]
 8003576:	f000 f8eb 	bl	8003750 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800357a:	e0b9      	b.n	80036f0 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003588:	b29b      	uxth	r3, r3
 800358a:	1ad3      	subs	r3, r2, r3
 800358c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003596:	b29b      	uxth	r3, r3
 8003598:	2b00      	cmp	r3, #0
 800359a:	f000 80ab 	beq.w	80036f4 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 800359e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	f000 80a6 	beq.w	80036f4 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035b0:	e853 3f00 	ldrex	r3, [r3]
 80035b4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80035b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035b8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80035bc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	461a      	mov	r2, r3
 80035c6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80035ca:	647b      	str	r3, [r7, #68]	@ 0x44
 80035cc:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035ce:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80035d0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80035d2:	e841 2300 	strex	r3, r2, [r1]
 80035d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80035d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d1e4      	bne.n	80035a8 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	3308      	adds	r3, #8
 80035e4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035e8:	e853 3f00 	ldrex	r3, [r3]
 80035ec:	623b      	str	r3, [r7, #32]
   return(result);
 80035ee:	6a3b      	ldr	r3, [r7, #32]
 80035f0:	f023 0301 	bic.w	r3, r3, #1
 80035f4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	3308      	adds	r3, #8
 80035fe:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003602:	633a      	str	r2, [r7, #48]	@ 0x30
 8003604:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003606:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003608:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800360a:	e841 2300 	strex	r3, r2, [r1]
 800360e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003610:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003612:	2b00      	cmp	r3, #0
 8003614:	d1e3      	bne.n	80035de <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2220      	movs	r2, #32
 800361a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2200      	movs	r2, #0
 8003622:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2200      	movs	r2, #0
 8003628:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003630:	693b      	ldr	r3, [r7, #16]
 8003632:	e853 3f00 	ldrex	r3, [r3]
 8003636:	60fb      	str	r3, [r7, #12]
   return(result);
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	f023 0310 	bic.w	r3, r3, #16
 800363e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	461a      	mov	r2, r3
 8003648:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800364c:	61fb      	str	r3, [r7, #28]
 800364e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003650:	69b9      	ldr	r1, [r7, #24]
 8003652:	69fa      	ldr	r2, [r7, #28]
 8003654:	e841 2300 	strex	r3, r2, [r1]
 8003658:	617b      	str	r3, [r7, #20]
   return(result);
 800365a:	697b      	ldr	r3, [r7, #20]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d1e4      	bne.n	800362a <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2202      	movs	r2, #2
 8003664:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003666:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800366a:	4619      	mov	r1, r3
 800366c:	6878      	ldr	r0, [r7, #4]
 800366e:	f000 f86f 	bl	8003750 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003672:	e03f      	b.n	80036f4 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003674:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003678:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800367c:	2b00      	cmp	r3, #0
 800367e:	d00e      	beq.n	800369e <HAL_UART_IRQHandler+0x56a>
 8003680:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003684:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003688:	2b00      	cmp	r3, #0
 800368a:	d008      	beq.n	800369e <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8003694:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003696:	6878      	ldr	r0, [r7, #4]
 8003698:	f000 fea5 	bl	80043e6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800369c:	e02d      	b.n	80036fa <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800369e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80036a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d00e      	beq.n	80036c8 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80036aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80036ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d008      	beq.n	80036c8 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d01c      	beq.n	80036f8 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80036c2:	6878      	ldr	r0, [r7, #4]
 80036c4:	4798      	blx	r3
    }
    return;
 80036c6:	e017      	b.n	80036f8 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80036c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80036cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d012      	beq.n	80036fa <HAL_UART_IRQHandler+0x5c6>
 80036d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80036d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d00c      	beq.n	80036fa <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 80036e0:	6878      	ldr	r0, [r7, #4]
 80036e2:	f000 fe56 	bl	8004392 <UART_EndTransmit_IT>
    return;
 80036e6:	e008      	b.n	80036fa <HAL_UART_IRQHandler+0x5c6>
      return;
 80036e8:	bf00      	nop
 80036ea:	e006      	b.n	80036fa <HAL_UART_IRQHandler+0x5c6>
    return;
 80036ec:	bf00      	nop
 80036ee:	e004      	b.n	80036fa <HAL_UART_IRQHandler+0x5c6>
      return;
 80036f0:	bf00      	nop
 80036f2:	e002      	b.n	80036fa <HAL_UART_IRQHandler+0x5c6>
      return;
 80036f4:	bf00      	nop
 80036f6:	e000      	b.n	80036fa <HAL_UART_IRQHandler+0x5c6>
    return;
 80036f8:	bf00      	nop
  }

}
 80036fa:	37e8      	adds	r7, #232	@ 0xe8
 80036fc:	46bd      	mov	sp, r7
 80036fe:	bd80      	pop	{r7, pc}

08003700 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003700:	b480      	push	{r7}
 8003702:	b083      	sub	sp, #12
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003708:	bf00      	nop
 800370a:	370c      	adds	r7, #12
 800370c:	46bd      	mov	sp, r7
 800370e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003712:	4770      	bx	lr

08003714 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003714:	b480      	push	{r7}
 8003716:	b083      	sub	sp, #12
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800371c:	bf00      	nop
 800371e:	370c      	adds	r7, #12
 8003720:	46bd      	mov	sp, r7
 8003722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003726:	4770      	bx	lr

08003728 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003728:	b480      	push	{r7}
 800372a:	b083      	sub	sp, #12
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8003730:	bf00      	nop
 8003732:	370c      	adds	r7, #12
 8003734:	46bd      	mov	sp, r7
 8003736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373a:	4770      	bx	lr

0800373c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800373c:	b480      	push	{r7}
 800373e:	b083      	sub	sp, #12
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003744:	bf00      	nop
 8003746:	370c      	adds	r7, #12
 8003748:	46bd      	mov	sp, r7
 800374a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374e:	4770      	bx	lr

08003750 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003750:	b480      	push	{r7}
 8003752:	b083      	sub	sp, #12
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
 8003758:	460b      	mov	r3, r1
 800375a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800375c:	bf00      	nop
 800375e:	370c      	adds	r7, #12
 8003760:	46bd      	mov	sp, r7
 8003762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003766:	4770      	bx	lr

08003768 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b088      	sub	sp, #32
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003770:	2300      	movs	r3, #0
 8003772:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	689a      	ldr	r2, [r3, #8]
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	691b      	ldr	r3, [r3, #16]
 800377c:	431a      	orrs	r2, r3
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	695b      	ldr	r3, [r3, #20]
 8003782:	431a      	orrs	r2, r3
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	69db      	ldr	r3, [r3, #28]
 8003788:	4313      	orrs	r3, r2
 800378a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	681a      	ldr	r2, [r3, #0]
 8003792:	4b92      	ldr	r3, [pc, #584]	@ (80039dc <UART_SetConfig+0x274>)
 8003794:	4013      	ands	r3, r2
 8003796:	687a      	ldr	r2, [r7, #4]
 8003798:	6812      	ldr	r2, [r2, #0]
 800379a:	6979      	ldr	r1, [r7, #20]
 800379c:	430b      	orrs	r3, r1
 800379e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	68da      	ldr	r2, [r3, #12]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	430a      	orrs	r2, r1
 80037b4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	699b      	ldr	r3, [r3, #24]
 80037ba:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6a1b      	ldr	r3, [r3, #32]
 80037c0:	697a      	ldr	r2, [r7, #20]
 80037c2:	4313      	orrs	r3, r2
 80037c4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	689b      	ldr	r3, [r3, #8]
 80037cc:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	697a      	ldr	r2, [r7, #20]
 80037d6:	430a      	orrs	r2, r1
 80037d8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4a80      	ldr	r2, [pc, #512]	@ (80039e0 <UART_SetConfig+0x278>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d120      	bne.n	8003826 <UART_SetConfig+0xbe>
 80037e4:	4b7f      	ldr	r3, [pc, #508]	@ (80039e4 <UART_SetConfig+0x27c>)
 80037e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037e8:	f003 0303 	and.w	r3, r3, #3
 80037ec:	2b03      	cmp	r3, #3
 80037ee:	d817      	bhi.n	8003820 <UART_SetConfig+0xb8>
 80037f0:	a201      	add	r2, pc, #4	@ (adr r2, 80037f8 <UART_SetConfig+0x90>)
 80037f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037f6:	bf00      	nop
 80037f8:	08003809 	.word	0x08003809
 80037fc:	08003815 	.word	0x08003815
 8003800:	0800381b 	.word	0x0800381b
 8003804:	0800380f 	.word	0x0800380f
 8003808:	2301      	movs	r3, #1
 800380a:	77fb      	strb	r3, [r7, #31]
 800380c:	e0b5      	b.n	800397a <UART_SetConfig+0x212>
 800380e:	2302      	movs	r3, #2
 8003810:	77fb      	strb	r3, [r7, #31]
 8003812:	e0b2      	b.n	800397a <UART_SetConfig+0x212>
 8003814:	2304      	movs	r3, #4
 8003816:	77fb      	strb	r3, [r7, #31]
 8003818:	e0af      	b.n	800397a <UART_SetConfig+0x212>
 800381a:	2308      	movs	r3, #8
 800381c:	77fb      	strb	r3, [r7, #31]
 800381e:	e0ac      	b.n	800397a <UART_SetConfig+0x212>
 8003820:	2310      	movs	r3, #16
 8003822:	77fb      	strb	r3, [r7, #31]
 8003824:	e0a9      	b.n	800397a <UART_SetConfig+0x212>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4a6f      	ldr	r2, [pc, #444]	@ (80039e8 <UART_SetConfig+0x280>)
 800382c:	4293      	cmp	r3, r2
 800382e:	d124      	bne.n	800387a <UART_SetConfig+0x112>
 8003830:	4b6c      	ldr	r3, [pc, #432]	@ (80039e4 <UART_SetConfig+0x27c>)
 8003832:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003834:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003838:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800383c:	d011      	beq.n	8003862 <UART_SetConfig+0xfa>
 800383e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003842:	d817      	bhi.n	8003874 <UART_SetConfig+0x10c>
 8003844:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003848:	d011      	beq.n	800386e <UART_SetConfig+0x106>
 800384a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800384e:	d811      	bhi.n	8003874 <UART_SetConfig+0x10c>
 8003850:	2b00      	cmp	r3, #0
 8003852:	d003      	beq.n	800385c <UART_SetConfig+0xf4>
 8003854:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003858:	d006      	beq.n	8003868 <UART_SetConfig+0x100>
 800385a:	e00b      	b.n	8003874 <UART_SetConfig+0x10c>
 800385c:	2300      	movs	r3, #0
 800385e:	77fb      	strb	r3, [r7, #31]
 8003860:	e08b      	b.n	800397a <UART_SetConfig+0x212>
 8003862:	2302      	movs	r3, #2
 8003864:	77fb      	strb	r3, [r7, #31]
 8003866:	e088      	b.n	800397a <UART_SetConfig+0x212>
 8003868:	2304      	movs	r3, #4
 800386a:	77fb      	strb	r3, [r7, #31]
 800386c:	e085      	b.n	800397a <UART_SetConfig+0x212>
 800386e:	2308      	movs	r3, #8
 8003870:	77fb      	strb	r3, [r7, #31]
 8003872:	e082      	b.n	800397a <UART_SetConfig+0x212>
 8003874:	2310      	movs	r3, #16
 8003876:	77fb      	strb	r3, [r7, #31]
 8003878:	e07f      	b.n	800397a <UART_SetConfig+0x212>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4a5b      	ldr	r2, [pc, #364]	@ (80039ec <UART_SetConfig+0x284>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d124      	bne.n	80038ce <UART_SetConfig+0x166>
 8003884:	4b57      	ldr	r3, [pc, #348]	@ (80039e4 <UART_SetConfig+0x27c>)
 8003886:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003888:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 800388c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003890:	d011      	beq.n	80038b6 <UART_SetConfig+0x14e>
 8003892:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003896:	d817      	bhi.n	80038c8 <UART_SetConfig+0x160>
 8003898:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800389c:	d011      	beq.n	80038c2 <UART_SetConfig+0x15a>
 800389e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80038a2:	d811      	bhi.n	80038c8 <UART_SetConfig+0x160>
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d003      	beq.n	80038b0 <UART_SetConfig+0x148>
 80038a8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80038ac:	d006      	beq.n	80038bc <UART_SetConfig+0x154>
 80038ae:	e00b      	b.n	80038c8 <UART_SetConfig+0x160>
 80038b0:	2300      	movs	r3, #0
 80038b2:	77fb      	strb	r3, [r7, #31]
 80038b4:	e061      	b.n	800397a <UART_SetConfig+0x212>
 80038b6:	2302      	movs	r3, #2
 80038b8:	77fb      	strb	r3, [r7, #31]
 80038ba:	e05e      	b.n	800397a <UART_SetConfig+0x212>
 80038bc:	2304      	movs	r3, #4
 80038be:	77fb      	strb	r3, [r7, #31]
 80038c0:	e05b      	b.n	800397a <UART_SetConfig+0x212>
 80038c2:	2308      	movs	r3, #8
 80038c4:	77fb      	strb	r3, [r7, #31]
 80038c6:	e058      	b.n	800397a <UART_SetConfig+0x212>
 80038c8:	2310      	movs	r3, #16
 80038ca:	77fb      	strb	r3, [r7, #31]
 80038cc:	e055      	b.n	800397a <UART_SetConfig+0x212>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4a47      	ldr	r2, [pc, #284]	@ (80039f0 <UART_SetConfig+0x288>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d124      	bne.n	8003922 <UART_SetConfig+0x1ba>
 80038d8:	4b42      	ldr	r3, [pc, #264]	@ (80039e4 <UART_SetConfig+0x27c>)
 80038da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038dc:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80038e0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80038e4:	d011      	beq.n	800390a <UART_SetConfig+0x1a2>
 80038e6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80038ea:	d817      	bhi.n	800391c <UART_SetConfig+0x1b4>
 80038ec:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80038f0:	d011      	beq.n	8003916 <UART_SetConfig+0x1ae>
 80038f2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80038f6:	d811      	bhi.n	800391c <UART_SetConfig+0x1b4>
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d003      	beq.n	8003904 <UART_SetConfig+0x19c>
 80038fc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003900:	d006      	beq.n	8003910 <UART_SetConfig+0x1a8>
 8003902:	e00b      	b.n	800391c <UART_SetConfig+0x1b4>
 8003904:	2300      	movs	r3, #0
 8003906:	77fb      	strb	r3, [r7, #31]
 8003908:	e037      	b.n	800397a <UART_SetConfig+0x212>
 800390a:	2302      	movs	r3, #2
 800390c:	77fb      	strb	r3, [r7, #31]
 800390e:	e034      	b.n	800397a <UART_SetConfig+0x212>
 8003910:	2304      	movs	r3, #4
 8003912:	77fb      	strb	r3, [r7, #31]
 8003914:	e031      	b.n	800397a <UART_SetConfig+0x212>
 8003916:	2308      	movs	r3, #8
 8003918:	77fb      	strb	r3, [r7, #31]
 800391a:	e02e      	b.n	800397a <UART_SetConfig+0x212>
 800391c:	2310      	movs	r3, #16
 800391e:	77fb      	strb	r3, [r7, #31]
 8003920:	e02b      	b.n	800397a <UART_SetConfig+0x212>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4a33      	ldr	r2, [pc, #204]	@ (80039f4 <UART_SetConfig+0x28c>)
 8003928:	4293      	cmp	r3, r2
 800392a:	d124      	bne.n	8003976 <UART_SetConfig+0x20e>
 800392c:	4b2d      	ldr	r3, [pc, #180]	@ (80039e4 <UART_SetConfig+0x27c>)
 800392e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003930:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8003934:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003938:	d011      	beq.n	800395e <UART_SetConfig+0x1f6>
 800393a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800393e:	d817      	bhi.n	8003970 <UART_SetConfig+0x208>
 8003940:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003944:	d011      	beq.n	800396a <UART_SetConfig+0x202>
 8003946:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800394a:	d811      	bhi.n	8003970 <UART_SetConfig+0x208>
 800394c:	2b00      	cmp	r3, #0
 800394e:	d003      	beq.n	8003958 <UART_SetConfig+0x1f0>
 8003950:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003954:	d006      	beq.n	8003964 <UART_SetConfig+0x1fc>
 8003956:	e00b      	b.n	8003970 <UART_SetConfig+0x208>
 8003958:	2300      	movs	r3, #0
 800395a:	77fb      	strb	r3, [r7, #31]
 800395c:	e00d      	b.n	800397a <UART_SetConfig+0x212>
 800395e:	2302      	movs	r3, #2
 8003960:	77fb      	strb	r3, [r7, #31]
 8003962:	e00a      	b.n	800397a <UART_SetConfig+0x212>
 8003964:	2304      	movs	r3, #4
 8003966:	77fb      	strb	r3, [r7, #31]
 8003968:	e007      	b.n	800397a <UART_SetConfig+0x212>
 800396a:	2308      	movs	r3, #8
 800396c:	77fb      	strb	r3, [r7, #31]
 800396e:	e004      	b.n	800397a <UART_SetConfig+0x212>
 8003970:	2310      	movs	r3, #16
 8003972:	77fb      	strb	r3, [r7, #31]
 8003974:	e001      	b.n	800397a <UART_SetConfig+0x212>
 8003976:	2310      	movs	r3, #16
 8003978:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	69db      	ldr	r3, [r3, #28]
 800397e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003982:	d16b      	bne.n	8003a5c <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 8003984:	7ffb      	ldrb	r3, [r7, #31]
 8003986:	2b08      	cmp	r3, #8
 8003988:	d838      	bhi.n	80039fc <UART_SetConfig+0x294>
 800398a:	a201      	add	r2, pc, #4	@ (adr r2, 8003990 <UART_SetConfig+0x228>)
 800398c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003990:	080039b5 	.word	0x080039b5
 8003994:	080039bd 	.word	0x080039bd
 8003998:	080039c5 	.word	0x080039c5
 800399c:	080039fd 	.word	0x080039fd
 80039a0:	080039cb 	.word	0x080039cb
 80039a4:	080039fd 	.word	0x080039fd
 80039a8:	080039fd 	.word	0x080039fd
 80039ac:	080039fd 	.word	0x080039fd
 80039b0:	080039d3 	.word	0x080039d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80039b4:	f7fe fef4 	bl	80027a0 <HAL_RCC_GetPCLK1Freq>
 80039b8:	61b8      	str	r0, [r7, #24]
        break;
 80039ba:	e024      	b.n	8003a06 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80039bc:	f7fe ff12 	bl	80027e4 <HAL_RCC_GetPCLK2Freq>
 80039c0:	61b8      	str	r0, [r7, #24]
        break;
 80039c2:	e020      	b.n	8003a06 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80039c4:	4b0c      	ldr	r3, [pc, #48]	@ (80039f8 <UART_SetConfig+0x290>)
 80039c6:	61bb      	str	r3, [r7, #24]
        break;
 80039c8:	e01d      	b.n	8003a06 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80039ca:	f7fe fe89 	bl	80026e0 <HAL_RCC_GetSysClockFreq>
 80039ce:	61b8      	str	r0, [r7, #24]
        break;
 80039d0:	e019      	b.n	8003a06 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80039d2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80039d6:	61bb      	str	r3, [r7, #24]
        break;
 80039d8:	e015      	b.n	8003a06 <UART_SetConfig+0x29e>
 80039da:	bf00      	nop
 80039dc:	efff69f3 	.word	0xefff69f3
 80039e0:	40013800 	.word	0x40013800
 80039e4:	40021000 	.word	0x40021000
 80039e8:	40004400 	.word	0x40004400
 80039ec:	40004800 	.word	0x40004800
 80039f0:	40004c00 	.word	0x40004c00
 80039f4:	40005000 	.word	0x40005000
 80039f8:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 80039fc:	2300      	movs	r3, #0
 80039fe:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003a00:	2301      	movs	r3, #1
 8003a02:	77bb      	strb	r3, [r7, #30]
        break;
 8003a04:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003a06:	69bb      	ldr	r3, [r7, #24]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d073      	beq.n	8003af4 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003a0c:	69bb      	ldr	r3, [r7, #24]
 8003a0e:	005a      	lsls	r2, r3, #1
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	085b      	lsrs	r3, r3, #1
 8003a16:	441a      	add	r2, r3
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a20:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a22:	693b      	ldr	r3, [r7, #16]
 8003a24:	2b0f      	cmp	r3, #15
 8003a26:	d916      	bls.n	8003a56 <UART_SetConfig+0x2ee>
 8003a28:	693b      	ldr	r3, [r7, #16]
 8003a2a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a2e:	d212      	bcs.n	8003a56 <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003a30:	693b      	ldr	r3, [r7, #16]
 8003a32:	b29b      	uxth	r3, r3
 8003a34:	f023 030f 	bic.w	r3, r3, #15
 8003a38:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003a3a:	693b      	ldr	r3, [r7, #16]
 8003a3c:	085b      	lsrs	r3, r3, #1
 8003a3e:	b29b      	uxth	r3, r3
 8003a40:	f003 0307 	and.w	r3, r3, #7
 8003a44:	b29a      	uxth	r2, r3
 8003a46:	89fb      	ldrh	r3, [r7, #14]
 8003a48:	4313      	orrs	r3, r2
 8003a4a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	89fa      	ldrh	r2, [r7, #14]
 8003a52:	60da      	str	r2, [r3, #12]
 8003a54:	e04e      	b.n	8003af4 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8003a56:	2301      	movs	r3, #1
 8003a58:	77bb      	strb	r3, [r7, #30]
 8003a5a:	e04b      	b.n	8003af4 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003a5c:	7ffb      	ldrb	r3, [r7, #31]
 8003a5e:	2b08      	cmp	r3, #8
 8003a60:	d827      	bhi.n	8003ab2 <UART_SetConfig+0x34a>
 8003a62:	a201      	add	r2, pc, #4	@ (adr r2, 8003a68 <UART_SetConfig+0x300>)
 8003a64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a68:	08003a8d 	.word	0x08003a8d
 8003a6c:	08003a95 	.word	0x08003a95
 8003a70:	08003a9d 	.word	0x08003a9d
 8003a74:	08003ab3 	.word	0x08003ab3
 8003a78:	08003aa3 	.word	0x08003aa3
 8003a7c:	08003ab3 	.word	0x08003ab3
 8003a80:	08003ab3 	.word	0x08003ab3
 8003a84:	08003ab3 	.word	0x08003ab3
 8003a88:	08003aab 	.word	0x08003aab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a8c:	f7fe fe88 	bl	80027a0 <HAL_RCC_GetPCLK1Freq>
 8003a90:	61b8      	str	r0, [r7, #24]
        break;
 8003a92:	e013      	b.n	8003abc <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003a94:	f7fe fea6 	bl	80027e4 <HAL_RCC_GetPCLK2Freq>
 8003a98:	61b8      	str	r0, [r7, #24]
        break;
 8003a9a:	e00f      	b.n	8003abc <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a9c:	4b1b      	ldr	r3, [pc, #108]	@ (8003b0c <UART_SetConfig+0x3a4>)
 8003a9e:	61bb      	str	r3, [r7, #24]
        break;
 8003aa0:	e00c      	b.n	8003abc <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003aa2:	f7fe fe1d 	bl	80026e0 <HAL_RCC_GetSysClockFreq>
 8003aa6:	61b8      	str	r0, [r7, #24]
        break;
 8003aa8:	e008      	b.n	8003abc <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003aaa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003aae:	61bb      	str	r3, [r7, #24]
        break;
 8003ab0:	e004      	b.n	8003abc <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	77bb      	strb	r3, [r7, #30]
        break;
 8003aba:	bf00      	nop
    }

    if (pclk != 0U)
 8003abc:	69bb      	ldr	r3, [r7, #24]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d018      	beq.n	8003af4 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	085a      	lsrs	r2, r3, #1
 8003ac8:	69bb      	ldr	r3, [r7, #24]
 8003aca:	441a      	add	r2, r3
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ad4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003ad6:	693b      	ldr	r3, [r7, #16]
 8003ad8:	2b0f      	cmp	r3, #15
 8003ada:	d909      	bls.n	8003af0 <UART_SetConfig+0x388>
 8003adc:	693b      	ldr	r3, [r7, #16]
 8003ade:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ae2:	d205      	bcs.n	8003af0 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003ae4:	693b      	ldr	r3, [r7, #16]
 8003ae6:	b29a      	uxth	r2, r3
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	60da      	str	r2, [r3, #12]
 8003aee:	e001      	b.n	8003af4 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8003af0:	2301      	movs	r3, #1
 8003af2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2200      	movs	r2, #0
 8003af8:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2200      	movs	r2, #0
 8003afe:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003b00:	7fbb      	ldrb	r3, [r7, #30]
}
 8003b02:	4618      	mov	r0, r3
 8003b04:	3720      	adds	r7, #32
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bd80      	pop	{r7, pc}
 8003b0a:	bf00      	nop
 8003b0c:	007a1200 	.word	0x007a1200

08003b10 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003b10:	b480      	push	{r7}
 8003b12:	b083      	sub	sp, #12
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b1c:	f003 0308 	and.w	r3, r3, #8
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d00a      	beq.n	8003b3a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	685b      	ldr	r3, [r3, #4]
 8003b2a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	430a      	orrs	r2, r1
 8003b38:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b3e:	f003 0301 	and.w	r3, r3, #1
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d00a      	beq.n	8003b5c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	685b      	ldr	r3, [r3, #4]
 8003b4c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	430a      	orrs	r2, r1
 8003b5a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b60:	f003 0302 	and.w	r3, r3, #2
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d00a      	beq.n	8003b7e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	430a      	orrs	r2, r1
 8003b7c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b82:	f003 0304 	and.w	r3, r3, #4
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d00a      	beq.n	8003ba0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	430a      	orrs	r2, r1
 8003b9e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ba4:	f003 0310 	and.w	r3, r3, #16
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d00a      	beq.n	8003bc2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	689b      	ldr	r3, [r3, #8]
 8003bb2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	430a      	orrs	r2, r1
 8003bc0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bc6:	f003 0320 	and.w	r3, r3, #32
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d00a      	beq.n	8003be4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	689b      	ldr	r3, [r3, #8]
 8003bd4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	430a      	orrs	r2, r1
 8003be2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003be8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d01a      	beq.n	8003c26 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	430a      	orrs	r2, r1
 8003c04:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c0a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003c0e:	d10a      	bne.n	8003c26 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	430a      	orrs	r2, r1
 8003c24:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d00a      	beq.n	8003c48 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	430a      	orrs	r2, r1
 8003c46:	605a      	str	r2, [r3, #4]
  }
}
 8003c48:	bf00      	nop
 8003c4a:	370c      	adds	r7, #12
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c52:	4770      	bx	lr

08003c54 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b098      	sub	sp, #96	@ 0x60
 8003c58:	af02      	add	r7, sp, #8
 8003c5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2200      	movs	r2, #0
 8003c60:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003c64:	f7fc fe72 	bl	800094c <HAL_GetTick>
 8003c68:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f003 0308 	and.w	r3, r3, #8
 8003c74:	2b08      	cmp	r3, #8
 8003c76:	d12e      	bne.n	8003cd6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003c78:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003c7c:	9300      	str	r3, [sp, #0]
 8003c7e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c80:	2200      	movs	r2, #0
 8003c82:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003c86:	6878      	ldr	r0, [r7, #4]
 8003c88:	f000 f88c 	bl	8003da4 <UART_WaitOnFlagUntilTimeout>
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d021      	beq.n	8003cd6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c9a:	e853 3f00 	ldrex	r3, [r3]
 8003c9e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003ca0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ca2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003ca6:	653b      	str	r3, [r7, #80]	@ 0x50
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	461a      	mov	r2, r3
 8003cae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003cb0:	647b      	str	r3, [r7, #68]	@ 0x44
 8003cb2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cb4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003cb6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003cb8:	e841 2300 	strex	r3, r2, [r1]
 8003cbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003cbe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d1e6      	bne.n	8003c92 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2220      	movs	r2, #32
 8003cc8:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003cd2:	2303      	movs	r3, #3
 8003cd4:	e062      	b.n	8003d9c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f003 0304 	and.w	r3, r3, #4
 8003ce0:	2b04      	cmp	r3, #4
 8003ce2:	d149      	bne.n	8003d78 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ce4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003ce8:	9300      	str	r3, [sp, #0]
 8003cea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003cec:	2200      	movs	r2, #0
 8003cee:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003cf2:	6878      	ldr	r0, [r7, #4]
 8003cf4:	f000 f856 	bl	8003da4 <UART_WaitOnFlagUntilTimeout>
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d03c      	beq.n	8003d78 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d06:	e853 3f00 	ldrex	r3, [r3]
 8003d0a:	623b      	str	r3, [r7, #32]
   return(result);
 8003d0c:	6a3b      	ldr	r3, [r7, #32]
 8003d0e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003d12:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	461a      	mov	r2, r3
 8003d1a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003d1c:	633b      	str	r3, [r7, #48]	@ 0x30
 8003d1e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d20:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003d22:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003d24:	e841 2300 	strex	r3, r2, [r1]
 8003d28:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003d2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d1e6      	bne.n	8003cfe <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	3308      	adds	r3, #8
 8003d36:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d38:	693b      	ldr	r3, [r7, #16]
 8003d3a:	e853 3f00 	ldrex	r3, [r3]
 8003d3e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	f023 0301 	bic.w	r3, r3, #1
 8003d46:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	3308      	adds	r3, #8
 8003d4e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003d50:	61fa      	str	r2, [r7, #28]
 8003d52:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d54:	69b9      	ldr	r1, [r7, #24]
 8003d56:	69fa      	ldr	r2, [r7, #28]
 8003d58:	e841 2300 	strex	r3, r2, [r1]
 8003d5c:	617b      	str	r3, [r7, #20]
   return(result);
 8003d5e:	697b      	ldr	r3, [r7, #20]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d1e5      	bne.n	8003d30 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2220      	movs	r2, #32
 8003d68:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2200      	movs	r2, #0
 8003d70:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003d74:	2303      	movs	r3, #3
 8003d76:	e011      	b.n	8003d9c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2220      	movs	r2, #32
 8003d7c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2220      	movs	r2, #32
 8003d82:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2200      	movs	r2, #0
 8003d8a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2200      	movs	r2, #0
 8003d90:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2200      	movs	r2, #0
 8003d96:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003d9a:	2300      	movs	r3, #0
}
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	3758      	adds	r7, #88	@ 0x58
 8003da0:	46bd      	mov	sp, r7
 8003da2:	bd80      	pop	{r7, pc}

08003da4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b084      	sub	sp, #16
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	60f8      	str	r0, [r7, #12]
 8003dac:	60b9      	str	r1, [r7, #8]
 8003dae:	603b      	str	r3, [r7, #0]
 8003db0:	4613      	mov	r3, r2
 8003db2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003db4:	e04f      	b.n	8003e56 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003db6:	69bb      	ldr	r3, [r7, #24]
 8003db8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dbc:	d04b      	beq.n	8003e56 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003dbe:	f7fc fdc5 	bl	800094c <HAL_GetTick>
 8003dc2:	4602      	mov	r2, r0
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	1ad3      	subs	r3, r2, r3
 8003dc8:	69ba      	ldr	r2, [r7, #24]
 8003dca:	429a      	cmp	r2, r3
 8003dcc:	d302      	bcc.n	8003dd4 <UART_WaitOnFlagUntilTimeout+0x30>
 8003dce:	69bb      	ldr	r3, [r7, #24]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d101      	bne.n	8003dd8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003dd4:	2303      	movs	r3, #3
 8003dd6:	e04e      	b.n	8003e76 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f003 0304 	and.w	r3, r3, #4
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d037      	beq.n	8003e56 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003de6:	68bb      	ldr	r3, [r7, #8]
 8003de8:	2b80      	cmp	r3, #128	@ 0x80
 8003dea:	d034      	beq.n	8003e56 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003dec:	68bb      	ldr	r3, [r7, #8]
 8003dee:	2b40      	cmp	r3, #64	@ 0x40
 8003df0:	d031      	beq.n	8003e56 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	69db      	ldr	r3, [r3, #28]
 8003df8:	f003 0308 	and.w	r3, r3, #8
 8003dfc:	2b08      	cmp	r3, #8
 8003dfe:	d110      	bne.n	8003e22 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	2208      	movs	r2, #8
 8003e06:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003e08:	68f8      	ldr	r0, [r7, #12]
 8003e0a:	f000 f8ff 	bl	800400c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	2208      	movs	r2, #8
 8003e12:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	2200      	movs	r2, #0
 8003e1a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	e029      	b.n	8003e76 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	69db      	ldr	r3, [r3, #28]
 8003e28:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003e2c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003e30:	d111      	bne.n	8003e56 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003e3a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003e3c:	68f8      	ldr	r0, [r7, #12]
 8003e3e:	f000 f8e5 	bl	800400c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	2220      	movs	r2, #32
 8003e46:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8003e52:	2303      	movs	r3, #3
 8003e54:	e00f      	b.n	8003e76 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	69da      	ldr	r2, [r3, #28]
 8003e5c:	68bb      	ldr	r3, [r7, #8]
 8003e5e:	4013      	ands	r3, r2
 8003e60:	68ba      	ldr	r2, [r7, #8]
 8003e62:	429a      	cmp	r2, r3
 8003e64:	bf0c      	ite	eq
 8003e66:	2301      	moveq	r3, #1
 8003e68:	2300      	movne	r3, #0
 8003e6a:	b2db      	uxtb	r3, r3
 8003e6c:	461a      	mov	r2, r3
 8003e6e:	79fb      	ldrb	r3, [r7, #7]
 8003e70:	429a      	cmp	r2, r3
 8003e72:	d0a0      	beq.n	8003db6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003e74:	2300      	movs	r3, #0
}
 8003e76:	4618      	mov	r0, r3
 8003e78:	3710      	adds	r7, #16
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bd80      	pop	{r7, pc}
	...

08003e80 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b096      	sub	sp, #88	@ 0x58
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	60f8      	str	r0, [r7, #12]
 8003e88:	60b9      	str	r1, [r7, #8]
 8003e8a:	4613      	mov	r3, r2
 8003e8c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	68ba      	ldr	r2, [r7, #8]
 8003e92:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	88fa      	ldrh	r2, [r7, #6]
 8003e98:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	2222      	movs	r2, #34	@ 0x22
 8003ea8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if (huart->hdmarx != NULL)
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d028      	beq.n	8003f06 <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003eb8:	4a3e      	ldr	r2, [pc, #248]	@ (8003fb4 <UART_Start_Receive_DMA+0x134>)
 8003eba:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ec0:	4a3d      	ldr	r2, [pc, #244]	@ (8003fb8 <UART_Start_Receive_DMA+0x138>)
 8003ec2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ec8:	4a3c      	ldr	r2, [pc, #240]	@ (8003fbc <UART_Start_Receive_DMA+0x13c>)
 8003eca:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	3324      	adds	r3, #36	@ 0x24
 8003ede:	4619      	mov	r1, r3
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ee4:	461a      	mov	r2, r3
 8003ee6:	88fb      	ldrh	r3, [r7, #6]
 8003ee8:	f7fc feb8 	bl	8000c5c <HAL_DMA_Start_IT>
 8003eec:	4603      	mov	r3, r0
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d009      	beq.n	8003f06 <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	2210      	movs	r2, #16
 8003ef6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	2220      	movs	r2, #32
 8003efe:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      return HAL_ERROR;
 8003f02:	2301      	movs	r3, #1
 8003f04:	e051      	b.n	8003faa <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	691b      	ldr	r3, [r3, #16]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d018      	beq.n	8003f40 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f14:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f16:	e853 3f00 	ldrex	r3, [r3]
 8003f1a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003f1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f1e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f22:	657b      	str	r3, [r7, #84]	@ 0x54
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	461a      	mov	r2, r3
 8003f2a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f2c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003f2e:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f30:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8003f32:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003f34:	e841 2300 	strex	r3, r2, [r1]
 8003f38:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8003f3a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d1e6      	bne.n	8003f0e <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	3308      	adds	r3, #8
 8003f46:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f4a:	e853 3f00 	ldrex	r3, [r3]
 8003f4e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003f50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f52:	f043 0301 	orr.w	r3, r3, #1
 8003f56:	653b      	str	r3, [r7, #80]	@ 0x50
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	3308      	adds	r3, #8
 8003f5e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8003f60:	637a      	str	r2, [r7, #52]	@ 0x34
 8003f62:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f64:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003f66:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003f68:	e841 2300 	strex	r3, r2, [r1]
 8003f6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8003f6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d1e5      	bne.n	8003f40 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	3308      	adds	r3, #8
 8003f7a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f7c:	697b      	ldr	r3, [r7, #20]
 8003f7e:	e853 3f00 	ldrex	r3, [r3]
 8003f82:	613b      	str	r3, [r7, #16]
   return(result);
 8003f84:	693b      	ldr	r3, [r7, #16]
 8003f86:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003f8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	3308      	adds	r3, #8
 8003f92:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003f94:	623a      	str	r2, [r7, #32]
 8003f96:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f98:	69f9      	ldr	r1, [r7, #28]
 8003f9a:	6a3a      	ldr	r2, [r7, #32]
 8003f9c:	e841 2300 	strex	r3, r2, [r1]
 8003fa0:	61bb      	str	r3, [r7, #24]
   return(result);
 8003fa2:	69bb      	ldr	r3, [r7, #24]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d1e5      	bne.n	8003f74 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 8003fa8:	2300      	movs	r3, #0
}
 8003faa:	4618      	mov	r0, r3
 8003fac:	3758      	adds	r7, #88	@ 0x58
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	bd80      	pop	{r7, pc}
 8003fb2:	bf00      	nop
 8003fb4:	08004185 	.word	0x08004185
 8003fb8:	080042ab 	.word	0x080042ab
 8003fbc:	080042e9 	.word	0x080042e9

08003fc0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003fc0:	b480      	push	{r7}
 8003fc2:	b089      	sub	sp, #36	@ 0x24
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	e853 3f00 	ldrex	r3, [r3]
 8003fd4:	60bb      	str	r3, [r7, #8]
   return(result);
 8003fd6:	68bb      	ldr	r3, [r7, #8]
 8003fd8:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8003fdc:	61fb      	str	r3, [r7, #28]
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	461a      	mov	r2, r3
 8003fe4:	69fb      	ldr	r3, [r7, #28]
 8003fe6:	61bb      	str	r3, [r7, #24]
 8003fe8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fea:	6979      	ldr	r1, [r7, #20]
 8003fec:	69ba      	ldr	r2, [r7, #24]
 8003fee:	e841 2300 	strex	r3, r2, [r1]
 8003ff2:	613b      	str	r3, [r7, #16]
   return(result);
 8003ff4:	693b      	ldr	r3, [r7, #16]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d1e6      	bne.n	8003fc8 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2220      	movs	r2, #32
 8003ffe:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8004000:	bf00      	nop
 8004002:	3724      	adds	r7, #36	@ 0x24
 8004004:	46bd      	mov	sp, r7
 8004006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400a:	4770      	bx	lr

0800400c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800400c:	b480      	push	{r7}
 800400e:	b095      	sub	sp, #84	@ 0x54
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800401a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800401c:	e853 3f00 	ldrex	r3, [r3]
 8004020:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004022:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004024:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004028:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	461a      	mov	r2, r3
 8004030:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004032:	643b      	str	r3, [r7, #64]	@ 0x40
 8004034:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004036:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004038:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800403a:	e841 2300 	strex	r3, r2, [r1]
 800403e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004040:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004042:	2b00      	cmp	r3, #0
 8004044:	d1e6      	bne.n	8004014 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	3308      	adds	r3, #8
 800404c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800404e:	6a3b      	ldr	r3, [r7, #32]
 8004050:	e853 3f00 	ldrex	r3, [r3]
 8004054:	61fb      	str	r3, [r7, #28]
   return(result);
 8004056:	69fb      	ldr	r3, [r7, #28]
 8004058:	f023 0301 	bic.w	r3, r3, #1
 800405c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	3308      	adds	r3, #8
 8004064:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004066:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004068:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800406a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800406c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800406e:	e841 2300 	strex	r3, r2, [r1]
 8004072:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004074:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004076:	2b00      	cmp	r3, #0
 8004078:	d1e5      	bne.n	8004046 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800407e:	2b01      	cmp	r3, #1
 8004080:	d118      	bne.n	80040b4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	e853 3f00 	ldrex	r3, [r3]
 800408e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004090:	68bb      	ldr	r3, [r7, #8]
 8004092:	f023 0310 	bic.w	r3, r3, #16
 8004096:	647b      	str	r3, [r7, #68]	@ 0x44
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	461a      	mov	r2, r3
 800409e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80040a0:	61bb      	str	r3, [r7, #24]
 80040a2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040a4:	6979      	ldr	r1, [r7, #20]
 80040a6:	69ba      	ldr	r2, [r7, #24]
 80040a8:	e841 2300 	strex	r3, r2, [r1]
 80040ac:	613b      	str	r3, [r7, #16]
   return(result);
 80040ae:	693b      	ldr	r3, [r7, #16]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d1e6      	bne.n	8004082 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2220      	movs	r2, #32
 80040b8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2200      	movs	r2, #0
 80040c0:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2200      	movs	r2, #0
 80040c6:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80040c8:	bf00      	nop
 80040ca:	3754      	adds	r7, #84	@ 0x54
 80040cc:	46bd      	mov	sp, r7
 80040ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d2:	4770      	bx	lr

080040d4 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b090      	sub	sp, #64	@ 0x40
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040e0:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	699b      	ldr	r3, [r3, #24]
 80040e6:	2b20      	cmp	r3, #32
 80040e8:	d037      	beq.n	800415a <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 80040ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80040ec:	2200      	movs	r2, #0
 80040ee:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80040f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	3308      	adds	r3, #8
 80040f8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040fc:	e853 3f00 	ldrex	r3, [r3]
 8004100:	623b      	str	r3, [r7, #32]
   return(result);
 8004102:	6a3b      	ldr	r3, [r7, #32]
 8004104:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004108:	63bb      	str	r3, [r7, #56]	@ 0x38
 800410a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	3308      	adds	r3, #8
 8004110:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004112:	633a      	str	r2, [r7, #48]	@ 0x30
 8004114:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004116:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004118:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800411a:	e841 2300 	strex	r3, r2, [r1]
 800411e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004120:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004122:	2b00      	cmp	r3, #0
 8004124:	d1e5      	bne.n	80040f2 <UART_DMATransmitCplt+0x1e>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004126:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800412c:	693b      	ldr	r3, [r7, #16]
 800412e:	e853 3f00 	ldrex	r3, [r3]
 8004132:	60fb      	str	r3, [r7, #12]
   return(result);
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800413a:	637b      	str	r3, [r7, #52]	@ 0x34
 800413c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	461a      	mov	r2, r3
 8004142:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004144:	61fb      	str	r3, [r7, #28]
 8004146:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004148:	69b9      	ldr	r1, [r7, #24]
 800414a:	69fa      	ldr	r2, [r7, #28]
 800414c:	e841 2300 	strex	r3, r2, [r1]
 8004150:	617b      	str	r3, [r7, #20]
   return(result);
 8004152:	697b      	ldr	r3, [r7, #20]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d1e6      	bne.n	8004126 <UART_DMATransmitCplt+0x52>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004158:	e002      	b.n	8004160 <UART_DMATransmitCplt+0x8c>
    HAL_UART_TxCpltCallback(huart);
 800415a:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800415c:	f7ff fad0 	bl	8003700 <HAL_UART_TxCpltCallback>
}
 8004160:	bf00      	nop
 8004162:	3740      	adds	r7, #64	@ 0x40
 8004164:	46bd      	mov	sp, r7
 8004166:	bd80      	pop	{r7, pc}

08004168 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b084      	sub	sp, #16
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004174:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8004176:	68f8      	ldr	r0, [r7, #12]
 8004178:	f7ff facc 	bl	8003714 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800417c:	bf00      	nop
 800417e:	3710      	adds	r7, #16
 8004180:	46bd      	mov	sp, r7
 8004182:	bd80      	pop	{r7, pc}

08004184 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b09c      	sub	sp, #112	@ 0x70
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004190:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	699b      	ldr	r3, [r3, #24]
 8004196:	2b20      	cmp	r3, #32
 8004198:	d071      	beq.n	800427e <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 800419a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800419c:	2200      	movs	r2, #0
 800419e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80041a2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041a8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80041aa:	e853 3f00 	ldrex	r3, [r3]
 80041ae:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80041b0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80041b2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80041b6:	66bb      	str	r3, [r7, #104]	@ 0x68
 80041b8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	461a      	mov	r2, r3
 80041be:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80041c0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80041c2:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041c4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80041c6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80041c8:	e841 2300 	strex	r3, r2, [r1]
 80041cc:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80041ce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d1e6      	bne.n	80041a2 <UART_DMAReceiveCplt+0x1e>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041d4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	3308      	adds	r3, #8
 80041da:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041de:	e853 3f00 	ldrex	r3, [r3]
 80041e2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80041e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041e6:	f023 0301 	bic.w	r3, r3, #1
 80041ea:	667b      	str	r3, [r7, #100]	@ 0x64
 80041ec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	3308      	adds	r3, #8
 80041f2:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80041f4:	647a      	str	r2, [r7, #68]	@ 0x44
 80041f6:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041f8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80041fa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80041fc:	e841 2300 	strex	r3, r2, [r1]
 8004200:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004202:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004204:	2b00      	cmp	r3, #0
 8004206:	d1e5      	bne.n	80041d4 <UART_DMAReceiveCplt+0x50>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004208:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	3308      	adds	r3, #8
 800420e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004210:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004212:	e853 3f00 	ldrex	r3, [r3]
 8004216:	623b      	str	r3, [r7, #32]
   return(result);
 8004218:	6a3b      	ldr	r3, [r7, #32]
 800421a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800421e:	663b      	str	r3, [r7, #96]	@ 0x60
 8004220:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	3308      	adds	r3, #8
 8004226:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004228:	633a      	str	r2, [r7, #48]	@ 0x30
 800422a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800422c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800422e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004230:	e841 2300 	strex	r3, r2, [r1]
 8004234:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004236:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004238:	2b00      	cmp	r3, #0
 800423a:	d1e5      	bne.n	8004208 <UART_DMAReceiveCplt+0x84>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800423c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800423e:	2220      	movs	r2, #32
 8004240:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004244:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004246:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004248:	2b01      	cmp	r3, #1
 800424a:	d118      	bne.n	800427e <UART_DMAReceiveCplt+0xfa>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800424c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004252:	693b      	ldr	r3, [r7, #16]
 8004254:	e853 3f00 	ldrex	r3, [r3]
 8004258:	60fb      	str	r3, [r7, #12]
   return(result);
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	f023 0310 	bic.w	r3, r3, #16
 8004260:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004262:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	461a      	mov	r2, r3
 8004268:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800426a:	61fb      	str	r3, [r7, #28]
 800426c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800426e:	69b9      	ldr	r1, [r7, #24]
 8004270:	69fa      	ldr	r2, [r7, #28]
 8004272:	e841 2300 	strex	r3, r2, [r1]
 8004276:	617b      	str	r3, [r7, #20]
   return(result);
 8004278:	697b      	ldr	r3, [r7, #20]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d1e6      	bne.n	800424c <UART_DMAReceiveCplt+0xc8>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800427e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004280:	2200      	movs	r2, #0
 8004282:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004284:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004286:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004288:	2b01      	cmp	r3, #1
 800428a:	d107      	bne.n	800429c <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800428c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800428e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004292:	4619      	mov	r1, r3
 8004294:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8004296:	f7ff fa5b 	bl	8003750 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800429a:	e002      	b.n	80042a2 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800429c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800429e:	f7fc f873 	bl	8000388 <HAL_UART_RxCpltCallback>
}
 80042a2:	bf00      	nop
 80042a4:	3770      	adds	r7, #112	@ 0x70
 80042a6:	46bd      	mov	sp, r7
 80042a8:	bd80      	pop	{r7, pc}

080042aa <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80042aa:	b580      	push	{r7, lr}
 80042ac:	b084      	sub	sp, #16
 80042ae:	af00      	add	r7, sp, #0
 80042b0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042b6:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	2201      	movs	r2, #1
 80042bc:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80042c2:	2b01      	cmp	r3, #1
 80042c4:	d109      	bne.n	80042da <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80042cc:	085b      	lsrs	r3, r3, #1
 80042ce:	b29b      	uxth	r3, r3
 80042d0:	4619      	mov	r1, r3
 80042d2:	68f8      	ldr	r0, [r7, #12]
 80042d4:	f7ff fa3c 	bl	8003750 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80042d8:	e002      	b.n	80042e0 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 80042da:	68f8      	ldr	r0, [r7, #12]
 80042dc:	f7ff fa24 	bl	8003728 <HAL_UART_RxHalfCpltCallback>
}
 80042e0:	bf00      	nop
 80042e2:	3710      	adds	r7, #16
 80042e4:	46bd      	mov	sp, r7
 80042e6:	bd80      	pop	{r7, pc}

080042e8 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b086      	sub	sp, #24
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042f4:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80042f6:	697b      	ldr	r3, [r7, #20]
 80042f8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80042fa:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80042fc:	697b      	ldr	r3, [r7, #20]
 80042fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004302:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8004304:	697b      	ldr	r3, [r7, #20]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	689b      	ldr	r3, [r3, #8]
 800430a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800430e:	2b80      	cmp	r3, #128	@ 0x80
 8004310:	d109      	bne.n	8004326 <UART_DMAError+0x3e>
 8004312:	693b      	ldr	r3, [r7, #16]
 8004314:	2b21      	cmp	r3, #33	@ 0x21
 8004316:	d106      	bne.n	8004326 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8004318:	697b      	ldr	r3, [r7, #20]
 800431a:	2200      	movs	r2, #0
 800431c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 8004320:	6978      	ldr	r0, [r7, #20]
 8004322:	f7ff fe4d 	bl	8003fc0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8004326:	697b      	ldr	r3, [r7, #20]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	689b      	ldr	r3, [r3, #8]
 800432c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004330:	2b40      	cmp	r3, #64	@ 0x40
 8004332:	d109      	bne.n	8004348 <UART_DMAError+0x60>
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	2b22      	cmp	r3, #34	@ 0x22
 8004338:	d106      	bne.n	8004348 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800433a:	697b      	ldr	r3, [r7, #20]
 800433c:	2200      	movs	r2, #0
 800433e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 8004342:	6978      	ldr	r0, [r7, #20]
 8004344:	f7ff fe62 	bl	800400c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004348:	697b      	ldr	r3, [r7, #20]
 800434a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800434e:	f043 0210 	orr.w	r2, r3, #16
 8004352:	697b      	ldr	r3, [r7, #20]
 8004354:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004358:	6978      	ldr	r0, [r7, #20]
 800435a:	f7ff f9ef 	bl	800373c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800435e:	bf00      	nop
 8004360:	3718      	adds	r7, #24
 8004362:	46bd      	mov	sp, r7
 8004364:	bd80      	pop	{r7, pc}

08004366 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004366:	b580      	push	{r7, lr}
 8004368:	b084      	sub	sp, #16
 800436a:	af00      	add	r7, sp, #0
 800436c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004372:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	2200      	movs	r2, #0
 8004378:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	2200      	movs	r2, #0
 8004380:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004384:	68f8      	ldr	r0, [r7, #12]
 8004386:	f7ff f9d9 	bl	800373c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800438a:	bf00      	nop
 800438c:	3710      	adds	r7, #16
 800438e:	46bd      	mov	sp, r7
 8004390:	bd80      	pop	{r7, pc}

08004392 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004392:	b580      	push	{r7, lr}
 8004394:	b088      	sub	sp, #32
 8004396:	af00      	add	r7, sp, #0
 8004398:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	e853 3f00 	ldrex	r3, [r3]
 80043a6:	60bb      	str	r3, [r7, #8]
   return(result);
 80043a8:	68bb      	ldr	r3, [r7, #8]
 80043aa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80043ae:	61fb      	str	r3, [r7, #28]
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	461a      	mov	r2, r3
 80043b6:	69fb      	ldr	r3, [r7, #28]
 80043b8:	61bb      	str	r3, [r7, #24]
 80043ba:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043bc:	6979      	ldr	r1, [r7, #20]
 80043be:	69ba      	ldr	r2, [r7, #24]
 80043c0:	e841 2300 	strex	r3, r2, [r1]
 80043c4:	613b      	str	r3, [r7, #16]
   return(result);
 80043c6:	693b      	ldr	r3, [r7, #16]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d1e6      	bne.n	800439a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2220      	movs	r2, #32
 80043d0:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2200      	movs	r2, #0
 80043d6:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80043d8:	6878      	ldr	r0, [r7, #4]
 80043da:	f7ff f991 	bl	8003700 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80043de:	bf00      	nop
 80043e0:	3720      	adds	r7, #32
 80043e2:	46bd      	mov	sp, r7
 80043e4:	bd80      	pop	{r7, pc}

080043e6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80043e6:	b480      	push	{r7}
 80043e8:	b083      	sub	sp, #12
 80043ea:	af00      	add	r7, sp, #0
 80043ec:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80043ee:	bf00      	nop
 80043f0:	370c      	adds	r7, #12
 80043f2:	46bd      	mov	sp, r7
 80043f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f8:	4770      	bx	lr

080043fa <memset>:
 80043fa:	4402      	add	r2, r0
 80043fc:	4603      	mov	r3, r0
 80043fe:	4293      	cmp	r3, r2
 8004400:	d100      	bne.n	8004404 <memset+0xa>
 8004402:	4770      	bx	lr
 8004404:	f803 1b01 	strb.w	r1, [r3], #1
 8004408:	e7f9      	b.n	80043fe <memset+0x4>
	...

0800440c <__libc_init_array>:
 800440c:	b570      	push	{r4, r5, r6, lr}
 800440e:	4d0d      	ldr	r5, [pc, #52]	@ (8004444 <__libc_init_array+0x38>)
 8004410:	4c0d      	ldr	r4, [pc, #52]	@ (8004448 <__libc_init_array+0x3c>)
 8004412:	1b64      	subs	r4, r4, r5
 8004414:	10a4      	asrs	r4, r4, #2
 8004416:	2600      	movs	r6, #0
 8004418:	42a6      	cmp	r6, r4
 800441a:	d109      	bne.n	8004430 <__libc_init_array+0x24>
 800441c:	4d0b      	ldr	r5, [pc, #44]	@ (800444c <__libc_init_array+0x40>)
 800441e:	4c0c      	ldr	r4, [pc, #48]	@ (8004450 <__libc_init_array+0x44>)
 8004420:	f000 f818 	bl	8004454 <_init>
 8004424:	1b64      	subs	r4, r4, r5
 8004426:	10a4      	asrs	r4, r4, #2
 8004428:	2600      	movs	r6, #0
 800442a:	42a6      	cmp	r6, r4
 800442c:	d105      	bne.n	800443a <__libc_init_array+0x2e>
 800442e:	bd70      	pop	{r4, r5, r6, pc}
 8004430:	f855 3b04 	ldr.w	r3, [r5], #4
 8004434:	4798      	blx	r3
 8004436:	3601      	adds	r6, #1
 8004438:	e7ee      	b.n	8004418 <__libc_init_array+0xc>
 800443a:	f855 3b04 	ldr.w	r3, [r5], #4
 800443e:	4798      	blx	r3
 8004440:	3601      	adds	r6, #1
 8004442:	e7f2      	b.n	800442a <__libc_init_array+0x1e>
 8004444:	080044a4 	.word	0x080044a4
 8004448:	080044a4 	.word	0x080044a4
 800444c:	080044a4 	.word	0x080044a4
 8004450:	080044a8 	.word	0x080044a8

08004454 <_init>:
 8004454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004456:	bf00      	nop
 8004458:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800445a:	bc08      	pop	{r3}
 800445c:	469e      	mov	lr, r3
 800445e:	4770      	bx	lr

08004460 <_fini>:
 8004460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004462:	bf00      	nop
 8004464:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004466:	bc08      	pop	{r3}
 8004468:	469e      	mov	lr, r3
 800446a:	4770      	bx	lr
