
ProcessingSpeedTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000612c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003f0  080062d0  080062d0  000072d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080066c0  080066c0  000081d4  2**0
                  CONTENTS
  4 .ARM          00000008  080066c0  080066c0  000076c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080066c8  080066c8  000081d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080066c8  080066c8  000076c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080066cc  080066cc  000076cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  080066d0  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000081d4  2**0
                  CONTENTS
 10 .bss          000001f8  200001d4  200001d4  000081d4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200003cc  200003cc  000081d4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000081d4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000928a  00000000  00000000  00008204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001711  00000000  00000000  0001148e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000740  00000000  00000000  00012ba0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000580  00000000  00000000  000132e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002089b  00000000  00000000  00013860  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a69b  00000000  00000000  000340fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c2340  00000000  00000000  0003e796  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00100ad6  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002c6c  00000000  00000000  00100b1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000087  00000000  00000000  00103788  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d4 	.word	0x200001d4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080062b4 	.word	0x080062b4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001d8 	.word	0x200001d8
 80001dc:	080062b4 	.word	0x080062b4

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <func1>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void func1(){
 8000bb8:	b480      	push	{r7}
 8000bba:	b083      	sub	sp, #12
 8000bbc:	af00      	add	r7, sp, #0
	int a = 0;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	607b      	str	r3, [r7, #4]
	for (int i=0; i<pow(10,5); i++){
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	603b      	str	r3, [r7, #0]
 8000bc6:	e005      	b.n	8000bd4 <func1+0x1c>
		a++;
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	3301      	adds	r3, #1
 8000bcc:	607b      	str	r3, [r7, #4]
	for (int i=0; i<pow(10,5); i++){
 8000bce:	683b      	ldr	r3, [r7, #0]
 8000bd0:	3301      	adds	r3, #1
 8000bd2:	603b      	str	r3, [r7, #0]
 8000bd4:	683b      	ldr	r3, [r7, #0]
 8000bd6:	4a05      	ldr	r2, [pc, #20]	@ (8000bec <func1+0x34>)
 8000bd8:	4293      	cmp	r3, r2
 8000bda:	ddf5      	ble.n	8000bc8 <func1+0x10>
	}
}
 8000bdc:	bf00      	nop
 8000bde:	bf00      	nop
 8000be0:	370c      	adds	r7, #12
 8000be2:	46bd      	mov	sp, r7
 8000be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be8:	4770      	bx	lr
 8000bea:	bf00      	nop
 8000bec:	0001869f 	.word	0x0001869f

08000bf0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b086      	sub	sp, #24
 8000bf4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bf6:	f000 fa9d 	bl	8001134 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bfa:	f000 f845 	bl	8000c88 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bfe:	f000 f8d1 	bl	8000da4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000c02:	f000 f89f 	bl	8000d44 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  uint32_t start_tick = HAL_GetTick();
 8000c06:	f000 faef 	bl	80011e8 <HAL_GetTick>
 8000c0a:	6138      	str	r0, [r7, #16]
  int nr_iter = 100;
 8000c0c:	2364      	movs	r3, #100	@ 0x64
 8000c0e:	60fb      	str	r3, [r7, #12]
  for (int i=0; i<nr_iter; i++){
 8000c10:	2300      	movs	r3, #0
 8000c12:	617b      	str	r3, [r7, #20]
 8000c14:	e004      	b.n	8000c20 <main+0x30>
	  func1();
 8000c16:	f7ff ffcf 	bl	8000bb8 <func1>
  for (int i=0; i<nr_iter; i++){
 8000c1a:	697b      	ldr	r3, [r7, #20]
 8000c1c:	3301      	adds	r3, #1
 8000c1e:	617b      	str	r3, [r7, #20]
 8000c20:	697a      	ldr	r2, [r7, #20]
 8000c22:	68fb      	ldr	r3, [r7, #12]
 8000c24:	429a      	cmp	r2, r3
 8000c26:	dbf6      	blt.n	8000c16 <main+0x26>
  }
  uint32_t end_tick = HAL_GetTick();
 8000c28:	f000 fade 	bl	80011e8 <HAL_GetTick>
 8000c2c:	60b8      	str	r0, [r7, #8]
  double time = (end_tick - start_tick)/nr_iter;
 8000c2e:	68ba      	ldr	r2, [r7, #8]
 8000c30:	693b      	ldr	r3, [r7, #16]
 8000c32:	1ad2      	subs	r2, r2, r3
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f7ff fc6a 	bl	8000514 <__aeabi_ui2d>
 8000c40:	4602      	mov	r2, r0
 8000c42:	460b      	mov	r3, r1
 8000c44:	e9c7 2300 	strd	r2, r3, [r7]
  printf("\rProcessing speed = %.2f [MHz]\n\r", (double)HAL_RCC_GetSysClockFreq()/(uint32_t)pow(10,6));
 8000c48:	f001 ff1a 	bl	8002a80 <HAL_RCC_GetSysClockFreq>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f7ff fc60 	bl	8000514 <__aeabi_ui2d>
 8000c54:	a30a      	add	r3, pc, #40	@ (adr r3, 8000c80 <main+0x90>)
 8000c56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c5a:	f7ff fdff 	bl	800085c <__aeabi_ddiv>
 8000c5e:	4602      	mov	r2, r0
 8000c60:	460b      	mov	r3, r1
 8000c62:	4805      	ldr	r0, [pc, #20]	@ (8000c78 <main+0x88>)
 8000c64:	f003 fbae 	bl	80043c4 <iprintf>
  printf("Execution time = %.2f [ms]\n\r", time);
 8000c68:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000c6c:	4803      	ldr	r0, [pc, #12]	@ (8000c7c <main+0x8c>)
 8000c6e:	f003 fba9 	bl	80043c4 <iprintf>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000c72:	bf00      	nop
 8000c74:	e7fd      	b.n	8000c72 <main+0x82>
 8000c76:	bf00      	nop
 8000c78:	080062d0 	.word	0x080062d0
 8000c7c:	080062f4 	.word	0x080062f4
 8000c80:	00000000 	.word	0x00000000
 8000c84:	412e8480 	.word	0x412e8480

08000c88 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b0a6      	sub	sp, #152	@ 0x98
 8000c8c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c8e:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000c92:	2228      	movs	r2, #40	@ 0x28
 8000c94:	2100      	movs	r1, #0
 8000c96:	4618      	mov	r0, r3
 8000c98:	f003 fbe9 	bl	800446e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c9c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	601a      	str	r2, [r3, #0]
 8000ca4:	605a      	str	r2, [r3, #4]
 8000ca6:	609a      	str	r2, [r3, #8]
 8000ca8:	60da      	str	r2, [r3, #12]
 8000caa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000cac:	1d3b      	adds	r3, r7, #4
 8000cae:	2258      	movs	r2, #88	@ 0x58
 8000cb0:	2100      	movs	r1, #0
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	f003 fbdb 	bl	800446e <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000cb8:	2302      	movs	r3, #2
 8000cba:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000cbc:	2301      	movs	r3, #1
 8000cbe:	67fb      	str	r3, [r7, #124]	@ 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000cc0:	2310      	movs	r3, #16
 8000cc2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cc6:	2302      	movs	r3, #2
 8000cc8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ccc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000cd0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000cd4:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000cd8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ce2:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f000 fcfa 	bl	80016e0 <HAL_RCC_OscConfig>
 8000cec:	4603      	mov	r3, r0
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d001      	beq.n	8000cf6 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000cf2:	f000 f881 	bl	8000df8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cf6:	230f      	movs	r3, #15
 8000cf8:	65fb      	str	r3, [r7, #92]	@ 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cfa:	2302      	movs	r3, #2
 8000cfc:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d02:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000d06:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	66fb      	str	r3, [r7, #108]	@ 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d0c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000d10:	2102      	movs	r1, #2
 8000d12:	4618      	mov	r0, r3
 8000d14:	f001 fd38 	bl	8002788 <HAL_RCC_ClockConfig>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d001      	beq.n	8000d22 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000d1e:	f000 f86b 	bl	8000df8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000d22:	2302      	movs	r3, #2
 8000d24:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000d26:	2300      	movs	r3, #0
 8000d28:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d2a:	1d3b      	adds	r3, r7, #4
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f001 ff4b 	bl	8002bc8 <HAL_RCCEx_PeriphCLKConfig>
 8000d32:	4603      	mov	r3, r0
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d001      	beq.n	8000d3c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000d38:	f000 f85e 	bl	8000df8 <Error_Handler>
  }
}
 8000d3c:	bf00      	nop
 8000d3e:	3798      	adds	r7, #152	@ 0x98
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}

08000d44 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d48:	4b14      	ldr	r3, [pc, #80]	@ (8000d9c <MX_USART2_UART_Init+0x58>)
 8000d4a:	4a15      	ldr	r2, [pc, #84]	@ (8000da0 <MX_USART2_UART_Init+0x5c>)
 8000d4c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8000d4e:	4b13      	ldr	r3, [pc, #76]	@ (8000d9c <MX_USART2_UART_Init+0x58>)
 8000d50:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8000d54:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d56:	4b11      	ldr	r3, [pc, #68]	@ (8000d9c <MX_USART2_UART_Init+0x58>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d5c:	4b0f      	ldr	r3, [pc, #60]	@ (8000d9c <MX_USART2_UART_Init+0x58>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d62:	4b0e      	ldr	r3, [pc, #56]	@ (8000d9c <MX_USART2_UART_Init+0x58>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d68:	4b0c      	ldr	r3, [pc, #48]	@ (8000d9c <MX_USART2_UART_Init+0x58>)
 8000d6a:	220c      	movs	r2, #12
 8000d6c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d6e:	4b0b      	ldr	r3, [pc, #44]	@ (8000d9c <MX_USART2_UART_Init+0x58>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d74:	4b09      	ldr	r3, [pc, #36]	@ (8000d9c <MX_USART2_UART_Init+0x58>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d7a:	4b08      	ldr	r3, [pc, #32]	@ (8000d9c <MX_USART2_UART_Init+0x58>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d80:	4b06      	ldr	r3, [pc, #24]	@ (8000d9c <MX_USART2_UART_Init+0x58>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d86:	4805      	ldr	r0, [pc, #20]	@ (8000d9c <MX_USART2_UART_Init+0x58>)
 8000d88:	f002 f93c 	bl	8003004 <HAL_UART_Init>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d001      	beq.n	8000d96 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000d92:	f000 f831 	bl	8000df8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d96:	bf00      	nop
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	200001f0 	.word	0x200001f0
 8000da0:	40004400 	.word	0x40004400

08000da4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	b083      	sub	sp, #12
 8000da8:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000daa:	4b09      	ldr	r3, [pc, #36]	@ (8000dd0 <MX_GPIO_Init+0x2c>)
 8000dac:	695b      	ldr	r3, [r3, #20]
 8000dae:	4a08      	ldr	r2, [pc, #32]	@ (8000dd0 <MX_GPIO_Init+0x2c>)
 8000db0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000db4:	6153      	str	r3, [r2, #20]
 8000db6:	4b06      	ldr	r3, [pc, #24]	@ (8000dd0 <MX_GPIO_Init+0x2c>)
 8000db8:	695b      	ldr	r3, [r3, #20]
 8000dba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000dbe:	607b      	str	r3, [r7, #4]
 8000dc0:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000dc2:	bf00      	nop
 8000dc4:	370c      	adds	r7, #12
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dcc:	4770      	bx	lr
 8000dce:	bf00      	nop
 8000dd0:	40021000 	.word	0x40021000

08000dd4 <__io_putchar>:

/* USER CODE BEGIN 4 */
PUTCHAR_PROTOTYPE
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b082      	sub	sp, #8
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8000ddc:	1d39      	adds	r1, r7, #4
 8000dde:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000de2:	2201      	movs	r2, #1
 8000de4:	4803      	ldr	r0, [pc, #12]	@ (8000df4 <__io_putchar+0x20>)
 8000de6:	f002 f95b 	bl	80030a0 <HAL_UART_Transmit>

  return ch;
 8000dea:	687b      	ldr	r3, [r7, #4]
}
 8000dec:	4618      	mov	r0, r3
 8000dee:	3708      	adds	r7, #8
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}
 8000df4:	200001f0 	.word	0x200001f0

08000df8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dfc:	b672      	cpsid	i
}
 8000dfe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e00:	bf00      	nop
 8000e02:	e7fd      	b.n	8000e00 <Error_Handler+0x8>

08000e04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b083      	sub	sp, #12
 8000e08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e0a:	4b0f      	ldr	r3, [pc, #60]	@ (8000e48 <HAL_MspInit+0x44>)
 8000e0c:	699b      	ldr	r3, [r3, #24]
 8000e0e:	4a0e      	ldr	r2, [pc, #56]	@ (8000e48 <HAL_MspInit+0x44>)
 8000e10:	f043 0301 	orr.w	r3, r3, #1
 8000e14:	6193      	str	r3, [r2, #24]
 8000e16:	4b0c      	ldr	r3, [pc, #48]	@ (8000e48 <HAL_MspInit+0x44>)
 8000e18:	699b      	ldr	r3, [r3, #24]
 8000e1a:	f003 0301 	and.w	r3, r3, #1
 8000e1e:	607b      	str	r3, [r7, #4]
 8000e20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e22:	4b09      	ldr	r3, [pc, #36]	@ (8000e48 <HAL_MspInit+0x44>)
 8000e24:	69db      	ldr	r3, [r3, #28]
 8000e26:	4a08      	ldr	r2, [pc, #32]	@ (8000e48 <HAL_MspInit+0x44>)
 8000e28:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e2c:	61d3      	str	r3, [r2, #28]
 8000e2e:	4b06      	ldr	r3, [pc, #24]	@ (8000e48 <HAL_MspInit+0x44>)
 8000e30:	69db      	ldr	r3, [r3, #28]
 8000e32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e36:	603b      	str	r3, [r7, #0]
 8000e38:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e3a:	bf00      	nop
 8000e3c:	370c      	adds	r7, #12
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e44:	4770      	bx	lr
 8000e46:	bf00      	nop
 8000e48:	40021000 	.word	0x40021000

08000e4c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b08a      	sub	sp, #40	@ 0x28
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e54:	f107 0314 	add.w	r3, r7, #20
 8000e58:	2200      	movs	r2, #0
 8000e5a:	601a      	str	r2, [r3, #0]
 8000e5c:	605a      	str	r2, [r3, #4]
 8000e5e:	609a      	str	r2, [r3, #8]
 8000e60:	60da      	str	r2, [r3, #12]
 8000e62:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	4a17      	ldr	r2, [pc, #92]	@ (8000ec8 <HAL_UART_MspInit+0x7c>)
 8000e6a:	4293      	cmp	r3, r2
 8000e6c:	d128      	bne.n	8000ec0 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e6e:	4b17      	ldr	r3, [pc, #92]	@ (8000ecc <HAL_UART_MspInit+0x80>)
 8000e70:	69db      	ldr	r3, [r3, #28]
 8000e72:	4a16      	ldr	r2, [pc, #88]	@ (8000ecc <HAL_UART_MspInit+0x80>)
 8000e74:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e78:	61d3      	str	r3, [r2, #28]
 8000e7a:	4b14      	ldr	r3, [pc, #80]	@ (8000ecc <HAL_UART_MspInit+0x80>)
 8000e7c:	69db      	ldr	r3, [r3, #28]
 8000e7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e82:	613b      	str	r3, [r7, #16]
 8000e84:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e86:	4b11      	ldr	r3, [pc, #68]	@ (8000ecc <HAL_UART_MspInit+0x80>)
 8000e88:	695b      	ldr	r3, [r3, #20]
 8000e8a:	4a10      	ldr	r2, [pc, #64]	@ (8000ecc <HAL_UART_MspInit+0x80>)
 8000e8c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e90:	6153      	str	r3, [r2, #20]
 8000e92:	4b0e      	ldr	r3, [pc, #56]	@ (8000ecc <HAL_UART_MspInit+0x80>)
 8000e94:	695b      	ldr	r3, [r3, #20]
 8000e96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e9a:	60fb      	str	r3, [r7, #12]
 8000e9c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000e9e:	230c      	movs	r3, #12
 8000ea0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea2:	2302      	movs	r3, #2
 8000ea4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000eaa:	2303      	movs	r3, #3
 8000eac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000eae:	2307      	movs	r3, #7
 8000eb0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eb2:	f107 0314 	add.w	r3, r7, #20
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ebc:	f000 fa86 	bl	80013cc <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000ec0:	bf00      	nop
 8000ec2:	3728      	adds	r7, #40	@ 0x28
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	40004400 	.word	0x40004400
 8000ecc:	40021000 	.word	0x40021000

08000ed0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ed4:	bf00      	nop
 8000ed6:	e7fd      	b.n	8000ed4 <NMI_Handler+0x4>

08000ed8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000edc:	bf00      	nop
 8000ede:	e7fd      	b.n	8000edc <HardFault_Handler+0x4>

08000ee0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ee4:	bf00      	nop
 8000ee6:	e7fd      	b.n	8000ee4 <MemManage_Handler+0x4>

08000ee8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000eec:	bf00      	nop
 8000eee:	e7fd      	b.n	8000eec <BusFault_Handler+0x4>

08000ef0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ef4:	bf00      	nop
 8000ef6:	e7fd      	b.n	8000ef4 <UsageFault_Handler+0x4>

08000ef8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000efc:	bf00      	nop
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr

08000f06 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f06:	b480      	push	{r7}
 8000f08:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f0a:	bf00      	nop
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f12:	4770      	bx	lr

08000f14 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f18:	bf00      	nop
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr

08000f22 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f22:	b580      	push	{r7, lr}
 8000f24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f26:	f000 f94b 	bl	80011c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f2a:	bf00      	nop
 8000f2c:	bd80      	pop	{r7, pc}

08000f2e <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000f2e:	b480      	push	{r7}
 8000f30:	af00      	add	r7, sp, #0
  return 1;
 8000f32:	2301      	movs	r3, #1
}
 8000f34:	4618      	mov	r0, r3
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr

08000f3e <_kill>:

int _kill(int pid, int sig)
{
 8000f3e:	b580      	push	{r7, lr}
 8000f40:	b082      	sub	sp, #8
 8000f42:	af00      	add	r7, sp, #0
 8000f44:	6078      	str	r0, [r7, #4]
 8000f46:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000f48:	f003 fae4 	bl	8004514 <__errno>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2216      	movs	r2, #22
 8000f50:	601a      	str	r2, [r3, #0]
  return -1;
 8000f52:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f56:	4618      	mov	r0, r3
 8000f58:	3708      	adds	r7, #8
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}

08000f5e <_exit>:

void _exit (int status)
{
 8000f5e:	b580      	push	{r7, lr}
 8000f60:	b082      	sub	sp, #8
 8000f62:	af00      	add	r7, sp, #0
 8000f64:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000f66:	f04f 31ff 	mov.w	r1, #4294967295
 8000f6a:	6878      	ldr	r0, [r7, #4]
 8000f6c:	f7ff ffe7 	bl	8000f3e <_kill>
  while (1) {}    /* Make sure we hang here */
 8000f70:	bf00      	nop
 8000f72:	e7fd      	b.n	8000f70 <_exit+0x12>

08000f74 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b086      	sub	sp, #24
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	60f8      	str	r0, [r7, #12]
 8000f7c:	60b9      	str	r1, [r7, #8]
 8000f7e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f80:	2300      	movs	r3, #0
 8000f82:	617b      	str	r3, [r7, #20]
 8000f84:	e00a      	b.n	8000f9c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000f86:	f3af 8000 	nop.w
 8000f8a:	4601      	mov	r1, r0
 8000f8c:	68bb      	ldr	r3, [r7, #8]
 8000f8e:	1c5a      	adds	r2, r3, #1
 8000f90:	60ba      	str	r2, [r7, #8]
 8000f92:	b2ca      	uxtb	r2, r1
 8000f94:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f96:	697b      	ldr	r3, [r7, #20]
 8000f98:	3301      	adds	r3, #1
 8000f9a:	617b      	str	r3, [r7, #20]
 8000f9c:	697a      	ldr	r2, [r7, #20]
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	429a      	cmp	r2, r3
 8000fa2:	dbf0      	blt.n	8000f86 <_read+0x12>
  }

  return len;
 8000fa4:	687b      	ldr	r3, [r7, #4]
}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	3718      	adds	r7, #24
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}

08000fae <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000fae:	b580      	push	{r7, lr}
 8000fb0:	b086      	sub	sp, #24
 8000fb2:	af00      	add	r7, sp, #0
 8000fb4:	60f8      	str	r0, [r7, #12]
 8000fb6:	60b9      	str	r1, [r7, #8]
 8000fb8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fba:	2300      	movs	r3, #0
 8000fbc:	617b      	str	r3, [r7, #20]
 8000fbe:	e009      	b.n	8000fd4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000fc0:	68bb      	ldr	r3, [r7, #8]
 8000fc2:	1c5a      	adds	r2, r3, #1
 8000fc4:	60ba      	str	r2, [r7, #8]
 8000fc6:	781b      	ldrb	r3, [r3, #0]
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f7ff ff03 	bl	8000dd4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fce:	697b      	ldr	r3, [r7, #20]
 8000fd0:	3301      	adds	r3, #1
 8000fd2:	617b      	str	r3, [r7, #20]
 8000fd4:	697a      	ldr	r2, [r7, #20]
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	429a      	cmp	r2, r3
 8000fda:	dbf1      	blt.n	8000fc0 <_write+0x12>
  }
  return len;
 8000fdc:	687b      	ldr	r3, [r7, #4]
}
 8000fde:	4618      	mov	r0, r3
 8000fe0:	3718      	adds	r7, #24
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}

08000fe6 <_close>:

int _close(int file)
{
 8000fe6:	b480      	push	{r7}
 8000fe8:	b083      	sub	sp, #12
 8000fea:	af00      	add	r7, sp, #0
 8000fec:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000fee:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	370c      	adds	r7, #12
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr

08000ffe <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ffe:	b480      	push	{r7}
 8001000:	b083      	sub	sp, #12
 8001002:	af00      	add	r7, sp, #0
 8001004:	6078      	str	r0, [r7, #4]
 8001006:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800100e:	605a      	str	r2, [r3, #4]
  return 0;
 8001010:	2300      	movs	r3, #0
}
 8001012:	4618      	mov	r0, r3
 8001014:	370c      	adds	r7, #12
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr

0800101e <_isatty>:

int _isatty(int file)
{
 800101e:	b480      	push	{r7}
 8001020:	b083      	sub	sp, #12
 8001022:	af00      	add	r7, sp, #0
 8001024:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001026:	2301      	movs	r3, #1
}
 8001028:	4618      	mov	r0, r3
 800102a:	370c      	adds	r7, #12
 800102c:	46bd      	mov	sp, r7
 800102e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001032:	4770      	bx	lr

08001034 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001034:	b480      	push	{r7}
 8001036:	b085      	sub	sp, #20
 8001038:	af00      	add	r7, sp, #0
 800103a:	60f8      	str	r0, [r7, #12]
 800103c:	60b9      	str	r1, [r7, #8]
 800103e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001040:	2300      	movs	r3, #0
}
 8001042:	4618      	mov	r0, r3
 8001044:	3714      	adds	r7, #20
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr
	...

08001050 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b086      	sub	sp, #24
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001058:	4a14      	ldr	r2, [pc, #80]	@ (80010ac <_sbrk+0x5c>)
 800105a:	4b15      	ldr	r3, [pc, #84]	@ (80010b0 <_sbrk+0x60>)
 800105c:	1ad3      	subs	r3, r2, r3
 800105e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001060:	697b      	ldr	r3, [r7, #20]
 8001062:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001064:	4b13      	ldr	r3, [pc, #76]	@ (80010b4 <_sbrk+0x64>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d102      	bne.n	8001072 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800106c:	4b11      	ldr	r3, [pc, #68]	@ (80010b4 <_sbrk+0x64>)
 800106e:	4a12      	ldr	r2, [pc, #72]	@ (80010b8 <_sbrk+0x68>)
 8001070:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001072:	4b10      	ldr	r3, [pc, #64]	@ (80010b4 <_sbrk+0x64>)
 8001074:	681a      	ldr	r2, [r3, #0]
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	4413      	add	r3, r2
 800107a:	693a      	ldr	r2, [r7, #16]
 800107c:	429a      	cmp	r2, r3
 800107e:	d207      	bcs.n	8001090 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001080:	f003 fa48 	bl	8004514 <__errno>
 8001084:	4603      	mov	r3, r0
 8001086:	220c      	movs	r2, #12
 8001088:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800108a:	f04f 33ff 	mov.w	r3, #4294967295
 800108e:	e009      	b.n	80010a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001090:	4b08      	ldr	r3, [pc, #32]	@ (80010b4 <_sbrk+0x64>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001096:	4b07      	ldr	r3, [pc, #28]	@ (80010b4 <_sbrk+0x64>)
 8001098:	681a      	ldr	r2, [r3, #0]
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	4413      	add	r3, r2
 800109e:	4a05      	ldr	r2, [pc, #20]	@ (80010b4 <_sbrk+0x64>)
 80010a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010a2:	68fb      	ldr	r3, [r7, #12]
}
 80010a4:	4618      	mov	r0, r3
 80010a6:	3718      	adds	r7, #24
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	20010000 	.word	0x20010000
 80010b0:	00000400 	.word	0x00000400
 80010b4:	20000278 	.word	0x20000278
 80010b8:	200003d0 	.word	0x200003d0

080010bc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010c0:	4b06      	ldr	r3, [pc, #24]	@ (80010dc <SystemInit+0x20>)
 80010c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80010c6:	4a05      	ldr	r2, [pc, #20]	@ (80010dc <SystemInit+0x20>)
 80010c8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80010cc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010d0:	bf00      	nop
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr
 80010da:	bf00      	nop
 80010dc:	e000ed00 	.word	0xe000ed00

080010e0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80010e0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001118 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80010e4:	f7ff ffea 	bl	80010bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010e8:	480c      	ldr	r0, [pc, #48]	@ (800111c <LoopForever+0x6>)
  ldr r1, =_edata
 80010ea:	490d      	ldr	r1, [pc, #52]	@ (8001120 <LoopForever+0xa>)
  ldr r2, =_sidata
 80010ec:	4a0d      	ldr	r2, [pc, #52]	@ (8001124 <LoopForever+0xe>)
  movs r3, #0
 80010ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010f0:	e002      	b.n	80010f8 <LoopCopyDataInit>

080010f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010f6:	3304      	adds	r3, #4

080010f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010fc:	d3f9      	bcc.n	80010f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010fe:	4a0a      	ldr	r2, [pc, #40]	@ (8001128 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001100:	4c0a      	ldr	r4, [pc, #40]	@ (800112c <LoopForever+0x16>)
  movs r3, #0
 8001102:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001104:	e001      	b.n	800110a <LoopFillZerobss>

08001106 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001106:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001108:	3204      	adds	r2, #4

0800110a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800110a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800110c:	d3fb      	bcc.n	8001106 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800110e:	f003 fa07 	bl	8004520 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001112:	f7ff fd6d 	bl	8000bf0 <main>

08001116 <LoopForever>:

LoopForever:
    b LoopForever
 8001116:	e7fe      	b.n	8001116 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001118:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800111c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001120:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001124:	080066d0 	.word	0x080066d0
  ldr r2, =_sbss
 8001128:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 800112c:	200003cc 	.word	0x200003cc

08001130 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001130:	e7fe      	b.n	8001130 <ADC1_2_IRQHandler>
	...

08001134 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001138:	4b08      	ldr	r3, [pc, #32]	@ (800115c <HAL_Init+0x28>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4a07      	ldr	r2, [pc, #28]	@ (800115c <HAL_Init+0x28>)
 800113e:	f043 0310 	orr.w	r3, r3, #16
 8001142:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001144:	2003      	movs	r0, #3
 8001146:	f000 f90d 	bl	8001364 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800114a:	200f      	movs	r0, #15
 800114c:	f000 f808 	bl	8001160 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001150:	f7ff fe58 	bl	8000e04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001154:	2300      	movs	r3, #0
}
 8001156:	4618      	mov	r0, r3
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	40022000 	.word	0x40022000

08001160 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001168:	4b12      	ldr	r3, [pc, #72]	@ (80011b4 <HAL_InitTick+0x54>)
 800116a:	681a      	ldr	r2, [r3, #0]
 800116c:	4b12      	ldr	r3, [pc, #72]	@ (80011b8 <HAL_InitTick+0x58>)
 800116e:	781b      	ldrb	r3, [r3, #0]
 8001170:	4619      	mov	r1, r3
 8001172:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001176:	fbb3 f3f1 	udiv	r3, r3, r1
 800117a:	fbb2 f3f3 	udiv	r3, r2, r3
 800117e:	4618      	mov	r0, r3
 8001180:	f000 f917 	bl	80013b2 <HAL_SYSTICK_Config>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d001      	beq.n	800118e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800118a:	2301      	movs	r3, #1
 800118c:	e00e      	b.n	80011ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	2b0f      	cmp	r3, #15
 8001192:	d80a      	bhi.n	80011aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001194:	2200      	movs	r2, #0
 8001196:	6879      	ldr	r1, [r7, #4]
 8001198:	f04f 30ff 	mov.w	r0, #4294967295
 800119c:	f000 f8ed 	bl	800137a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011a0:	4a06      	ldr	r2, [pc, #24]	@ (80011bc <HAL_InitTick+0x5c>)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80011a6:	2300      	movs	r3, #0
 80011a8:	e000      	b.n	80011ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011aa:	2301      	movs	r3, #1
}
 80011ac:	4618      	mov	r0, r3
 80011ae:	3708      	adds	r7, #8
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	20000000 	.word	0x20000000
 80011b8:	20000008 	.word	0x20000008
 80011bc:	20000004 	.word	0x20000004

080011c0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011c4:	4b06      	ldr	r3, [pc, #24]	@ (80011e0 <HAL_IncTick+0x20>)
 80011c6:	781b      	ldrb	r3, [r3, #0]
 80011c8:	461a      	mov	r2, r3
 80011ca:	4b06      	ldr	r3, [pc, #24]	@ (80011e4 <HAL_IncTick+0x24>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	4413      	add	r3, r2
 80011d0:	4a04      	ldr	r2, [pc, #16]	@ (80011e4 <HAL_IncTick+0x24>)
 80011d2:	6013      	str	r3, [r2, #0]
}
 80011d4:	bf00      	nop
 80011d6:	46bd      	mov	sp, r7
 80011d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011dc:	4770      	bx	lr
 80011de:	bf00      	nop
 80011e0:	20000008 	.word	0x20000008
 80011e4:	2000027c 	.word	0x2000027c

080011e8 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0
  return uwTick;  
 80011ec:	4b03      	ldr	r3, [pc, #12]	@ (80011fc <HAL_GetTick+0x14>)
 80011ee:	681b      	ldr	r3, [r3, #0]
}
 80011f0:	4618      	mov	r0, r3
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr
 80011fa:	bf00      	nop
 80011fc:	2000027c 	.word	0x2000027c

08001200 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001200:	b480      	push	{r7}
 8001202:	b085      	sub	sp, #20
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	f003 0307 	and.w	r3, r3, #7
 800120e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001210:	4b0c      	ldr	r3, [pc, #48]	@ (8001244 <__NVIC_SetPriorityGrouping+0x44>)
 8001212:	68db      	ldr	r3, [r3, #12]
 8001214:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001216:	68ba      	ldr	r2, [r7, #8]
 8001218:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800121c:	4013      	ands	r3, r2
 800121e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001224:	68bb      	ldr	r3, [r7, #8]
 8001226:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001228:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800122c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001230:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001232:	4a04      	ldr	r2, [pc, #16]	@ (8001244 <__NVIC_SetPriorityGrouping+0x44>)
 8001234:	68bb      	ldr	r3, [r7, #8]
 8001236:	60d3      	str	r3, [r2, #12]
}
 8001238:	bf00      	nop
 800123a:	3714      	adds	r7, #20
 800123c:	46bd      	mov	sp, r7
 800123e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001242:	4770      	bx	lr
 8001244:	e000ed00 	.word	0xe000ed00

08001248 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800124c:	4b04      	ldr	r3, [pc, #16]	@ (8001260 <__NVIC_GetPriorityGrouping+0x18>)
 800124e:	68db      	ldr	r3, [r3, #12]
 8001250:	0a1b      	lsrs	r3, r3, #8
 8001252:	f003 0307 	and.w	r3, r3, #7
}
 8001256:	4618      	mov	r0, r3
 8001258:	46bd      	mov	sp, r7
 800125a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125e:	4770      	bx	lr
 8001260:	e000ed00 	.word	0xe000ed00

08001264 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001264:	b480      	push	{r7}
 8001266:	b083      	sub	sp, #12
 8001268:	af00      	add	r7, sp, #0
 800126a:	4603      	mov	r3, r0
 800126c:	6039      	str	r1, [r7, #0]
 800126e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001270:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001274:	2b00      	cmp	r3, #0
 8001276:	db0a      	blt.n	800128e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	b2da      	uxtb	r2, r3
 800127c:	490c      	ldr	r1, [pc, #48]	@ (80012b0 <__NVIC_SetPriority+0x4c>)
 800127e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001282:	0112      	lsls	r2, r2, #4
 8001284:	b2d2      	uxtb	r2, r2
 8001286:	440b      	add	r3, r1
 8001288:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800128c:	e00a      	b.n	80012a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	b2da      	uxtb	r2, r3
 8001292:	4908      	ldr	r1, [pc, #32]	@ (80012b4 <__NVIC_SetPriority+0x50>)
 8001294:	79fb      	ldrb	r3, [r7, #7]
 8001296:	f003 030f 	and.w	r3, r3, #15
 800129a:	3b04      	subs	r3, #4
 800129c:	0112      	lsls	r2, r2, #4
 800129e:	b2d2      	uxtb	r2, r2
 80012a0:	440b      	add	r3, r1
 80012a2:	761a      	strb	r2, [r3, #24]
}
 80012a4:	bf00      	nop
 80012a6:	370c      	adds	r7, #12
 80012a8:	46bd      	mov	sp, r7
 80012aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ae:	4770      	bx	lr
 80012b0:	e000e100 	.word	0xe000e100
 80012b4:	e000ed00 	.word	0xe000ed00

080012b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b089      	sub	sp, #36	@ 0x24
 80012bc:	af00      	add	r7, sp, #0
 80012be:	60f8      	str	r0, [r7, #12]
 80012c0:	60b9      	str	r1, [r7, #8]
 80012c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	f003 0307 	and.w	r3, r3, #7
 80012ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012cc:	69fb      	ldr	r3, [r7, #28]
 80012ce:	f1c3 0307 	rsb	r3, r3, #7
 80012d2:	2b04      	cmp	r3, #4
 80012d4:	bf28      	it	cs
 80012d6:	2304      	movcs	r3, #4
 80012d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012da:	69fb      	ldr	r3, [r7, #28]
 80012dc:	3304      	adds	r3, #4
 80012de:	2b06      	cmp	r3, #6
 80012e0:	d902      	bls.n	80012e8 <NVIC_EncodePriority+0x30>
 80012e2:	69fb      	ldr	r3, [r7, #28]
 80012e4:	3b03      	subs	r3, #3
 80012e6:	e000      	b.n	80012ea <NVIC_EncodePriority+0x32>
 80012e8:	2300      	movs	r3, #0
 80012ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012ec:	f04f 32ff 	mov.w	r2, #4294967295
 80012f0:	69bb      	ldr	r3, [r7, #24]
 80012f2:	fa02 f303 	lsl.w	r3, r2, r3
 80012f6:	43da      	mvns	r2, r3
 80012f8:	68bb      	ldr	r3, [r7, #8]
 80012fa:	401a      	ands	r2, r3
 80012fc:	697b      	ldr	r3, [r7, #20]
 80012fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001300:	f04f 31ff 	mov.w	r1, #4294967295
 8001304:	697b      	ldr	r3, [r7, #20]
 8001306:	fa01 f303 	lsl.w	r3, r1, r3
 800130a:	43d9      	mvns	r1, r3
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001310:	4313      	orrs	r3, r2
         );
}
 8001312:	4618      	mov	r0, r3
 8001314:	3724      	adds	r7, #36	@ 0x24
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr
	...

08001320 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b082      	sub	sp, #8
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	3b01      	subs	r3, #1
 800132c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001330:	d301      	bcc.n	8001336 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001332:	2301      	movs	r3, #1
 8001334:	e00f      	b.n	8001356 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001336:	4a0a      	ldr	r2, [pc, #40]	@ (8001360 <SysTick_Config+0x40>)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	3b01      	subs	r3, #1
 800133c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800133e:	210f      	movs	r1, #15
 8001340:	f04f 30ff 	mov.w	r0, #4294967295
 8001344:	f7ff ff8e 	bl	8001264 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001348:	4b05      	ldr	r3, [pc, #20]	@ (8001360 <SysTick_Config+0x40>)
 800134a:	2200      	movs	r2, #0
 800134c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800134e:	4b04      	ldr	r3, [pc, #16]	@ (8001360 <SysTick_Config+0x40>)
 8001350:	2207      	movs	r2, #7
 8001352:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001354:	2300      	movs	r3, #0
}
 8001356:	4618      	mov	r0, r3
 8001358:	3708      	adds	r7, #8
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	e000e010 	.word	0xe000e010

08001364 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b082      	sub	sp, #8
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800136c:	6878      	ldr	r0, [r7, #4]
 800136e:	f7ff ff47 	bl	8001200 <__NVIC_SetPriorityGrouping>
}
 8001372:	bf00      	nop
 8001374:	3708      	adds	r7, #8
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}

0800137a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800137a:	b580      	push	{r7, lr}
 800137c:	b086      	sub	sp, #24
 800137e:	af00      	add	r7, sp, #0
 8001380:	4603      	mov	r3, r0
 8001382:	60b9      	str	r1, [r7, #8]
 8001384:	607a      	str	r2, [r7, #4]
 8001386:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001388:	2300      	movs	r3, #0
 800138a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800138c:	f7ff ff5c 	bl	8001248 <__NVIC_GetPriorityGrouping>
 8001390:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001392:	687a      	ldr	r2, [r7, #4]
 8001394:	68b9      	ldr	r1, [r7, #8]
 8001396:	6978      	ldr	r0, [r7, #20]
 8001398:	f7ff ff8e 	bl	80012b8 <NVIC_EncodePriority>
 800139c:	4602      	mov	r2, r0
 800139e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013a2:	4611      	mov	r1, r2
 80013a4:	4618      	mov	r0, r3
 80013a6:	f7ff ff5d 	bl	8001264 <__NVIC_SetPriority>
}
 80013aa:	bf00      	nop
 80013ac:	3718      	adds	r7, #24
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}

080013b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013b2:	b580      	push	{r7, lr}
 80013b4:	b082      	sub	sp, #8
 80013b6:	af00      	add	r7, sp, #0
 80013b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013ba:	6878      	ldr	r0, [r7, #4]
 80013bc:	f7ff ffb0 	bl	8001320 <SysTick_Config>
 80013c0:	4603      	mov	r3, r0
}
 80013c2:	4618      	mov	r0, r3
 80013c4:	3708      	adds	r7, #8
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
	...

080013cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b087      	sub	sp, #28
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
 80013d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80013d6:	2300      	movs	r3, #0
 80013d8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013da:	e160      	b.n	800169e <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	681a      	ldr	r2, [r3, #0]
 80013e0:	2101      	movs	r1, #1
 80013e2:	697b      	ldr	r3, [r7, #20]
 80013e4:	fa01 f303 	lsl.w	r3, r1, r3
 80013e8:	4013      	ands	r3, r2
 80013ea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	f000 8152 	beq.w	8001698 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	f003 0303 	and.w	r3, r3, #3
 80013fc:	2b01      	cmp	r3, #1
 80013fe:	d005      	beq.n	800140c <HAL_GPIO_Init+0x40>
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	f003 0303 	and.w	r3, r3, #3
 8001408:	2b02      	cmp	r3, #2
 800140a:	d130      	bne.n	800146e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	689b      	ldr	r3, [r3, #8]
 8001410:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001412:	697b      	ldr	r3, [r7, #20]
 8001414:	005b      	lsls	r3, r3, #1
 8001416:	2203      	movs	r2, #3
 8001418:	fa02 f303 	lsl.w	r3, r2, r3
 800141c:	43db      	mvns	r3, r3
 800141e:	693a      	ldr	r2, [r7, #16]
 8001420:	4013      	ands	r3, r2
 8001422:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	68da      	ldr	r2, [r3, #12]
 8001428:	697b      	ldr	r3, [r7, #20]
 800142a:	005b      	lsls	r3, r3, #1
 800142c:	fa02 f303 	lsl.w	r3, r2, r3
 8001430:	693a      	ldr	r2, [r7, #16]
 8001432:	4313      	orrs	r3, r2
 8001434:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	693a      	ldr	r2, [r7, #16]
 800143a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001442:	2201      	movs	r2, #1
 8001444:	697b      	ldr	r3, [r7, #20]
 8001446:	fa02 f303 	lsl.w	r3, r2, r3
 800144a:	43db      	mvns	r3, r3
 800144c:	693a      	ldr	r2, [r7, #16]
 800144e:	4013      	ands	r3, r2
 8001450:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	091b      	lsrs	r3, r3, #4
 8001458:	f003 0201 	and.w	r2, r3, #1
 800145c:	697b      	ldr	r3, [r7, #20]
 800145e:	fa02 f303 	lsl.w	r3, r2, r3
 8001462:	693a      	ldr	r2, [r7, #16]
 8001464:	4313      	orrs	r3, r2
 8001466:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	693a      	ldr	r2, [r7, #16]
 800146c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	f003 0303 	and.w	r3, r3, #3
 8001476:	2b03      	cmp	r3, #3
 8001478:	d017      	beq.n	80014aa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	68db      	ldr	r3, [r3, #12]
 800147e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001480:	697b      	ldr	r3, [r7, #20]
 8001482:	005b      	lsls	r3, r3, #1
 8001484:	2203      	movs	r2, #3
 8001486:	fa02 f303 	lsl.w	r3, r2, r3
 800148a:	43db      	mvns	r3, r3
 800148c:	693a      	ldr	r2, [r7, #16]
 800148e:	4013      	ands	r3, r2
 8001490:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	689a      	ldr	r2, [r3, #8]
 8001496:	697b      	ldr	r3, [r7, #20]
 8001498:	005b      	lsls	r3, r3, #1
 800149a:	fa02 f303 	lsl.w	r3, r2, r3
 800149e:	693a      	ldr	r2, [r7, #16]
 80014a0:	4313      	orrs	r3, r2
 80014a2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	693a      	ldr	r2, [r7, #16]
 80014a8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	f003 0303 	and.w	r3, r3, #3
 80014b2:	2b02      	cmp	r3, #2
 80014b4:	d123      	bne.n	80014fe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80014b6:	697b      	ldr	r3, [r7, #20]
 80014b8:	08da      	lsrs	r2, r3, #3
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	3208      	adds	r2, #8
 80014be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014c2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	f003 0307 	and.w	r3, r3, #7
 80014ca:	009b      	lsls	r3, r3, #2
 80014cc:	220f      	movs	r2, #15
 80014ce:	fa02 f303 	lsl.w	r3, r2, r3
 80014d2:	43db      	mvns	r3, r3
 80014d4:	693a      	ldr	r2, [r7, #16]
 80014d6:	4013      	ands	r3, r2
 80014d8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	691a      	ldr	r2, [r3, #16]
 80014de:	697b      	ldr	r3, [r7, #20]
 80014e0:	f003 0307 	and.w	r3, r3, #7
 80014e4:	009b      	lsls	r3, r3, #2
 80014e6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ea:	693a      	ldr	r2, [r7, #16]
 80014ec:	4313      	orrs	r3, r2
 80014ee:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80014f0:	697b      	ldr	r3, [r7, #20]
 80014f2:	08da      	lsrs	r2, r3, #3
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	3208      	adds	r2, #8
 80014f8:	6939      	ldr	r1, [r7, #16]
 80014fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001504:	697b      	ldr	r3, [r7, #20]
 8001506:	005b      	lsls	r3, r3, #1
 8001508:	2203      	movs	r2, #3
 800150a:	fa02 f303 	lsl.w	r3, r2, r3
 800150e:	43db      	mvns	r3, r3
 8001510:	693a      	ldr	r2, [r7, #16]
 8001512:	4013      	ands	r3, r2
 8001514:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	f003 0203 	and.w	r2, r3, #3
 800151e:	697b      	ldr	r3, [r7, #20]
 8001520:	005b      	lsls	r3, r3, #1
 8001522:	fa02 f303 	lsl.w	r3, r2, r3
 8001526:	693a      	ldr	r2, [r7, #16]
 8001528:	4313      	orrs	r3, r2
 800152a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	693a      	ldr	r2, [r7, #16]
 8001530:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800153a:	2b00      	cmp	r3, #0
 800153c:	f000 80ac 	beq.w	8001698 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001540:	4b5e      	ldr	r3, [pc, #376]	@ (80016bc <HAL_GPIO_Init+0x2f0>)
 8001542:	699b      	ldr	r3, [r3, #24]
 8001544:	4a5d      	ldr	r2, [pc, #372]	@ (80016bc <HAL_GPIO_Init+0x2f0>)
 8001546:	f043 0301 	orr.w	r3, r3, #1
 800154a:	6193      	str	r3, [r2, #24]
 800154c:	4b5b      	ldr	r3, [pc, #364]	@ (80016bc <HAL_GPIO_Init+0x2f0>)
 800154e:	699b      	ldr	r3, [r3, #24]
 8001550:	f003 0301 	and.w	r3, r3, #1
 8001554:	60bb      	str	r3, [r7, #8]
 8001556:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001558:	4a59      	ldr	r2, [pc, #356]	@ (80016c0 <HAL_GPIO_Init+0x2f4>)
 800155a:	697b      	ldr	r3, [r7, #20]
 800155c:	089b      	lsrs	r3, r3, #2
 800155e:	3302      	adds	r3, #2
 8001560:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001564:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001566:	697b      	ldr	r3, [r7, #20]
 8001568:	f003 0303 	and.w	r3, r3, #3
 800156c:	009b      	lsls	r3, r3, #2
 800156e:	220f      	movs	r2, #15
 8001570:	fa02 f303 	lsl.w	r3, r2, r3
 8001574:	43db      	mvns	r3, r3
 8001576:	693a      	ldr	r2, [r7, #16]
 8001578:	4013      	ands	r3, r2
 800157a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001582:	d025      	beq.n	80015d0 <HAL_GPIO_Init+0x204>
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	4a4f      	ldr	r2, [pc, #316]	@ (80016c4 <HAL_GPIO_Init+0x2f8>)
 8001588:	4293      	cmp	r3, r2
 800158a:	d01f      	beq.n	80015cc <HAL_GPIO_Init+0x200>
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	4a4e      	ldr	r2, [pc, #312]	@ (80016c8 <HAL_GPIO_Init+0x2fc>)
 8001590:	4293      	cmp	r3, r2
 8001592:	d019      	beq.n	80015c8 <HAL_GPIO_Init+0x1fc>
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	4a4d      	ldr	r2, [pc, #308]	@ (80016cc <HAL_GPIO_Init+0x300>)
 8001598:	4293      	cmp	r3, r2
 800159a:	d013      	beq.n	80015c4 <HAL_GPIO_Init+0x1f8>
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	4a4c      	ldr	r2, [pc, #304]	@ (80016d0 <HAL_GPIO_Init+0x304>)
 80015a0:	4293      	cmp	r3, r2
 80015a2:	d00d      	beq.n	80015c0 <HAL_GPIO_Init+0x1f4>
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	4a4b      	ldr	r2, [pc, #300]	@ (80016d4 <HAL_GPIO_Init+0x308>)
 80015a8:	4293      	cmp	r3, r2
 80015aa:	d007      	beq.n	80015bc <HAL_GPIO_Init+0x1f0>
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	4a4a      	ldr	r2, [pc, #296]	@ (80016d8 <HAL_GPIO_Init+0x30c>)
 80015b0:	4293      	cmp	r3, r2
 80015b2:	d101      	bne.n	80015b8 <HAL_GPIO_Init+0x1ec>
 80015b4:	2306      	movs	r3, #6
 80015b6:	e00c      	b.n	80015d2 <HAL_GPIO_Init+0x206>
 80015b8:	2307      	movs	r3, #7
 80015ba:	e00a      	b.n	80015d2 <HAL_GPIO_Init+0x206>
 80015bc:	2305      	movs	r3, #5
 80015be:	e008      	b.n	80015d2 <HAL_GPIO_Init+0x206>
 80015c0:	2304      	movs	r3, #4
 80015c2:	e006      	b.n	80015d2 <HAL_GPIO_Init+0x206>
 80015c4:	2303      	movs	r3, #3
 80015c6:	e004      	b.n	80015d2 <HAL_GPIO_Init+0x206>
 80015c8:	2302      	movs	r3, #2
 80015ca:	e002      	b.n	80015d2 <HAL_GPIO_Init+0x206>
 80015cc:	2301      	movs	r3, #1
 80015ce:	e000      	b.n	80015d2 <HAL_GPIO_Init+0x206>
 80015d0:	2300      	movs	r3, #0
 80015d2:	697a      	ldr	r2, [r7, #20]
 80015d4:	f002 0203 	and.w	r2, r2, #3
 80015d8:	0092      	lsls	r2, r2, #2
 80015da:	4093      	lsls	r3, r2
 80015dc:	693a      	ldr	r2, [r7, #16]
 80015de:	4313      	orrs	r3, r2
 80015e0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80015e2:	4937      	ldr	r1, [pc, #220]	@ (80016c0 <HAL_GPIO_Init+0x2f4>)
 80015e4:	697b      	ldr	r3, [r7, #20]
 80015e6:	089b      	lsrs	r3, r3, #2
 80015e8:	3302      	adds	r3, #2
 80015ea:	693a      	ldr	r2, [r7, #16]
 80015ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80015f0:	4b3a      	ldr	r3, [pc, #232]	@ (80016dc <HAL_GPIO_Init+0x310>)
 80015f2:	689b      	ldr	r3, [r3, #8]
 80015f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	43db      	mvns	r3, r3
 80015fa:	693a      	ldr	r2, [r7, #16]
 80015fc:	4013      	ands	r3, r2
 80015fe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001608:	2b00      	cmp	r3, #0
 800160a:	d003      	beq.n	8001614 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 800160c:	693a      	ldr	r2, [r7, #16]
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	4313      	orrs	r3, r2
 8001612:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001614:	4a31      	ldr	r2, [pc, #196]	@ (80016dc <HAL_GPIO_Init+0x310>)
 8001616:	693b      	ldr	r3, [r7, #16]
 8001618:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800161a:	4b30      	ldr	r3, [pc, #192]	@ (80016dc <HAL_GPIO_Init+0x310>)
 800161c:	68db      	ldr	r3, [r3, #12]
 800161e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	43db      	mvns	r3, r3
 8001624:	693a      	ldr	r2, [r7, #16]
 8001626:	4013      	ands	r3, r2
 8001628:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001632:	2b00      	cmp	r3, #0
 8001634:	d003      	beq.n	800163e <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8001636:	693a      	ldr	r2, [r7, #16]
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	4313      	orrs	r3, r2
 800163c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800163e:	4a27      	ldr	r2, [pc, #156]	@ (80016dc <HAL_GPIO_Init+0x310>)
 8001640:	693b      	ldr	r3, [r7, #16]
 8001642:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001644:	4b25      	ldr	r3, [pc, #148]	@ (80016dc <HAL_GPIO_Init+0x310>)
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	43db      	mvns	r3, r3
 800164e:	693a      	ldr	r2, [r7, #16]
 8001650:	4013      	ands	r3, r2
 8001652:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800165c:	2b00      	cmp	r3, #0
 800165e:	d003      	beq.n	8001668 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001660:	693a      	ldr	r2, [r7, #16]
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	4313      	orrs	r3, r2
 8001666:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001668:	4a1c      	ldr	r2, [pc, #112]	@ (80016dc <HAL_GPIO_Init+0x310>)
 800166a:	693b      	ldr	r3, [r7, #16]
 800166c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800166e:	4b1b      	ldr	r3, [pc, #108]	@ (80016dc <HAL_GPIO_Init+0x310>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	43db      	mvns	r3, r3
 8001678:	693a      	ldr	r2, [r7, #16]
 800167a:	4013      	ands	r3, r2
 800167c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001686:	2b00      	cmp	r3, #0
 8001688:	d003      	beq.n	8001692 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 800168a:	693a      	ldr	r2, [r7, #16]
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	4313      	orrs	r3, r2
 8001690:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001692:	4a12      	ldr	r2, [pc, #72]	@ (80016dc <HAL_GPIO_Init+0x310>)
 8001694:	693b      	ldr	r3, [r7, #16]
 8001696:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001698:	697b      	ldr	r3, [r7, #20]
 800169a:	3301      	adds	r3, #1
 800169c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	681a      	ldr	r2, [r3, #0]
 80016a2:	697b      	ldr	r3, [r7, #20]
 80016a4:	fa22 f303 	lsr.w	r3, r2, r3
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	f47f ae97 	bne.w	80013dc <HAL_GPIO_Init+0x10>
  }
}
 80016ae:	bf00      	nop
 80016b0:	bf00      	nop
 80016b2:	371c      	adds	r7, #28
 80016b4:	46bd      	mov	sp, r7
 80016b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ba:	4770      	bx	lr
 80016bc:	40021000 	.word	0x40021000
 80016c0:	40010000 	.word	0x40010000
 80016c4:	48000400 	.word	0x48000400
 80016c8:	48000800 	.word	0x48000800
 80016cc:	48000c00 	.word	0x48000c00
 80016d0:	48001000 	.word	0x48001000
 80016d4:	48001400 	.word	0x48001400
 80016d8:	48001800 	.word	0x48001800
 80016dc:	40010400 	.word	0x40010400

080016e0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 80016e6:	af00      	add	r7, sp, #0
 80016e8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80016ec:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80016f0:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80016f2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80016f6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d102      	bne.n	8001706 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001700:	2301      	movs	r3, #1
 8001702:	f001 b83a 	b.w	800277a <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001706:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800170a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f003 0301 	and.w	r3, r3, #1
 8001716:	2b00      	cmp	r3, #0
 8001718:	f000 816f 	beq.w	80019fa <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800171c:	4bb5      	ldr	r3, [pc, #724]	@ (80019f4 <HAL_RCC_OscConfig+0x314>)
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	f003 030c 	and.w	r3, r3, #12
 8001724:	2b04      	cmp	r3, #4
 8001726:	d00c      	beq.n	8001742 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001728:	4bb2      	ldr	r3, [pc, #712]	@ (80019f4 <HAL_RCC_OscConfig+0x314>)
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	f003 030c 	and.w	r3, r3, #12
 8001730:	2b08      	cmp	r3, #8
 8001732:	d15c      	bne.n	80017ee <HAL_RCC_OscConfig+0x10e>
 8001734:	4baf      	ldr	r3, [pc, #700]	@ (80019f4 <HAL_RCC_OscConfig+0x314>)
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 800173c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001740:	d155      	bne.n	80017ee <HAL_RCC_OscConfig+0x10e>
 8001742:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001746:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800174a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 800174e:	fa93 f3a3 	rbit	r3, r3
 8001752:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001756:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800175a:	fab3 f383 	clz	r3, r3
 800175e:	b2db      	uxtb	r3, r3
 8001760:	095b      	lsrs	r3, r3, #5
 8001762:	b2db      	uxtb	r3, r3
 8001764:	f043 0301 	orr.w	r3, r3, #1
 8001768:	b2db      	uxtb	r3, r3
 800176a:	2b01      	cmp	r3, #1
 800176c:	d102      	bne.n	8001774 <HAL_RCC_OscConfig+0x94>
 800176e:	4ba1      	ldr	r3, [pc, #644]	@ (80019f4 <HAL_RCC_OscConfig+0x314>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	e015      	b.n	80017a0 <HAL_RCC_OscConfig+0xc0>
 8001774:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001778:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800177c:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 8001780:	fa93 f3a3 	rbit	r3, r3
 8001784:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 8001788:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800178c:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8001790:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 8001794:	fa93 f3a3 	rbit	r3, r3
 8001798:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 800179c:	4b95      	ldr	r3, [pc, #596]	@ (80019f4 <HAL_RCC_OscConfig+0x314>)
 800179e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017a0:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80017a4:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 80017a8:	f8d7 21dc 	ldr.w	r2, [r7, #476]	@ 0x1dc
 80017ac:	fa92 f2a2 	rbit	r2, r2
 80017b0:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
  return result;
 80017b4:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 80017b8:	fab2 f282 	clz	r2, r2
 80017bc:	b2d2      	uxtb	r2, r2
 80017be:	f042 0220 	orr.w	r2, r2, #32
 80017c2:	b2d2      	uxtb	r2, r2
 80017c4:	f002 021f 	and.w	r2, r2, #31
 80017c8:	2101      	movs	r1, #1
 80017ca:	fa01 f202 	lsl.w	r2, r1, r2
 80017ce:	4013      	ands	r3, r2
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	f000 8111 	beq.w	80019f8 <HAL_RCC_OscConfig+0x318>
 80017d6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80017da:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	f040 8108 	bne.w	80019f8 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 80017e8:	2301      	movs	r3, #1
 80017ea:	f000 bfc6 	b.w	800277a <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017ee:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80017f2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80017fe:	d106      	bne.n	800180e <HAL_RCC_OscConfig+0x12e>
 8001800:	4b7c      	ldr	r3, [pc, #496]	@ (80019f4 <HAL_RCC_OscConfig+0x314>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4a7b      	ldr	r2, [pc, #492]	@ (80019f4 <HAL_RCC_OscConfig+0x314>)
 8001806:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800180a:	6013      	str	r3, [r2, #0]
 800180c:	e036      	b.n	800187c <HAL_RCC_OscConfig+0x19c>
 800180e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001812:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d10c      	bne.n	8001838 <HAL_RCC_OscConfig+0x158>
 800181e:	4b75      	ldr	r3, [pc, #468]	@ (80019f4 <HAL_RCC_OscConfig+0x314>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4a74      	ldr	r2, [pc, #464]	@ (80019f4 <HAL_RCC_OscConfig+0x314>)
 8001824:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001828:	6013      	str	r3, [r2, #0]
 800182a:	4b72      	ldr	r3, [pc, #456]	@ (80019f4 <HAL_RCC_OscConfig+0x314>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4a71      	ldr	r2, [pc, #452]	@ (80019f4 <HAL_RCC_OscConfig+0x314>)
 8001830:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001834:	6013      	str	r3, [r2, #0]
 8001836:	e021      	b.n	800187c <HAL_RCC_OscConfig+0x19c>
 8001838:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800183c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001848:	d10c      	bne.n	8001864 <HAL_RCC_OscConfig+0x184>
 800184a:	4b6a      	ldr	r3, [pc, #424]	@ (80019f4 <HAL_RCC_OscConfig+0x314>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4a69      	ldr	r2, [pc, #420]	@ (80019f4 <HAL_RCC_OscConfig+0x314>)
 8001850:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001854:	6013      	str	r3, [r2, #0]
 8001856:	4b67      	ldr	r3, [pc, #412]	@ (80019f4 <HAL_RCC_OscConfig+0x314>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4a66      	ldr	r2, [pc, #408]	@ (80019f4 <HAL_RCC_OscConfig+0x314>)
 800185c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001860:	6013      	str	r3, [r2, #0]
 8001862:	e00b      	b.n	800187c <HAL_RCC_OscConfig+0x19c>
 8001864:	4b63      	ldr	r3, [pc, #396]	@ (80019f4 <HAL_RCC_OscConfig+0x314>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a62      	ldr	r2, [pc, #392]	@ (80019f4 <HAL_RCC_OscConfig+0x314>)
 800186a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800186e:	6013      	str	r3, [r2, #0]
 8001870:	4b60      	ldr	r3, [pc, #384]	@ (80019f4 <HAL_RCC_OscConfig+0x314>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4a5f      	ldr	r2, [pc, #380]	@ (80019f4 <HAL_RCC_OscConfig+0x314>)
 8001876:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800187a:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800187c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001880:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d059      	beq.n	8001940 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800188c:	f7ff fcac 	bl	80011e8 <HAL_GetTick>
 8001890:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001894:	e00a      	b.n	80018ac <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001896:	f7ff fca7 	bl	80011e8 <HAL_GetTick>
 800189a:	4602      	mov	r2, r0
 800189c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80018a0:	1ad3      	subs	r3, r2, r3
 80018a2:	2b64      	cmp	r3, #100	@ 0x64
 80018a4:	d902      	bls.n	80018ac <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80018a6:	2303      	movs	r3, #3
 80018a8:	f000 bf67 	b.w	800277a <HAL_RCC_OscConfig+0x109a>
 80018ac:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80018b0:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018b4:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 80018b8:	fa93 f3a3 	rbit	r3, r3
 80018bc:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
  return result;
 80018c0:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018c4:	fab3 f383 	clz	r3, r3
 80018c8:	b2db      	uxtb	r3, r3
 80018ca:	095b      	lsrs	r3, r3, #5
 80018cc:	b2db      	uxtb	r3, r3
 80018ce:	f043 0301 	orr.w	r3, r3, #1
 80018d2:	b2db      	uxtb	r3, r3
 80018d4:	2b01      	cmp	r3, #1
 80018d6:	d102      	bne.n	80018de <HAL_RCC_OscConfig+0x1fe>
 80018d8:	4b46      	ldr	r3, [pc, #280]	@ (80019f4 <HAL_RCC_OscConfig+0x314>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	e015      	b.n	800190a <HAL_RCC_OscConfig+0x22a>
 80018de:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80018e2:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018e6:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 80018ea:	fa93 f3a3 	rbit	r3, r3
 80018ee:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 80018f2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80018f6:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 80018fa:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 80018fe:	fa93 f3a3 	rbit	r3, r3
 8001902:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8001906:	4b3b      	ldr	r3, [pc, #236]	@ (80019f4 <HAL_RCC_OscConfig+0x314>)
 8001908:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800190a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800190e:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 8001912:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 8001916:	fa92 f2a2 	rbit	r2, r2
 800191a:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
  return result;
 800191e:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8001922:	fab2 f282 	clz	r2, r2
 8001926:	b2d2      	uxtb	r2, r2
 8001928:	f042 0220 	orr.w	r2, r2, #32
 800192c:	b2d2      	uxtb	r2, r2
 800192e:	f002 021f 	and.w	r2, r2, #31
 8001932:	2101      	movs	r1, #1
 8001934:	fa01 f202 	lsl.w	r2, r1, r2
 8001938:	4013      	ands	r3, r2
 800193a:	2b00      	cmp	r3, #0
 800193c:	d0ab      	beq.n	8001896 <HAL_RCC_OscConfig+0x1b6>
 800193e:	e05c      	b.n	80019fa <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001940:	f7ff fc52 	bl	80011e8 <HAL_GetTick>
 8001944:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001948:	e00a      	b.n	8001960 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800194a:	f7ff fc4d 	bl	80011e8 <HAL_GetTick>
 800194e:	4602      	mov	r2, r0
 8001950:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001954:	1ad3      	subs	r3, r2, r3
 8001956:	2b64      	cmp	r3, #100	@ 0x64
 8001958:	d902      	bls.n	8001960 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 800195a:	2303      	movs	r3, #3
 800195c:	f000 bf0d 	b.w	800277a <HAL_RCC_OscConfig+0x109a>
 8001960:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001964:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001968:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 800196c:	fa93 f3a3 	rbit	r3, r3
 8001970:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
  return result;
 8001974:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001978:	fab3 f383 	clz	r3, r3
 800197c:	b2db      	uxtb	r3, r3
 800197e:	095b      	lsrs	r3, r3, #5
 8001980:	b2db      	uxtb	r3, r3
 8001982:	f043 0301 	orr.w	r3, r3, #1
 8001986:	b2db      	uxtb	r3, r3
 8001988:	2b01      	cmp	r3, #1
 800198a:	d102      	bne.n	8001992 <HAL_RCC_OscConfig+0x2b2>
 800198c:	4b19      	ldr	r3, [pc, #100]	@ (80019f4 <HAL_RCC_OscConfig+0x314>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	e015      	b.n	80019be <HAL_RCC_OscConfig+0x2de>
 8001992:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001996:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800199a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 800199e:	fa93 f3a3 	rbit	r3, r3
 80019a2:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 80019a6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80019aa:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 80019ae:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 80019b2:	fa93 f3a3 	rbit	r3, r3
 80019b6:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 80019ba:	4b0e      	ldr	r3, [pc, #56]	@ (80019f4 <HAL_RCC_OscConfig+0x314>)
 80019bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019be:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80019c2:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 80019c6:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 80019ca:	fa92 f2a2 	rbit	r2, r2
 80019ce:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
  return result;
 80019d2:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 80019d6:	fab2 f282 	clz	r2, r2
 80019da:	b2d2      	uxtb	r2, r2
 80019dc:	f042 0220 	orr.w	r2, r2, #32
 80019e0:	b2d2      	uxtb	r2, r2
 80019e2:	f002 021f 	and.w	r2, r2, #31
 80019e6:	2101      	movs	r1, #1
 80019e8:	fa01 f202 	lsl.w	r2, r1, r2
 80019ec:	4013      	ands	r3, r2
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d1ab      	bne.n	800194a <HAL_RCC_OscConfig+0x26a>
 80019f2:	e002      	b.n	80019fa <HAL_RCC_OscConfig+0x31a>
 80019f4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019fa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80019fe:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f003 0302 	and.w	r3, r3, #2
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	f000 817f 	beq.w	8001d0e <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001a10:	4ba7      	ldr	r3, [pc, #668]	@ (8001cb0 <HAL_RCC_OscConfig+0x5d0>)
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	f003 030c 	and.w	r3, r3, #12
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d00c      	beq.n	8001a36 <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001a1c:	4ba4      	ldr	r3, [pc, #656]	@ (8001cb0 <HAL_RCC_OscConfig+0x5d0>)
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	f003 030c 	and.w	r3, r3, #12
 8001a24:	2b08      	cmp	r3, #8
 8001a26:	d173      	bne.n	8001b10 <HAL_RCC_OscConfig+0x430>
 8001a28:	4ba1      	ldr	r3, [pc, #644]	@ (8001cb0 <HAL_RCC_OscConfig+0x5d0>)
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8001a30:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001a34:	d16c      	bne.n	8001b10 <HAL_RCC_OscConfig+0x430>
 8001a36:	2302      	movs	r3, #2
 8001a38:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a3c:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8001a40:	fa93 f3a3 	rbit	r3, r3
 8001a44:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
  return result;
 8001a48:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a4c:	fab3 f383 	clz	r3, r3
 8001a50:	b2db      	uxtb	r3, r3
 8001a52:	095b      	lsrs	r3, r3, #5
 8001a54:	b2db      	uxtb	r3, r3
 8001a56:	f043 0301 	orr.w	r3, r3, #1
 8001a5a:	b2db      	uxtb	r3, r3
 8001a5c:	2b01      	cmp	r3, #1
 8001a5e:	d102      	bne.n	8001a66 <HAL_RCC_OscConfig+0x386>
 8001a60:	4b93      	ldr	r3, [pc, #588]	@ (8001cb0 <HAL_RCC_OscConfig+0x5d0>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	e013      	b.n	8001a8e <HAL_RCC_OscConfig+0x3ae>
 8001a66:	2302      	movs	r3, #2
 8001a68:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a6c:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8001a70:	fa93 f3a3 	rbit	r3, r3
 8001a74:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 8001a78:	2302      	movs	r3, #2
 8001a7a:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8001a7e:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8001a82:	fa93 f3a3 	rbit	r3, r3
 8001a86:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8001a8a:	4b89      	ldr	r3, [pc, #548]	@ (8001cb0 <HAL_RCC_OscConfig+0x5d0>)
 8001a8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a8e:	2202      	movs	r2, #2
 8001a90:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 8001a94:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 8001a98:	fa92 f2a2 	rbit	r2, r2
 8001a9c:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
  return result;
 8001aa0:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8001aa4:	fab2 f282 	clz	r2, r2
 8001aa8:	b2d2      	uxtb	r2, r2
 8001aaa:	f042 0220 	orr.w	r2, r2, #32
 8001aae:	b2d2      	uxtb	r2, r2
 8001ab0:	f002 021f 	and.w	r2, r2, #31
 8001ab4:	2101      	movs	r1, #1
 8001ab6:	fa01 f202 	lsl.w	r2, r1, r2
 8001aba:	4013      	ands	r3, r2
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d00a      	beq.n	8001ad6 <HAL_RCC_OscConfig+0x3f6>
 8001ac0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ac4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	68db      	ldr	r3, [r3, #12]
 8001acc:	2b01      	cmp	r3, #1
 8001ace:	d002      	beq.n	8001ad6 <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	f000 be52 	b.w	800277a <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ad6:	4b76      	ldr	r3, [pc, #472]	@ (8001cb0 <HAL_RCC_OscConfig+0x5d0>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001ade:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ae2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	691b      	ldr	r3, [r3, #16]
 8001aea:	21f8      	movs	r1, #248	@ 0xf8
 8001aec:	f8c7 1174 	str.w	r1, [r7, #372]	@ 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001af0:	f8d7 1174 	ldr.w	r1, [r7, #372]	@ 0x174
 8001af4:	fa91 f1a1 	rbit	r1, r1
 8001af8:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
  return result;
 8001afc:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8001b00:	fab1 f181 	clz	r1, r1
 8001b04:	b2c9      	uxtb	r1, r1
 8001b06:	408b      	lsls	r3, r1
 8001b08:	4969      	ldr	r1, [pc, #420]	@ (8001cb0 <HAL_RCC_OscConfig+0x5d0>)
 8001b0a:	4313      	orrs	r3, r2
 8001b0c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b0e:	e0fe      	b.n	8001d0e <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b10:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b14:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	68db      	ldr	r3, [r3, #12]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	f000 8088 	beq.w	8001c32 <HAL_RCC_OscConfig+0x552>
 8001b22:	2301      	movs	r3, #1
 8001b24:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b28:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8001b2c:	fa93 f3a3 	rbit	r3, r3
 8001b30:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
  return result;
 8001b34:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b38:	fab3 f383 	clz	r3, r3
 8001b3c:	b2db      	uxtb	r3, r3
 8001b3e:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001b42:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001b46:	009b      	lsls	r3, r3, #2
 8001b48:	461a      	mov	r2, r3
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b4e:	f7ff fb4b 	bl	80011e8 <HAL_GetTick>
 8001b52:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b56:	e00a      	b.n	8001b6e <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b58:	f7ff fb46 	bl	80011e8 <HAL_GetTick>
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001b62:	1ad3      	subs	r3, r2, r3
 8001b64:	2b02      	cmp	r3, #2
 8001b66:	d902      	bls.n	8001b6e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001b68:	2303      	movs	r3, #3
 8001b6a:	f000 be06 	b.w	800277a <HAL_RCC_OscConfig+0x109a>
 8001b6e:	2302      	movs	r3, #2
 8001b70:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b74:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8001b78:	fa93 f3a3 	rbit	r3, r3
 8001b7c:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
  return result;
 8001b80:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b84:	fab3 f383 	clz	r3, r3
 8001b88:	b2db      	uxtb	r3, r3
 8001b8a:	095b      	lsrs	r3, r3, #5
 8001b8c:	b2db      	uxtb	r3, r3
 8001b8e:	f043 0301 	orr.w	r3, r3, #1
 8001b92:	b2db      	uxtb	r3, r3
 8001b94:	2b01      	cmp	r3, #1
 8001b96:	d102      	bne.n	8001b9e <HAL_RCC_OscConfig+0x4be>
 8001b98:	4b45      	ldr	r3, [pc, #276]	@ (8001cb0 <HAL_RCC_OscConfig+0x5d0>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	e013      	b.n	8001bc6 <HAL_RCC_OscConfig+0x4e6>
 8001b9e:	2302      	movs	r3, #2
 8001ba0:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ba4:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8001ba8:	fa93 f3a3 	rbit	r3, r3
 8001bac:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 8001bb0:	2302      	movs	r3, #2
 8001bb2:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8001bb6:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8001bba:	fa93 f3a3 	rbit	r3, r3
 8001bbe:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8001bc2:	4b3b      	ldr	r3, [pc, #236]	@ (8001cb0 <HAL_RCC_OscConfig+0x5d0>)
 8001bc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bc6:	2202      	movs	r2, #2
 8001bc8:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 8001bcc:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8001bd0:	fa92 f2a2 	rbit	r2, r2
 8001bd4:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
  return result;
 8001bd8:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8001bdc:	fab2 f282 	clz	r2, r2
 8001be0:	b2d2      	uxtb	r2, r2
 8001be2:	f042 0220 	orr.w	r2, r2, #32
 8001be6:	b2d2      	uxtb	r2, r2
 8001be8:	f002 021f 	and.w	r2, r2, #31
 8001bec:	2101      	movs	r1, #1
 8001bee:	fa01 f202 	lsl.w	r2, r1, r2
 8001bf2:	4013      	ands	r3, r2
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d0af      	beq.n	8001b58 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bf8:	4b2d      	ldr	r3, [pc, #180]	@ (8001cb0 <HAL_RCC_OscConfig+0x5d0>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001c00:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c04:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	691b      	ldr	r3, [r3, #16]
 8001c0c:	21f8      	movs	r1, #248	@ 0xf8
 8001c0e:	f8c7 1144 	str.w	r1, [r7, #324]	@ 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c12:	f8d7 1144 	ldr.w	r1, [r7, #324]	@ 0x144
 8001c16:	fa91 f1a1 	rbit	r1, r1
 8001c1a:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
  return result;
 8001c1e:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8001c22:	fab1 f181 	clz	r1, r1
 8001c26:	b2c9      	uxtb	r1, r1
 8001c28:	408b      	lsls	r3, r1
 8001c2a:	4921      	ldr	r1, [pc, #132]	@ (8001cb0 <HAL_RCC_OscConfig+0x5d0>)
 8001c2c:	4313      	orrs	r3, r2
 8001c2e:	600b      	str	r3, [r1, #0]
 8001c30:	e06d      	b.n	8001d0e <HAL_RCC_OscConfig+0x62e>
 8001c32:	2301      	movs	r3, #1
 8001c34:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c38:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8001c3c:	fa93 f3a3 	rbit	r3, r3
 8001c40:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  return result;
 8001c44:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c48:	fab3 f383 	clz	r3, r3
 8001c4c:	b2db      	uxtb	r3, r3
 8001c4e:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001c52:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001c56:	009b      	lsls	r3, r3, #2
 8001c58:	461a      	mov	r2, r3
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c5e:	f7ff fac3 	bl	80011e8 <HAL_GetTick>
 8001c62:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c66:	e00a      	b.n	8001c7e <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c68:	f7ff fabe 	bl	80011e8 <HAL_GetTick>
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001c72:	1ad3      	subs	r3, r2, r3
 8001c74:	2b02      	cmp	r3, #2
 8001c76:	d902      	bls.n	8001c7e <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8001c78:	2303      	movs	r3, #3
 8001c7a:	f000 bd7e 	b.w	800277a <HAL_RCC_OscConfig+0x109a>
 8001c7e:	2302      	movs	r3, #2
 8001c80:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c84:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8001c88:	fa93 f3a3 	rbit	r3, r3
 8001c8c:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  return result;
 8001c90:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c94:	fab3 f383 	clz	r3, r3
 8001c98:	b2db      	uxtb	r3, r3
 8001c9a:	095b      	lsrs	r3, r3, #5
 8001c9c:	b2db      	uxtb	r3, r3
 8001c9e:	f043 0301 	orr.w	r3, r3, #1
 8001ca2:	b2db      	uxtb	r3, r3
 8001ca4:	2b01      	cmp	r3, #1
 8001ca6:	d105      	bne.n	8001cb4 <HAL_RCC_OscConfig+0x5d4>
 8001ca8:	4b01      	ldr	r3, [pc, #4]	@ (8001cb0 <HAL_RCC_OscConfig+0x5d0>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	e016      	b.n	8001cdc <HAL_RCC_OscConfig+0x5fc>
 8001cae:	bf00      	nop
 8001cb0:	40021000 	.word	0x40021000
 8001cb4:	2302      	movs	r3, #2
 8001cb6:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cba:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001cbe:	fa93 f3a3 	rbit	r3, r3
 8001cc2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8001cc6:	2302      	movs	r3, #2
 8001cc8:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8001ccc:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8001cd0:	fa93 f3a3 	rbit	r3, r3
 8001cd4:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8001cd8:	4bbf      	ldr	r3, [pc, #764]	@ (8001fd8 <HAL_RCC_OscConfig+0x8f8>)
 8001cda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cdc:	2202      	movs	r2, #2
 8001cde:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 8001ce2:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8001ce6:	fa92 f2a2 	rbit	r2, r2
 8001cea:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
  return result;
 8001cee:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8001cf2:	fab2 f282 	clz	r2, r2
 8001cf6:	b2d2      	uxtb	r2, r2
 8001cf8:	f042 0220 	orr.w	r2, r2, #32
 8001cfc:	b2d2      	uxtb	r2, r2
 8001cfe:	f002 021f 	and.w	r2, r2, #31
 8001d02:	2101      	movs	r1, #1
 8001d04:	fa01 f202 	lsl.w	r2, r1, r2
 8001d08:	4013      	ands	r3, r2
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d1ac      	bne.n	8001c68 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d0e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d12:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f003 0308 	and.w	r3, r3, #8
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	f000 8113 	beq.w	8001f4a <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d24:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d28:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	695b      	ldr	r3, [r3, #20]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d07c      	beq.n	8001e2e <HAL_RCC_OscConfig+0x74e>
 8001d34:	2301      	movs	r3, #1
 8001d36:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001d3e:	fa93 f3a3 	rbit	r3, r3
 8001d42:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  return result;
 8001d46:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d4a:	fab3 f383 	clz	r3, r3
 8001d4e:	b2db      	uxtb	r3, r3
 8001d50:	461a      	mov	r2, r3
 8001d52:	4ba2      	ldr	r3, [pc, #648]	@ (8001fdc <HAL_RCC_OscConfig+0x8fc>)
 8001d54:	4413      	add	r3, r2
 8001d56:	009b      	lsls	r3, r3, #2
 8001d58:	461a      	mov	r2, r3
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d5e:	f7ff fa43 	bl	80011e8 <HAL_GetTick>
 8001d62:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d66:	e00a      	b.n	8001d7e <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d68:	f7ff fa3e 	bl	80011e8 <HAL_GetTick>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001d72:	1ad3      	subs	r3, r2, r3
 8001d74:	2b02      	cmp	r3, #2
 8001d76:	d902      	bls.n	8001d7e <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8001d78:	2303      	movs	r3, #3
 8001d7a:	f000 bcfe 	b.w	800277a <HAL_RCC_OscConfig+0x109a>
 8001d7e:	2302      	movs	r3, #2
 8001d80:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d84:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8001d88:	fa93 f2a3 	rbit	r2, r3
 8001d8c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d90:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001d94:	601a      	str	r2, [r3, #0]
 8001d96:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d9a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001d9e:	2202      	movs	r2, #2
 8001da0:	601a      	str	r2, [r3, #0]
 8001da2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001da6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	fa93 f2a3 	rbit	r2, r3
 8001db0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001db4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001db8:	601a      	str	r2, [r3, #0]
 8001dba:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001dbe:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001dc2:	2202      	movs	r2, #2
 8001dc4:	601a      	str	r2, [r3, #0]
 8001dc6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001dca:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	fa93 f2a3 	rbit	r2, r3
 8001dd4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001dd8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001ddc:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dde:	4b7e      	ldr	r3, [pc, #504]	@ (8001fd8 <HAL_RCC_OscConfig+0x8f8>)
 8001de0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001de2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001de6:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001dea:	2102      	movs	r1, #2
 8001dec:	6019      	str	r1, [r3, #0]
 8001dee:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001df2:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	fa93 f1a3 	rbit	r1, r3
 8001dfc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e00:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001e04:	6019      	str	r1, [r3, #0]
  return result;
 8001e06:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e0a:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	fab3 f383 	clz	r3, r3
 8001e14:	b2db      	uxtb	r3, r3
 8001e16:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001e1a:	b2db      	uxtb	r3, r3
 8001e1c:	f003 031f 	and.w	r3, r3, #31
 8001e20:	2101      	movs	r1, #1
 8001e22:	fa01 f303 	lsl.w	r3, r1, r3
 8001e26:	4013      	ands	r3, r2
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d09d      	beq.n	8001d68 <HAL_RCC_OscConfig+0x688>
 8001e2c:	e08d      	b.n	8001f4a <HAL_RCC_OscConfig+0x86a>
 8001e2e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e32:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001e36:	2201      	movs	r2, #1
 8001e38:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e3a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e3e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	fa93 f2a3 	rbit	r2, r3
 8001e48:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e4c:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001e50:	601a      	str	r2, [r3, #0]
  return result;
 8001e52:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e56:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001e5a:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e5c:	fab3 f383 	clz	r3, r3
 8001e60:	b2db      	uxtb	r3, r3
 8001e62:	461a      	mov	r2, r3
 8001e64:	4b5d      	ldr	r3, [pc, #372]	@ (8001fdc <HAL_RCC_OscConfig+0x8fc>)
 8001e66:	4413      	add	r3, r2
 8001e68:	009b      	lsls	r3, r3, #2
 8001e6a:	461a      	mov	r2, r3
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e70:	f7ff f9ba 	bl	80011e8 <HAL_GetTick>
 8001e74:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e78:	e00a      	b.n	8001e90 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e7a:	f7ff f9b5 	bl	80011e8 <HAL_GetTick>
 8001e7e:	4602      	mov	r2, r0
 8001e80:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001e84:	1ad3      	subs	r3, r2, r3
 8001e86:	2b02      	cmp	r3, #2
 8001e88:	d902      	bls.n	8001e90 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8001e8a:	2303      	movs	r3, #3
 8001e8c:	f000 bc75 	b.w	800277a <HAL_RCC_OscConfig+0x109a>
 8001e90:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e94:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001e98:	2202      	movs	r2, #2
 8001e9a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e9c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ea0:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	fa93 f2a3 	rbit	r2, r3
 8001eaa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001eae:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001eb2:	601a      	str	r2, [r3, #0]
 8001eb4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001eb8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001ebc:	2202      	movs	r2, #2
 8001ebe:	601a      	str	r2, [r3, #0]
 8001ec0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ec4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	fa93 f2a3 	rbit	r2, r3
 8001ece:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ed2:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001ed6:	601a      	str	r2, [r3, #0]
 8001ed8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001edc:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001ee0:	2202      	movs	r2, #2
 8001ee2:	601a      	str	r2, [r3, #0]
 8001ee4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ee8:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	fa93 f2a3 	rbit	r2, r3
 8001ef2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ef6:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001efa:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001efc:	4b36      	ldr	r3, [pc, #216]	@ (8001fd8 <HAL_RCC_OscConfig+0x8f8>)
 8001efe:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001f00:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f04:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001f08:	2102      	movs	r1, #2
 8001f0a:	6019      	str	r1, [r3, #0]
 8001f0c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f10:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	fa93 f1a3 	rbit	r1, r3
 8001f1a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f1e:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001f22:	6019      	str	r1, [r3, #0]
  return result;
 8001f24:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f28:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	fab3 f383 	clz	r3, r3
 8001f32:	b2db      	uxtb	r3, r3
 8001f34:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001f38:	b2db      	uxtb	r3, r3
 8001f3a:	f003 031f 	and.w	r3, r3, #31
 8001f3e:	2101      	movs	r1, #1
 8001f40:	fa01 f303 	lsl.w	r3, r1, r3
 8001f44:	4013      	ands	r3, r2
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d197      	bne.n	8001e7a <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f4a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f4e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f003 0304 	and.w	r3, r3, #4
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	f000 81a5 	beq.w	80022aa <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f60:	2300      	movs	r3, #0
 8001f62:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f66:	4b1c      	ldr	r3, [pc, #112]	@ (8001fd8 <HAL_RCC_OscConfig+0x8f8>)
 8001f68:	69db      	ldr	r3, [r3, #28]
 8001f6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d116      	bne.n	8001fa0 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f72:	4b19      	ldr	r3, [pc, #100]	@ (8001fd8 <HAL_RCC_OscConfig+0x8f8>)
 8001f74:	69db      	ldr	r3, [r3, #28]
 8001f76:	4a18      	ldr	r2, [pc, #96]	@ (8001fd8 <HAL_RCC_OscConfig+0x8f8>)
 8001f78:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f7c:	61d3      	str	r3, [r2, #28]
 8001f7e:	4b16      	ldr	r3, [pc, #88]	@ (8001fd8 <HAL_RCC_OscConfig+0x8f8>)
 8001f80:	69db      	ldr	r3, [r3, #28]
 8001f82:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8001f86:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f8a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001f8e:	601a      	str	r2, [r3, #0]
 8001f90:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f94:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001f98:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fa0:	4b0f      	ldr	r3, [pc, #60]	@ (8001fe0 <HAL_RCC_OscConfig+0x900>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d121      	bne.n	8001ff0 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001fac:	4b0c      	ldr	r3, [pc, #48]	@ (8001fe0 <HAL_RCC_OscConfig+0x900>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a0b      	ldr	r2, [pc, #44]	@ (8001fe0 <HAL_RCC_OscConfig+0x900>)
 8001fb2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001fb6:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fb8:	f7ff f916 	bl	80011e8 <HAL_GetTick>
 8001fbc:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fc0:	e010      	b.n	8001fe4 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fc2:	f7ff f911 	bl	80011e8 <HAL_GetTick>
 8001fc6:	4602      	mov	r2, r0
 8001fc8:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001fcc:	1ad3      	subs	r3, r2, r3
 8001fce:	2b64      	cmp	r3, #100	@ 0x64
 8001fd0:	d908      	bls.n	8001fe4 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 8001fd2:	2303      	movs	r3, #3
 8001fd4:	e3d1      	b.n	800277a <HAL_RCC_OscConfig+0x109a>
 8001fd6:	bf00      	nop
 8001fd8:	40021000 	.word	0x40021000
 8001fdc:	10908120 	.word	0x10908120
 8001fe0:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fe4:	4b8d      	ldr	r3, [pc, #564]	@ (800221c <HAL_RCC_OscConfig+0xb3c>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d0e8      	beq.n	8001fc2 <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ff0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ff4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	689b      	ldr	r3, [r3, #8]
 8001ffc:	2b01      	cmp	r3, #1
 8001ffe:	d106      	bne.n	800200e <HAL_RCC_OscConfig+0x92e>
 8002000:	4b87      	ldr	r3, [pc, #540]	@ (8002220 <HAL_RCC_OscConfig+0xb40>)
 8002002:	6a1b      	ldr	r3, [r3, #32]
 8002004:	4a86      	ldr	r2, [pc, #536]	@ (8002220 <HAL_RCC_OscConfig+0xb40>)
 8002006:	f043 0301 	orr.w	r3, r3, #1
 800200a:	6213      	str	r3, [r2, #32]
 800200c:	e035      	b.n	800207a <HAL_RCC_OscConfig+0x99a>
 800200e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002012:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	689b      	ldr	r3, [r3, #8]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d10c      	bne.n	8002038 <HAL_RCC_OscConfig+0x958>
 800201e:	4b80      	ldr	r3, [pc, #512]	@ (8002220 <HAL_RCC_OscConfig+0xb40>)
 8002020:	6a1b      	ldr	r3, [r3, #32]
 8002022:	4a7f      	ldr	r2, [pc, #508]	@ (8002220 <HAL_RCC_OscConfig+0xb40>)
 8002024:	f023 0301 	bic.w	r3, r3, #1
 8002028:	6213      	str	r3, [r2, #32]
 800202a:	4b7d      	ldr	r3, [pc, #500]	@ (8002220 <HAL_RCC_OscConfig+0xb40>)
 800202c:	6a1b      	ldr	r3, [r3, #32]
 800202e:	4a7c      	ldr	r2, [pc, #496]	@ (8002220 <HAL_RCC_OscConfig+0xb40>)
 8002030:	f023 0304 	bic.w	r3, r3, #4
 8002034:	6213      	str	r3, [r2, #32]
 8002036:	e020      	b.n	800207a <HAL_RCC_OscConfig+0x99a>
 8002038:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800203c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	689b      	ldr	r3, [r3, #8]
 8002044:	2b05      	cmp	r3, #5
 8002046:	d10c      	bne.n	8002062 <HAL_RCC_OscConfig+0x982>
 8002048:	4b75      	ldr	r3, [pc, #468]	@ (8002220 <HAL_RCC_OscConfig+0xb40>)
 800204a:	6a1b      	ldr	r3, [r3, #32]
 800204c:	4a74      	ldr	r2, [pc, #464]	@ (8002220 <HAL_RCC_OscConfig+0xb40>)
 800204e:	f043 0304 	orr.w	r3, r3, #4
 8002052:	6213      	str	r3, [r2, #32]
 8002054:	4b72      	ldr	r3, [pc, #456]	@ (8002220 <HAL_RCC_OscConfig+0xb40>)
 8002056:	6a1b      	ldr	r3, [r3, #32]
 8002058:	4a71      	ldr	r2, [pc, #452]	@ (8002220 <HAL_RCC_OscConfig+0xb40>)
 800205a:	f043 0301 	orr.w	r3, r3, #1
 800205e:	6213      	str	r3, [r2, #32]
 8002060:	e00b      	b.n	800207a <HAL_RCC_OscConfig+0x99a>
 8002062:	4b6f      	ldr	r3, [pc, #444]	@ (8002220 <HAL_RCC_OscConfig+0xb40>)
 8002064:	6a1b      	ldr	r3, [r3, #32]
 8002066:	4a6e      	ldr	r2, [pc, #440]	@ (8002220 <HAL_RCC_OscConfig+0xb40>)
 8002068:	f023 0301 	bic.w	r3, r3, #1
 800206c:	6213      	str	r3, [r2, #32]
 800206e:	4b6c      	ldr	r3, [pc, #432]	@ (8002220 <HAL_RCC_OscConfig+0xb40>)
 8002070:	6a1b      	ldr	r3, [r3, #32]
 8002072:	4a6b      	ldr	r2, [pc, #428]	@ (8002220 <HAL_RCC_OscConfig+0xb40>)
 8002074:	f023 0304 	bic.w	r3, r3, #4
 8002078:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800207a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800207e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	689b      	ldr	r3, [r3, #8]
 8002086:	2b00      	cmp	r3, #0
 8002088:	f000 8081 	beq.w	800218e <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800208c:	f7ff f8ac 	bl	80011e8 <HAL_GetTick>
 8002090:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002094:	e00b      	b.n	80020ae <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002096:	f7ff f8a7 	bl	80011e8 <HAL_GetTick>
 800209a:	4602      	mov	r2, r0
 800209c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80020a0:	1ad3      	subs	r3, r2, r3
 80020a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d901      	bls.n	80020ae <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 80020aa:	2303      	movs	r3, #3
 80020ac:	e365      	b.n	800277a <HAL_RCC_OscConfig+0x109a>
 80020ae:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80020b2:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80020b6:	2202      	movs	r2, #2
 80020b8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ba:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80020be:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	fa93 f2a3 	rbit	r2, r3
 80020c8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80020cc:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80020d0:	601a      	str	r2, [r3, #0]
 80020d2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80020d6:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80020da:	2202      	movs	r2, #2
 80020dc:	601a      	str	r2, [r3, #0]
 80020de:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80020e2:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	fa93 f2a3 	rbit	r2, r3
 80020ec:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80020f0:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80020f4:	601a      	str	r2, [r3, #0]
  return result;
 80020f6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80020fa:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80020fe:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002100:	fab3 f383 	clz	r3, r3
 8002104:	b2db      	uxtb	r3, r3
 8002106:	095b      	lsrs	r3, r3, #5
 8002108:	b2db      	uxtb	r3, r3
 800210a:	f043 0302 	orr.w	r3, r3, #2
 800210e:	b2db      	uxtb	r3, r3
 8002110:	2b02      	cmp	r3, #2
 8002112:	d102      	bne.n	800211a <HAL_RCC_OscConfig+0xa3a>
 8002114:	4b42      	ldr	r3, [pc, #264]	@ (8002220 <HAL_RCC_OscConfig+0xb40>)
 8002116:	6a1b      	ldr	r3, [r3, #32]
 8002118:	e013      	b.n	8002142 <HAL_RCC_OscConfig+0xa62>
 800211a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800211e:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8002122:	2202      	movs	r2, #2
 8002124:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002126:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800212a:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	fa93 f2a3 	rbit	r2, r3
 8002134:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002138:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 800213c:	601a      	str	r2, [r3, #0]
 800213e:	4b38      	ldr	r3, [pc, #224]	@ (8002220 <HAL_RCC_OscConfig+0xb40>)
 8002140:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002142:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002146:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 800214a:	2102      	movs	r1, #2
 800214c:	6011      	str	r1, [r2, #0]
 800214e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002152:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002156:	6812      	ldr	r2, [r2, #0]
 8002158:	fa92 f1a2 	rbit	r1, r2
 800215c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002160:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 8002164:	6011      	str	r1, [r2, #0]
  return result;
 8002166:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800216a:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 800216e:	6812      	ldr	r2, [r2, #0]
 8002170:	fab2 f282 	clz	r2, r2
 8002174:	b2d2      	uxtb	r2, r2
 8002176:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800217a:	b2d2      	uxtb	r2, r2
 800217c:	f002 021f 	and.w	r2, r2, #31
 8002180:	2101      	movs	r1, #1
 8002182:	fa01 f202 	lsl.w	r2, r1, r2
 8002186:	4013      	ands	r3, r2
 8002188:	2b00      	cmp	r3, #0
 800218a:	d084      	beq.n	8002096 <HAL_RCC_OscConfig+0x9b6>
 800218c:	e083      	b.n	8002296 <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800218e:	f7ff f82b 	bl	80011e8 <HAL_GetTick>
 8002192:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002196:	e00b      	b.n	80021b0 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002198:	f7ff f826 	bl	80011e8 <HAL_GetTick>
 800219c:	4602      	mov	r2, r0
 800219e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80021a2:	1ad3      	subs	r3, r2, r3
 80021a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d901      	bls.n	80021b0 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 80021ac:	2303      	movs	r3, #3
 80021ae:	e2e4      	b.n	800277a <HAL_RCC_OscConfig+0x109a>
 80021b0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80021b4:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80021b8:	2202      	movs	r2, #2
 80021ba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021bc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80021c0:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	fa93 f2a3 	rbit	r2, r3
 80021ca:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80021ce:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80021d2:	601a      	str	r2, [r3, #0]
 80021d4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80021d8:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80021dc:	2202      	movs	r2, #2
 80021de:	601a      	str	r2, [r3, #0]
 80021e0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80021e4:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	fa93 f2a3 	rbit	r2, r3
 80021ee:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80021f2:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80021f6:	601a      	str	r2, [r3, #0]
  return result;
 80021f8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80021fc:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002200:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002202:	fab3 f383 	clz	r3, r3
 8002206:	b2db      	uxtb	r3, r3
 8002208:	095b      	lsrs	r3, r3, #5
 800220a:	b2db      	uxtb	r3, r3
 800220c:	f043 0302 	orr.w	r3, r3, #2
 8002210:	b2db      	uxtb	r3, r3
 8002212:	2b02      	cmp	r3, #2
 8002214:	d106      	bne.n	8002224 <HAL_RCC_OscConfig+0xb44>
 8002216:	4b02      	ldr	r3, [pc, #8]	@ (8002220 <HAL_RCC_OscConfig+0xb40>)
 8002218:	6a1b      	ldr	r3, [r3, #32]
 800221a:	e017      	b.n	800224c <HAL_RCC_OscConfig+0xb6c>
 800221c:	40007000 	.word	0x40007000
 8002220:	40021000 	.word	0x40021000
 8002224:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002228:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 800222c:	2202      	movs	r2, #2
 800222e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002230:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002234:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	fa93 f2a3 	rbit	r2, r3
 800223e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002242:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8002246:	601a      	str	r2, [r3, #0]
 8002248:	4bb3      	ldr	r3, [pc, #716]	@ (8002518 <HAL_RCC_OscConfig+0xe38>)
 800224a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800224c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002250:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002254:	2102      	movs	r1, #2
 8002256:	6011      	str	r1, [r2, #0]
 8002258:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800225c:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002260:	6812      	ldr	r2, [r2, #0]
 8002262:	fa92 f1a2 	rbit	r1, r2
 8002266:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800226a:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 800226e:	6011      	str	r1, [r2, #0]
  return result;
 8002270:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002274:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8002278:	6812      	ldr	r2, [r2, #0]
 800227a:	fab2 f282 	clz	r2, r2
 800227e:	b2d2      	uxtb	r2, r2
 8002280:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002284:	b2d2      	uxtb	r2, r2
 8002286:	f002 021f 	and.w	r2, r2, #31
 800228a:	2101      	movs	r1, #1
 800228c:	fa01 f202 	lsl.w	r2, r1, r2
 8002290:	4013      	ands	r3, r2
 8002292:	2b00      	cmp	r3, #0
 8002294:	d180      	bne.n	8002198 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002296:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 800229a:	2b01      	cmp	r3, #1
 800229c:	d105      	bne.n	80022aa <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800229e:	4b9e      	ldr	r3, [pc, #632]	@ (8002518 <HAL_RCC_OscConfig+0xe38>)
 80022a0:	69db      	ldr	r3, [r3, #28]
 80022a2:	4a9d      	ldr	r2, [pc, #628]	@ (8002518 <HAL_RCC_OscConfig+0xe38>)
 80022a4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80022a8:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022aa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80022ae:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	699b      	ldr	r3, [r3, #24]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	f000 825e 	beq.w	8002778 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80022bc:	4b96      	ldr	r3, [pc, #600]	@ (8002518 <HAL_RCC_OscConfig+0xe38>)
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	f003 030c 	and.w	r3, r3, #12
 80022c4:	2b08      	cmp	r3, #8
 80022c6:	f000 821f 	beq.w	8002708 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022ca:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80022ce:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	699b      	ldr	r3, [r3, #24]
 80022d6:	2b02      	cmp	r3, #2
 80022d8:	f040 8170 	bne.w	80025bc <HAL_RCC_OscConfig+0xedc>
 80022dc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80022e0:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80022e4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80022e8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ea:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80022ee:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	fa93 f2a3 	rbit	r2, r3
 80022f8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80022fc:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002300:	601a      	str	r2, [r3, #0]
  return result;
 8002302:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002306:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800230a:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800230c:	fab3 f383 	clz	r3, r3
 8002310:	b2db      	uxtb	r3, r3
 8002312:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002316:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800231a:	009b      	lsls	r3, r3, #2
 800231c:	461a      	mov	r2, r3
 800231e:	2300      	movs	r3, #0
 8002320:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002322:	f7fe ff61 	bl	80011e8 <HAL_GetTick>
 8002326:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800232a:	e009      	b.n	8002340 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800232c:	f7fe ff5c 	bl	80011e8 <HAL_GetTick>
 8002330:	4602      	mov	r2, r0
 8002332:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002336:	1ad3      	subs	r3, r2, r3
 8002338:	2b02      	cmp	r3, #2
 800233a:	d901      	bls.n	8002340 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 800233c:	2303      	movs	r3, #3
 800233e:	e21c      	b.n	800277a <HAL_RCC_OscConfig+0x109a>
 8002340:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002344:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002348:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800234c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800234e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002352:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	fa93 f2a3 	rbit	r2, r3
 800235c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002360:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002364:	601a      	str	r2, [r3, #0]
  return result;
 8002366:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800236a:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800236e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002370:	fab3 f383 	clz	r3, r3
 8002374:	b2db      	uxtb	r3, r3
 8002376:	095b      	lsrs	r3, r3, #5
 8002378:	b2db      	uxtb	r3, r3
 800237a:	f043 0301 	orr.w	r3, r3, #1
 800237e:	b2db      	uxtb	r3, r3
 8002380:	2b01      	cmp	r3, #1
 8002382:	d102      	bne.n	800238a <HAL_RCC_OscConfig+0xcaa>
 8002384:	4b64      	ldr	r3, [pc, #400]	@ (8002518 <HAL_RCC_OscConfig+0xe38>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	e027      	b.n	80023da <HAL_RCC_OscConfig+0xcfa>
 800238a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800238e:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002392:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002396:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002398:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800239c:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	fa93 f2a3 	rbit	r2, r3
 80023a6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80023aa:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80023ae:	601a      	str	r2, [r3, #0]
 80023b0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80023b4:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80023b8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80023bc:	601a      	str	r2, [r3, #0]
 80023be:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80023c2:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	fa93 f2a3 	rbit	r2, r3
 80023cc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80023d0:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 80023d4:	601a      	str	r2, [r3, #0]
 80023d6:	4b50      	ldr	r3, [pc, #320]	@ (8002518 <HAL_RCC_OscConfig+0xe38>)
 80023d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023da:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80023de:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80023e2:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80023e6:	6011      	str	r1, [r2, #0]
 80023e8:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80023ec:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80023f0:	6812      	ldr	r2, [r2, #0]
 80023f2:	fa92 f1a2 	rbit	r1, r2
 80023f6:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80023fa:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 80023fe:	6011      	str	r1, [r2, #0]
  return result;
 8002400:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002404:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8002408:	6812      	ldr	r2, [r2, #0]
 800240a:	fab2 f282 	clz	r2, r2
 800240e:	b2d2      	uxtb	r2, r2
 8002410:	f042 0220 	orr.w	r2, r2, #32
 8002414:	b2d2      	uxtb	r2, r2
 8002416:	f002 021f 	and.w	r2, r2, #31
 800241a:	2101      	movs	r1, #1
 800241c:	fa01 f202 	lsl.w	r2, r1, r2
 8002420:	4013      	ands	r3, r2
 8002422:	2b00      	cmp	r3, #0
 8002424:	d182      	bne.n	800232c <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002426:	4b3c      	ldr	r3, [pc, #240]	@ (8002518 <HAL_RCC_OscConfig+0xe38>)
 8002428:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800242a:	f023 020f 	bic.w	r2, r3, #15
 800242e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002432:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800243a:	4937      	ldr	r1, [pc, #220]	@ (8002518 <HAL_RCC_OscConfig+0xe38>)
 800243c:	4313      	orrs	r3, r2
 800243e:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8002440:	4b35      	ldr	r3, [pc, #212]	@ (8002518 <HAL_RCC_OscConfig+0xe38>)
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	f423 1276 	bic.w	r2, r3, #4030464	@ 0x3d8000
 8002448:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800244c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	6a19      	ldr	r1, [r3, #32]
 8002454:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002458:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	69db      	ldr	r3, [r3, #28]
 8002460:	430b      	orrs	r3, r1
 8002462:	492d      	ldr	r1, [pc, #180]	@ (8002518 <HAL_RCC_OscConfig+0xe38>)
 8002464:	4313      	orrs	r3, r2
 8002466:	604b      	str	r3, [r1, #4]
 8002468:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800246c:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002470:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002474:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002476:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800247a:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	fa93 f2a3 	rbit	r2, r3
 8002484:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002488:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 800248c:	601a      	str	r2, [r3, #0]
  return result;
 800248e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002492:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002496:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002498:	fab3 f383 	clz	r3, r3
 800249c:	b2db      	uxtb	r3, r3
 800249e:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80024a2:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80024a6:	009b      	lsls	r3, r3, #2
 80024a8:	461a      	mov	r2, r3
 80024aa:	2301      	movs	r3, #1
 80024ac:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024ae:	f7fe fe9b 	bl	80011e8 <HAL_GetTick>
 80024b2:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80024b6:	e009      	b.n	80024cc <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024b8:	f7fe fe96 	bl	80011e8 <HAL_GetTick>
 80024bc:	4602      	mov	r2, r0
 80024be:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80024c2:	1ad3      	subs	r3, r2, r3
 80024c4:	2b02      	cmp	r3, #2
 80024c6:	d901      	bls.n	80024cc <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 80024c8:	2303      	movs	r3, #3
 80024ca:	e156      	b.n	800277a <HAL_RCC_OscConfig+0x109a>
 80024cc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80024d0:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80024d4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80024d8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024da:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80024de:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	fa93 f2a3 	rbit	r2, r3
 80024e8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80024ec:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80024f0:	601a      	str	r2, [r3, #0]
  return result;
 80024f2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80024f6:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80024fa:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80024fc:	fab3 f383 	clz	r3, r3
 8002500:	b2db      	uxtb	r3, r3
 8002502:	095b      	lsrs	r3, r3, #5
 8002504:	b2db      	uxtb	r3, r3
 8002506:	f043 0301 	orr.w	r3, r3, #1
 800250a:	b2db      	uxtb	r3, r3
 800250c:	2b01      	cmp	r3, #1
 800250e:	d105      	bne.n	800251c <HAL_RCC_OscConfig+0xe3c>
 8002510:	4b01      	ldr	r3, [pc, #4]	@ (8002518 <HAL_RCC_OscConfig+0xe38>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	e02a      	b.n	800256c <HAL_RCC_OscConfig+0xe8c>
 8002516:	bf00      	nop
 8002518:	40021000 	.word	0x40021000
 800251c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002520:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002524:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002528:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800252a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800252e:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	fa93 f2a3 	rbit	r2, r3
 8002538:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800253c:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002540:	601a      	str	r2, [r3, #0]
 8002542:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002546:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 800254a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800254e:	601a      	str	r2, [r3, #0]
 8002550:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002554:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	fa93 f2a3 	rbit	r2, r3
 800255e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002562:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 8002566:	601a      	str	r2, [r3, #0]
 8002568:	4b86      	ldr	r3, [pc, #536]	@ (8002784 <HAL_RCC_OscConfig+0x10a4>)
 800256a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800256c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002570:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002574:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002578:	6011      	str	r1, [r2, #0]
 800257a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800257e:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002582:	6812      	ldr	r2, [r2, #0]
 8002584:	fa92 f1a2 	rbit	r1, r2
 8002588:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800258c:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8002590:	6011      	str	r1, [r2, #0]
  return result;
 8002592:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002596:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 800259a:	6812      	ldr	r2, [r2, #0]
 800259c:	fab2 f282 	clz	r2, r2
 80025a0:	b2d2      	uxtb	r2, r2
 80025a2:	f042 0220 	orr.w	r2, r2, #32
 80025a6:	b2d2      	uxtb	r2, r2
 80025a8:	f002 021f 	and.w	r2, r2, #31
 80025ac:	2101      	movs	r1, #1
 80025ae:	fa01 f202 	lsl.w	r2, r1, r2
 80025b2:	4013      	ands	r3, r2
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	f43f af7f 	beq.w	80024b8 <HAL_RCC_OscConfig+0xdd8>
 80025ba:	e0dd      	b.n	8002778 <HAL_RCC_OscConfig+0x1098>
 80025bc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80025c0:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80025c4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80025c8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ca:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80025ce:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	fa93 f2a3 	rbit	r2, r3
 80025d8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80025dc:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80025e0:	601a      	str	r2, [r3, #0]
  return result;
 80025e2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80025e6:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80025ea:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025ec:	fab3 f383 	clz	r3, r3
 80025f0:	b2db      	uxtb	r3, r3
 80025f2:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80025f6:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80025fa:	009b      	lsls	r3, r3, #2
 80025fc:	461a      	mov	r2, r3
 80025fe:	2300      	movs	r3, #0
 8002600:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002602:	f7fe fdf1 	bl	80011e8 <HAL_GetTick>
 8002606:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800260a:	e009      	b.n	8002620 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800260c:	f7fe fdec 	bl	80011e8 <HAL_GetTick>
 8002610:	4602      	mov	r2, r0
 8002612:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002616:	1ad3      	subs	r3, r2, r3
 8002618:	2b02      	cmp	r3, #2
 800261a:	d901      	bls.n	8002620 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 800261c:	2303      	movs	r3, #3
 800261e:	e0ac      	b.n	800277a <HAL_RCC_OscConfig+0x109a>
 8002620:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002624:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002628:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800262c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800262e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002632:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	fa93 f2a3 	rbit	r2, r3
 800263c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002640:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002644:	601a      	str	r2, [r3, #0]
  return result;
 8002646:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800264a:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 800264e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002650:	fab3 f383 	clz	r3, r3
 8002654:	b2db      	uxtb	r3, r3
 8002656:	095b      	lsrs	r3, r3, #5
 8002658:	b2db      	uxtb	r3, r3
 800265a:	f043 0301 	orr.w	r3, r3, #1
 800265e:	b2db      	uxtb	r3, r3
 8002660:	2b01      	cmp	r3, #1
 8002662:	d102      	bne.n	800266a <HAL_RCC_OscConfig+0xf8a>
 8002664:	4b47      	ldr	r3, [pc, #284]	@ (8002784 <HAL_RCC_OscConfig+0x10a4>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	e027      	b.n	80026ba <HAL_RCC_OscConfig+0xfda>
 800266a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800266e:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8002672:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002676:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002678:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800267c:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	fa93 f2a3 	rbit	r2, r3
 8002686:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800268a:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 800268e:	601a      	str	r2, [r3, #0]
 8002690:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002694:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8002698:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800269c:	601a      	str	r2, [r3, #0]
 800269e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80026a2:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	fa93 f2a3 	rbit	r2, r3
 80026ac:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80026b0:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 80026b4:	601a      	str	r2, [r3, #0]
 80026b6:	4b33      	ldr	r3, [pc, #204]	@ (8002784 <HAL_RCC_OscConfig+0x10a4>)
 80026b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026ba:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80026be:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80026c2:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80026c6:	6011      	str	r1, [r2, #0]
 80026c8:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80026cc:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80026d0:	6812      	ldr	r2, [r2, #0]
 80026d2:	fa92 f1a2 	rbit	r1, r2
 80026d6:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80026da:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 80026de:	6011      	str	r1, [r2, #0]
  return result;
 80026e0:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80026e4:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 80026e8:	6812      	ldr	r2, [r2, #0]
 80026ea:	fab2 f282 	clz	r2, r2
 80026ee:	b2d2      	uxtb	r2, r2
 80026f0:	f042 0220 	orr.w	r2, r2, #32
 80026f4:	b2d2      	uxtb	r2, r2
 80026f6:	f002 021f 	and.w	r2, r2, #31
 80026fa:	2101      	movs	r1, #1
 80026fc:	fa01 f202 	lsl.w	r2, r1, r2
 8002700:	4013      	ands	r3, r2
 8002702:	2b00      	cmp	r3, #0
 8002704:	d182      	bne.n	800260c <HAL_RCC_OscConfig+0xf2c>
 8002706:	e037      	b.n	8002778 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002708:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800270c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	699b      	ldr	r3, [r3, #24]
 8002714:	2b01      	cmp	r3, #1
 8002716:	d101      	bne.n	800271c <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8002718:	2301      	movs	r3, #1
 800271a:	e02e      	b.n	800277a <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800271c:	4b19      	ldr	r3, [pc, #100]	@ (8002784 <HAL_RCC_OscConfig+0x10a4>)
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8002724:	4b17      	ldr	r3, [pc, #92]	@ (8002784 <HAL_RCC_OscConfig+0x10a4>)
 8002726:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002728:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800272c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8002730:	f403 32c0 	and.w	r2, r3, #98304	@ 0x18000
 8002734:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002738:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	69db      	ldr	r3, [r3, #28]
 8002740:	429a      	cmp	r2, r3
 8002742:	d117      	bne.n	8002774 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002744:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8002748:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800274c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002750:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002758:	429a      	cmp	r2, r3
 800275a:	d10b      	bne.n	8002774 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 800275c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002760:	f003 020f 	and.w	r2, r3, #15
 8002764:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002768:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002770:	429a      	cmp	r2, r3
 8002772:	d001      	beq.n	8002778 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8002774:	2301      	movs	r3, #1
 8002776:	e000      	b.n	800277a <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8002778:	2300      	movs	r3, #0
}
 800277a:	4618      	mov	r0, r3
 800277c:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 8002780:	46bd      	mov	sp, r7
 8002782:	bd80      	pop	{r7, pc}
 8002784:	40021000 	.word	0x40021000

08002788 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b09e      	sub	sp, #120	@ 0x78
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
 8002790:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002792:	2300      	movs	r3, #0
 8002794:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d101      	bne.n	80027a0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800279c:	2301      	movs	r3, #1
 800279e:	e162      	b.n	8002a66 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80027a0:	4b90      	ldr	r3, [pc, #576]	@ (80029e4 <HAL_RCC_ClockConfig+0x25c>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f003 0307 	and.w	r3, r3, #7
 80027a8:	683a      	ldr	r2, [r7, #0]
 80027aa:	429a      	cmp	r2, r3
 80027ac:	d910      	bls.n	80027d0 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027ae:	4b8d      	ldr	r3, [pc, #564]	@ (80029e4 <HAL_RCC_ClockConfig+0x25c>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f023 0207 	bic.w	r2, r3, #7
 80027b6:	498b      	ldr	r1, [pc, #556]	@ (80029e4 <HAL_RCC_ClockConfig+0x25c>)
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	4313      	orrs	r3, r2
 80027bc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027be:	4b89      	ldr	r3, [pc, #548]	@ (80029e4 <HAL_RCC_ClockConfig+0x25c>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f003 0307 	and.w	r3, r3, #7
 80027c6:	683a      	ldr	r2, [r7, #0]
 80027c8:	429a      	cmp	r2, r3
 80027ca:	d001      	beq.n	80027d0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80027cc:	2301      	movs	r3, #1
 80027ce:	e14a      	b.n	8002a66 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f003 0302 	and.w	r3, r3, #2
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d008      	beq.n	80027ee <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027dc:	4b82      	ldr	r3, [pc, #520]	@ (80029e8 <HAL_RCC_ClockConfig+0x260>)
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	689b      	ldr	r3, [r3, #8]
 80027e8:	497f      	ldr	r1, [pc, #508]	@ (80029e8 <HAL_RCC_ClockConfig+0x260>)
 80027ea:	4313      	orrs	r3, r2
 80027ec:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f003 0301 	and.w	r3, r3, #1
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	f000 80dc 	beq.w	80029b4 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	2b01      	cmp	r3, #1
 8002802:	d13c      	bne.n	800287e <HAL_RCC_ClockConfig+0xf6>
 8002804:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002808:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800280a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800280c:	fa93 f3a3 	rbit	r3, r3
 8002810:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002812:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002814:	fab3 f383 	clz	r3, r3
 8002818:	b2db      	uxtb	r3, r3
 800281a:	095b      	lsrs	r3, r3, #5
 800281c:	b2db      	uxtb	r3, r3
 800281e:	f043 0301 	orr.w	r3, r3, #1
 8002822:	b2db      	uxtb	r3, r3
 8002824:	2b01      	cmp	r3, #1
 8002826:	d102      	bne.n	800282e <HAL_RCC_ClockConfig+0xa6>
 8002828:	4b6f      	ldr	r3, [pc, #444]	@ (80029e8 <HAL_RCC_ClockConfig+0x260>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	e00f      	b.n	800284e <HAL_RCC_ClockConfig+0xc6>
 800282e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002832:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002834:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002836:	fa93 f3a3 	rbit	r3, r3
 800283a:	667b      	str	r3, [r7, #100]	@ 0x64
 800283c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002840:	663b      	str	r3, [r7, #96]	@ 0x60
 8002842:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002844:	fa93 f3a3 	rbit	r3, r3
 8002848:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800284a:	4b67      	ldr	r3, [pc, #412]	@ (80029e8 <HAL_RCC_ClockConfig+0x260>)
 800284c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800284e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002852:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002854:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002856:	fa92 f2a2 	rbit	r2, r2
 800285a:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 800285c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800285e:	fab2 f282 	clz	r2, r2
 8002862:	b2d2      	uxtb	r2, r2
 8002864:	f042 0220 	orr.w	r2, r2, #32
 8002868:	b2d2      	uxtb	r2, r2
 800286a:	f002 021f 	and.w	r2, r2, #31
 800286e:	2101      	movs	r1, #1
 8002870:	fa01 f202 	lsl.w	r2, r1, r2
 8002874:	4013      	ands	r3, r2
 8002876:	2b00      	cmp	r3, #0
 8002878:	d17b      	bne.n	8002972 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800287a:	2301      	movs	r3, #1
 800287c:	e0f3      	b.n	8002a66 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	2b02      	cmp	r3, #2
 8002884:	d13c      	bne.n	8002900 <HAL_RCC_ClockConfig+0x178>
 8002886:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800288a:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800288c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800288e:	fa93 f3a3 	rbit	r3, r3
 8002892:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002894:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002896:	fab3 f383 	clz	r3, r3
 800289a:	b2db      	uxtb	r3, r3
 800289c:	095b      	lsrs	r3, r3, #5
 800289e:	b2db      	uxtb	r3, r3
 80028a0:	f043 0301 	orr.w	r3, r3, #1
 80028a4:	b2db      	uxtb	r3, r3
 80028a6:	2b01      	cmp	r3, #1
 80028a8:	d102      	bne.n	80028b0 <HAL_RCC_ClockConfig+0x128>
 80028aa:	4b4f      	ldr	r3, [pc, #316]	@ (80029e8 <HAL_RCC_ClockConfig+0x260>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	e00f      	b.n	80028d0 <HAL_RCC_ClockConfig+0x148>
 80028b0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80028b4:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028b6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80028b8:	fa93 f3a3 	rbit	r3, r3
 80028bc:	647b      	str	r3, [r7, #68]	@ 0x44
 80028be:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80028c2:	643b      	str	r3, [r7, #64]	@ 0x40
 80028c4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80028c6:	fa93 f3a3 	rbit	r3, r3
 80028ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80028cc:	4b46      	ldr	r3, [pc, #280]	@ (80029e8 <HAL_RCC_ClockConfig+0x260>)
 80028ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028d0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80028d4:	63ba      	str	r2, [r7, #56]	@ 0x38
 80028d6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80028d8:	fa92 f2a2 	rbit	r2, r2
 80028dc:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 80028de:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80028e0:	fab2 f282 	clz	r2, r2
 80028e4:	b2d2      	uxtb	r2, r2
 80028e6:	f042 0220 	orr.w	r2, r2, #32
 80028ea:	b2d2      	uxtb	r2, r2
 80028ec:	f002 021f 	and.w	r2, r2, #31
 80028f0:	2101      	movs	r1, #1
 80028f2:	fa01 f202 	lsl.w	r2, r1, r2
 80028f6:	4013      	ands	r3, r2
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d13a      	bne.n	8002972 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80028fc:	2301      	movs	r3, #1
 80028fe:	e0b2      	b.n	8002a66 <HAL_RCC_ClockConfig+0x2de>
 8002900:	2302      	movs	r3, #2
 8002902:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002904:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002906:	fa93 f3a3 	rbit	r3, r3
 800290a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 800290c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800290e:	fab3 f383 	clz	r3, r3
 8002912:	b2db      	uxtb	r3, r3
 8002914:	095b      	lsrs	r3, r3, #5
 8002916:	b2db      	uxtb	r3, r3
 8002918:	f043 0301 	orr.w	r3, r3, #1
 800291c:	b2db      	uxtb	r3, r3
 800291e:	2b01      	cmp	r3, #1
 8002920:	d102      	bne.n	8002928 <HAL_RCC_ClockConfig+0x1a0>
 8002922:	4b31      	ldr	r3, [pc, #196]	@ (80029e8 <HAL_RCC_ClockConfig+0x260>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	e00d      	b.n	8002944 <HAL_RCC_ClockConfig+0x1bc>
 8002928:	2302      	movs	r3, #2
 800292a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800292c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800292e:	fa93 f3a3 	rbit	r3, r3
 8002932:	627b      	str	r3, [r7, #36]	@ 0x24
 8002934:	2302      	movs	r3, #2
 8002936:	623b      	str	r3, [r7, #32]
 8002938:	6a3b      	ldr	r3, [r7, #32]
 800293a:	fa93 f3a3 	rbit	r3, r3
 800293e:	61fb      	str	r3, [r7, #28]
 8002940:	4b29      	ldr	r3, [pc, #164]	@ (80029e8 <HAL_RCC_ClockConfig+0x260>)
 8002942:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002944:	2202      	movs	r2, #2
 8002946:	61ba      	str	r2, [r7, #24]
 8002948:	69ba      	ldr	r2, [r7, #24]
 800294a:	fa92 f2a2 	rbit	r2, r2
 800294e:	617a      	str	r2, [r7, #20]
  return result;
 8002950:	697a      	ldr	r2, [r7, #20]
 8002952:	fab2 f282 	clz	r2, r2
 8002956:	b2d2      	uxtb	r2, r2
 8002958:	f042 0220 	orr.w	r2, r2, #32
 800295c:	b2d2      	uxtb	r2, r2
 800295e:	f002 021f 	and.w	r2, r2, #31
 8002962:	2101      	movs	r1, #1
 8002964:	fa01 f202 	lsl.w	r2, r1, r2
 8002968:	4013      	ands	r3, r2
 800296a:	2b00      	cmp	r3, #0
 800296c:	d101      	bne.n	8002972 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800296e:	2301      	movs	r3, #1
 8002970:	e079      	b.n	8002a66 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002972:	4b1d      	ldr	r3, [pc, #116]	@ (80029e8 <HAL_RCC_ClockConfig+0x260>)
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	f023 0203 	bic.w	r2, r3, #3
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	491a      	ldr	r1, [pc, #104]	@ (80029e8 <HAL_RCC_ClockConfig+0x260>)
 8002980:	4313      	orrs	r3, r2
 8002982:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002984:	f7fe fc30 	bl	80011e8 <HAL_GetTick>
 8002988:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800298a:	e00a      	b.n	80029a2 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800298c:	f7fe fc2c 	bl	80011e8 <HAL_GetTick>
 8002990:	4602      	mov	r2, r0
 8002992:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002994:	1ad3      	subs	r3, r2, r3
 8002996:	f241 3288 	movw	r2, #5000	@ 0x1388
 800299a:	4293      	cmp	r3, r2
 800299c:	d901      	bls.n	80029a2 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800299e:	2303      	movs	r3, #3
 80029a0:	e061      	b.n	8002a66 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029a2:	4b11      	ldr	r3, [pc, #68]	@ (80029e8 <HAL_RCC_ClockConfig+0x260>)
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	f003 020c 	and.w	r2, r3, #12
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	009b      	lsls	r3, r3, #2
 80029b0:	429a      	cmp	r2, r3
 80029b2:	d1eb      	bne.n	800298c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80029b4:	4b0b      	ldr	r3, [pc, #44]	@ (80029e4 <HAL_RCC_ClockConfig+0x25c>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f003 0307 	and.w	r3, r3, #7
 80029bc:	683a      	ldr	r2, [r7, #0]
 80029be:	429a      	cmp	r2, r3
 80029c0:	d214      	bcs.n	80029ec <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029c2:	4b08      	ldr	r3, [pc, #32]	@ (80029e4 <HAL_RCC_ClockConfig+0x25c>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f023 0207 	bic.w	r2, r3, #7
 80029ca:	4906      	ldr	r1, [pc, #24]	@ (80029e4 <HAL_RCC_ClockConfig+0x25c>)
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	4313      	orrs	r3, r2
 80029d0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029d2:	4b04      	ldr	r3, [pc, #16]	@ (80029e4 <HAL_RCC_ClockConfig+0x25c>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f003 0307 	and.w	r3, r3, #7
 80029da:	683a      	ldr	r2, [r7, #0]
 80029dc:	429a      	cmp	r2, r3
 80029de:	d005      	beq.n	80029ec <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80029e0:	2301      	movs	r3, #1
 80029e2:	e040      	b.n	8002a66 <HAL_RCC_ClockConfig+0x2de>
 80029e4:	40022000 	.word	0x40022000
 80029e8:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f003 0304 	and.w	r3, r3, #4
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d008      	beq.n	8002a0a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029f8:	4b1d      	ldr	r3, [pc, #116]	@ (8002a70 <HAL_RCC_ClockConfig+0x2e8>)
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	68db      	ldr	r3, [r3, #12]
 8002a04:	491a      	ldr	r1, [pc, #104]	@ (8002a70 <HAL_RCC_ClockConfig+0x2e8>)
 8002a06:	4313      	orrs	r3, r2
 8002a08:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f003 0308 	and.w	r3, r3, #8
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d009      	beq.n	8002a2a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a16:	4b16      	ldr	r3, [pc, #88]	@ (8002a70 <HAL_RCC_ClockConfig+0x2e8>)
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	691b      	ldr	r3, [r3, #16]
 8002a22:	00db      	lsls	r3, r3, #3
 8002a24:	4912      	ldr	r1, [pc, #72]	@ (8002a70 <HAL_RCC_ClockConfig+0x2e8>)
 8002a26:	4313      	orrs	r3, r2
 8002a28:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002a2a:	f000 f829 	bl	8002a80 <HAL_RCC_GetSysClockFreq>
 8002a2e:	4601      	mov	r1, r0
 8002a30:	4b0f      	ldr	r3, [pc, #60]	@ (8002a70 <HAL_RCC_ClockConfig+0x2e8>)
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002a38:	22f0      	movs	r2, #240	@ 0xf0
 8002a3a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a3c:	693a      	ldr	r2, [r7, #16]
 8002a3e:	fa92 f2a2 	rbit	r2, r2
 8002a42:	60fa      	str	r2, [r7, #12]
  return result;
 8002a44:	68fa      	ldr	r2, [r7, #12]
 8002a46:	fab2 f282 	clz	r2, r2
 8002a4a:	b2d2      	uxtb	r2, r2
 8002a4c:	40d3      	lsrs	r3, r2
 8002a4e:	4a09      	ldr	r2, [pc, #36]	@ (8002a74 <HAL_RCC_ClockConfig+0x2ec>)
 8002a50:	5cd3      	ldrb	r3, [r2, r3]
 8002a52:	fa21 f303 	lsr.w	r3, r1, r3
 8002a56:	4a08      	ldr	r2, [pc, #32]	@ (8002a78 <HAL_RCC_ClockConfig+0x2f0>)
 8002a58:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002a5a:	4b08      	ldr	r3, [pc, #32]	@ (8002a7c <HAL_RCC_ClockConfig+0x2f4>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4618      	mov	r0, r3
 8002a60:	f7fe fb7e 	bl	8001160 <HAL_InitTick>
  
  return HAL_OK;
 8002a64:	2300      	movs	r3, #0
}
 8002a66:	4618      	mov	r0, r3
 8002a68:	3778      	adds	r7, #120	@ 0x78
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}
 8002a6e:	bf00      	nop
 8002a70:	40021000 	.word	0x40021000
 8002a74:	08006314 	.word	0x08006314
 8002a78:	20000000 	.word	0x20000000
 8002a7c:	20000004 	.word	0x20000004

08002a80 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a80:	b480      	push	{r7}
 8002a82:	b087      	sub	sp, #28
 8002a84:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002a86:	2300      	movs	r3, #0
 8002a88:	60fb      	str	r3, [r7, #12]
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	60bb      	str	r3, [r7, #8]
 8002a8e:	2300      	movs	r3, #0
 8002a90:	617b      	str	r3, [r7, #20]
 8002a92:	2300      	movs	r3, #0
 8002a94:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002a96:	2300      	movs	r3, #0
 8002a98:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8002a9a:	4b1f      	ldr	r3, [pc, #124]	@ (8002b18 <HAL_RCC_GetSysClockFreq+0x98>)
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	f003 030c 	and.w	r3, r3, #12
 8002aa6:	2b04      	cmp	r3, #4
 8002aa8:	d002      	beq.n	8002ab0 <HAL_RCC_GetSysClockFreq+0x30>
 8002aaa:	2b08      	cmp	r3, #8
 8002aac:	d003      	beq.n	8002ab6 <HAL_RCC_GetSysClockFreq+0x36>
 8002aae:	e029      	b.n	8002b04 <HAL_RCC_GetSysClockFreq+0x84>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002ab0:	4b1a      	ldr	r3, [pc, #104]	@ (8002b1c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002ab2:	613b      	str	r3, [r7, #16]
      break;
 8002ab4:	e029      	b.n	8002b0a <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	0c9b      	lsrs	r3, r3, #18
 8002aba:	f003 030f 	and.w	r3, r3, #15
 8002abe:	4a18      	ldr	r2, [pc, #96]	@ (8002b20 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002ac0:	5cd3      	ldrb	r3, [r2, r3]
 8002ac2:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8002ac4:	4b14      	ldr	r3, [pc, #80]	@ (8002b18 <HAL_RCC_GetSysClockFreq+0x98>)
 8002ac6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ac8:	f003 030f 	and.w	r3, r3, #15
 8002acc:	4a15      	ldr	r2, [pc, #84]	@ (8002b24 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002ace:	5cd3      	ldrb	r3, [r2, r3]
 8002ad0:	60bb      	str	r3, [r7, #8]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d008      	beq.n	8002aee <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002adc:	4a0f      	ldr	r2, [pc, #60]	@ (8002b1c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002ade:	68bb      	ldr	r3, [r7, #8]
 8002ae0:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	fb02 f303 	mul.w	r3, r2, r3
 8002aea:	617b      	str	r3, [r7, #20]
 8002aec:	e007      	b.n	8002afe <HAL_RCC_GetSysClockFreq+0x7e>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002aee:	4a0b      	ldr	r2, [pc, #44]	@ (8002b1c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	fbb2 f2f3 	udiv	r2, r2, r3
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	fb02 f303 	mul.w	r3, r2, r3
 8002afc:	617b      	str	r3, [r7, #20]
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002afe:	697b      	ldr	r3, [r7, #20]
 8002b00:	613b      	str	r3, [r7, #16]
      break;
 8002b02:	e002      	b.n	8002b0a <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002b04:	4b05      	ldr	r3, [pc, #20]	@ (8002b1c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002b06:	613b      	str	r3, [r7, #16]
      break;
 8002b08:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b0a:	693b      	ldr	r3, [r7, #16]
}
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	371c      	adds	r7, #28
 8002b10:	46bd      	mov	sp, r7
 8002b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b16:	4770      	bx	lr
 8002b18:	40021000 	.word	0x40021000
 8002b1c:	007a1200 	.word	0x007a1200
 8002b20:	0800632c 	.word	0x0800632c
 8002b24:	0800633c 	.word	0x0800633c

08002b28 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b2c:	4b03      	ldr	r3, [pc, #12]	@ (8002b3c <HAL_RCC_GetHCLKFreq+0x14>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
}
 8002b30:	4618      	mov	r0, r3
 8002b32:	46bd      	mov	sp, r7
 8002b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b38:	4770      	bx	lr
 8002b3a:	bf00      	nop
 8002b3c:	20000000 	.word	0x20000000

08002b40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b082      	sub	sp, #8
 8002b44:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002b46:	f7ff ffef 	bl	8002b28 <HAL_RCC_GetHCLKFreq>
 8002b4a:	4601      	mov	r1, r0
 8002b4c:	4b0b      	ldr	r3, [pc, #44]	@ (8002b7c <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002b54:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8002b58:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b5a:	687a      	ldr	r2, [r7, #4]
 8002b5c:	fa92 f2a2 	rbit	r2, r2
 8002b60:	603a      	str	r2, [r7, #0]
  return result;
 8002b62:	683a      	ldr	r2, [r7, #0]
 8002b64:	fab2 f282 	clz	r2, r2
 8002b68:	b2d2      	uxtb	r2, r2
 8002b6a:	40d3      	lsrs	r3, r2
 8002b6c:	4a04      	ldr	r2, [pc, #16]	@ (8002b80 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002b6e:	5cd3      	ldrb	r3, [r2, r3]
 8002b70:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002b74:	4618      	mov	r0, r3
 8002b76:	3708      	adds	r7, #8
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bd80      	pop	{r7, pc}
 8002b7c:	40021000 	.word	0x40021000
 8002b80:	08006324 	.word	0x08006324

08002b84 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b082      	sub	sp, #8
 8002b88:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002b8a:	f7ff ffcd 	bl	8002b28 <HAL_RCC_GetHCLKFreq>
 8002b8e:	4601      	mov	r1, r0
 8002b90:	4b0b      	ldr	r3, [pc, #44]	@ (8002bc0 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8002b98:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8002b9c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b9e:	687a      	ldr	r2, [r7, #4]
 8002ba0:	fa92 f2a2 	rbit	r2, r2
 8002ba4:	603a      	str	r2, [r7, #0]
  return result;
 8002ba6:	683a      	ldr	r2, [r7, #0]
 8002ba8:	fab2 f282 	clz	r2, r2
 8002bac:	b2d2      	uxtb	r2, r2
 8002bae:	40d3      	lsrs	r3, r2
 8002bb0:	4a04      	ldr	r2, [pc, #16]	@ (8002bc4 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002bb2:	5cd3      	ldrb	r3, [r2, r3]
 8002bb4:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002bb8:	4618      	mov	r0, r3
 8002bba:	3708      	adds	r7, #8
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bd80      	pop	{r7, pc}
 8002bc0:	40021000 	.word	0x40021000
 8002bc4:	08006324 	.word	0x08006324

08002bc8 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b092      	sub	sp, #72	@ 0x48
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	f000 80d4 	beq.w	8002d94 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002bec:	4b4e      	ldr	r3, [pc, #312]	@ (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bee:	69db      	ldr	r3, [r3, #28]
 8002bf0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d10e      	bne.n	8002c16 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bf8:	4b4b      	ldr	r3, [pc, #300]	@ (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bfa:	69db      	ldr	r3, [r3, #28]
 8002bfc:	4a4a      	ldr	r2, [pc, #296]	@ (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bfe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c02:	61d3      	str	r3, [r2, #28]
 8002c04:	4b48      	ldr	r3, [pc, #288]	@ (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c06:	69db      	ldr	r3, [r3, #28]
 8002c08:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c0c:	60bb      	str	r3, [r7, #8]
 8002c0e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c10:	2301      	movs	r3, #1
 8002c12:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c16:	4b45      	ldr	r3, [pc, #276]	@ (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d118      	bne.n	8002c54 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c22:	4b42      	ldr	r3, [pc, #264]	@ (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a41      	ldr	r2, [pc, #260]	@ (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c28:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c2c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c2e:	f7fe fadb 	bl	80011e8 <HAL_GetTick>
 8002c32:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c34:	e008      	b.n	8002c48 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c36:	f7fe fad7 	bl	80011e8 <HAL_GetTick>
 8002c3a:	4602      	mov	r2, r0
 8002c3c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002c3e:	1ad3      	subs	r3, r2, r3
 8002c40:	2b64      	cmp	r3, #100	@ 0x64
 8002c42:	d901      	bls.n	8002c48 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002c44:	2303      	movs	r3, #3
 8002c46:	e1d6      	b.n	8002ff6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c48:	4b38      	ldr	r3, [pc, #224]	@ (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d0f0      	beq.n	8002c36 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002c54:	4b34      	ldr	r3, [pc, #208]	@ (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c56:	6a1b      	ldr	r3, [r3, #32]
 8002c58:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002c5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002c5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	f000 8084 	beq.w	8002d6e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002c6e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002c70:	429a      	cmp	r2, r3
 8002c72:	d07c      	beq.n	8002d6e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002c74:	4b2c      	ldr	r3, [pc, #176]	@ (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c76:	6a1b      	ldr	r3, [r3, #32]
 8002c78:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002c7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002c7e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002c82:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c86:	fa93 f3a3 	rbit	r3, r3
 8002c8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002c8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002c8e:	fab3 f383 	clz	r3, r3
 8002c92:	b2db      	uxtb	r3, r3
 8002c94:	461a      	mov	r2, r3
 8002c96:	4b26      	ldr	r3, [pc, #152]	@ (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002c98:	4413      	add	r3, r2
 8002c9a:	009b      	lsls	r3, r3, #2
 8002c9c:	461a      	mov	r2, r3
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	6013      	str	r3, [r2, #0]
 8002ca2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002ca6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ca8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002caa:	fa93 f3a3 	rbit	r3, r3
 8002cae:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002cb0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002cb2:	fab3 f383 	clz	r3, r3
 8002cb6:	b2db      	uxtb	r3, r3
 8002cb8:	461a      	mov	r2, r3
 8002cba:	4b1d      	ldr	r3, [pc, #116]	@ (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002cbc:	4413      	add	r3, r2
 8002cbe:	009b      	lsls	r3, r3, #2
 8002cc0:	461a      	mov	r2, r3
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002cc6:	4a18      	ldr	r2, [pc, #96]	@ (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cc8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002cca:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002ccc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002cce:	f003 0301 	and.w	r3, r3, #1
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d04b      	beq.n	8002d6e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cd6:	f7fe fa87 	bl	80011e8 <HAL_GetTick>
 8002cda:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cdc:	e00a      	b.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cde:	f7fe fa83 	bl	80011e8 <HAL_GetTick>
 8002ce2:	4602      	mov	r2, r0
 8002ce4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002ce6:	1ad3      	subs	r3, r2, r3
 8002ce8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d901      	bls.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002cf0:	2303      	movs	r3, #3
 8002cf2:	e180      	b.n	8002ff6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8002cf4:	2302      	movs	r3, #2
 8002cf6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cfa:	fa93 f3a3 	rbit	r3, r3
 8002cfe:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d00:	2302      	movs	r3, #2
 8002d02:	623b      	str	r3, [r7, #32]
 8002d04:	6a3b      	ldr	r3, [r7, #32]
 8002d06:	fa93 f3a3 	rbit	r3, r3
 8002d0a:	61fb      	str	r3, [r7, #28]
  return result;
 8002d0c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d0e:	fab3 f383 	clz	r3, r3
 8002d12:	b2db      	uxtb	r3, r3
 8002d14:	095b      	lsrs	r3, r3, #5
 8002d16:	b2db      	uxtb	r3, r3
 8002d18:	f043 0302 	orr.w	r3, r3, #2
 8002d1c:	b2db      	uxtb	r3, r3
 8002d1e:	2b02      	cmp	r3, #2
 8002d20:	d108      	bne.n	8002d34 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002d22:	4b01      	ldr	r3, [pc, #4]	@ (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d24:	6a1b      	ldr	r3, [r3, #32]
 8002d26:	e00d      	b.n	8002d44 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002d28:	40021000 	.word	0x40021000
 8002d2c:	40007000 	.word	0x40007000
 8002d30:	10908100 	.word	0x10908100
 8002d34:	2302      	movs	r3, #2
 8002d36:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d38:	69bb      	ldr	r3, [r7, #24]
 8002d3a:	fa93 f3a3 	rbit	r3, r3
 8002d3e:	617b      	str	r3, [r7, #20]
 8002d40:	4b9a      	ldr	r3, [pc, #616]	@ (8002fac <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d44:	2202      	movs	r2, #2
 8002d46:	613a      	str	r2, [r7, #16]
 8002d48:	693a      	ldr	r2, [r7, #16]
 8002d4a:	fa92 f2a2 	rbit	r2, r2
 8002d4e:	60fa      	str	r2, [r7, #12]
  return result;
 8002d50:	68fa      	ldr	r2, [r7, #12]
 8002d52:	fab2 f282 	clz	r2, r2
 8002d56:	b2d2      	uxtb	r2, r2
 8002d58:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002d5c:	b2d2      	uxtb	r2, r2
 8002d5e:	f002 021f 	and.w	r2, r2, #31
 8002d62:	2101      	movs	r1, #1
 8002d64:	fa01 f202 	lsl.w	r2, r1, r2
 8002d68:	4013      	ands	r3, r2
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d0b7      	beq.n	8002cde <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002d6e:	4b8f      	ldr	r3, [pc, #572]	@ (8002fac <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d70:	6a1b      	ldr	r3, [r3, #32]
 8002d72:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	498c      	ldr	r1, [pc, #560]	@ (8002fac <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002d80:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8002d84:	2b01      	cmp	r3, #1
 8002d86:	d105      	bne.n	8002d94 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d88:	4b88      	ldr	r3, [pc, #544]	@ (8002fac <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d8a:	69db      	ldr	r3, [r3, #28]
 8002d8c:	4a87      	ldr	r2, [pc, #540]	@ (8002fac <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d8e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002d92:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f003 0301 	and.w	r3, r3, #1
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d008      	beq.n	8002db2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002da0:	4b82      	ldr	r3, [pc, #520]	@ (8002fac <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002da2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002da4:	f023 0203 	bic.w	r2, r3, #3
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	689b      	ldr	r3, [r3, #8]
 8002dac:	497f      	ldr	r1, [pc, #508]	@ (8002fac <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002dae:	4313      	orrs	r3, r2
 8002db0:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f003 0302 	and.w	r3, r3, #2
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d008      	beq.n	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002dbe:	4b7b      	ldr	r3, [pc, #492]	@ (8002fac <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002dc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dc2:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	68db      	ldr	r3, [r3, #12]
 8002dca:	4978      	ldr	r1, [pc, #480]	@ (8002fac <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002dcc:	4313      	orrs	r3, r2
 8002dce:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f003 0304 	and.w	r3, r3, #4
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d008      	beq.n	8002dee <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002ddc:	4b73      	ldr	r3, [pc, #460]	@ (8002fac <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002dde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002de0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	691b      	ldr	r3, [r3, #16]
 8002de8:	4970      	ldr	r1, [pc, #448]	@ (8002fac <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002dea:	4313      	orrs	r3, r2
 8002dec:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f003 0320 	and.w	r3, r3, #32
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d008      	beq.n	8002e0c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002dfa:	4b6c      	ldr	r3, [pc, #432]	@ (8002fac <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002dfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dfe:	f023 0210 	bic.w	r2, r3, #16
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	69db      	ldr	r3, [r3, #28]
 8002e06:	4969      	ldr	r1, [pc, #420]	@ (8002fac <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d008      	beq.n	8002e2a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002e18:	4b64      	ldr	r3, [pc, #400]	@ (8002fac <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e24:	4961      	ldr	r1, [pc, #388]	@ (8002fac <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e26:	4313      	orrs	r3, r2
 8002e28:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d008      	beq.n	8002e48 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002e36:	4b5d      	ldr	r3, [pc, #372]	@ (8002fac <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e3a:	f023 0220 	bic.w	r2, r3, #32
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6a1b      	ldr	r3, [r3, #32]
 8002e42:	495a      	ldr	r1, [pc, #360]	@ (8002fac <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e44:	4313      	orrs	r3, r2
 8002e46:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d008      	beq.n	8002e66 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002e54:	4b55      	ldr	r3, [pc, #340]	@ (8002fac <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e58:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e60:	4952      	ldr	r1, [pc, #328]	@ (8002fac <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e62:	4313      	orrs	r3, r2
 8002e64:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f003 0308 	and.w	r3, r3, #8
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d008      	beq.n	8002e84 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002e72:	4b4e      	ldr	r3, [pc, #312]	@ (8002fac <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e76:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	695b      	ldr	r3, [r3, #20]
 8002e7e:	494b      	ldr	r1, [pc, #300]	@ (8002fac <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e80:	4313      	orrs	r3, r2
 8002e82:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f003 0310 	and.w	r3, r3, #16
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d008      	beq.n	8002ea2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002e90:	4b46      	ldr	r3, [pc, #280]	@ (8002fac <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e94:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	699b      	ldr	r3, [r3, #24]
 8002e9c:	4943      	ldr	r1, [pc, #268]	@ (8002fac <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d008      	beq.n	8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002eae:	4b3f      	ldr	r3, [pc, #252]	@ (8002fac <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eba:	493c      	ldr	r1, [pc, #240]	@ (8002fac <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d008      	beq.n	8002ede <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002ecc:	4b37      	ldr	r3, [pc, #220]	@ (8002fac <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ece:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ed0:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ed8:	4934      	ldr	r1, [pc, #208]	@ (8002fac <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002eda:	4313      	orrs	r3, r2
 8002edc:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d008      	beq.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002eea:	4b30      	ldr	r3, [pc, #192]	@ (8002fac <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002eec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002eee:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ef6:	492d      	ldr	r1, [pc, #180]	@ (8002fac <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d008      	beq.n	8002f1a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002f08:	4b28      	ldr	r3, [pc, #160]	@ (8002fac <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f0c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f14:	4925      	ldr	r1, [pc, #148]	@ (8002fac <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f16:	4313      	orrs	r3, r2
 8002f18:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d008      	beq.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002f26:	4b21      	ldr	r3, [pc, #132]	@ (8002fac <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f2a:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f32:	491e      	ldr	r1, [pc, #120]	@ (8002fac <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f34:	4313      	orrs	r3, r2
 8002f36:	630b      	str	r3, [r1, #48]	@ 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d008      	beq.n	8002f56 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8002f44:	4b19      	ldr	r3, [pc, #100]	@ (8002fac <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f48:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f50:	4916      	ldr	r1, [pc, #88]	@ (8002fac <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f52:	4313      	orrs	r3, r2
 8002f54:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d008      	beq.n	8002f74 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8002f62:	4b12      	ldr	r3, [pc, #72]	@ (8002fac <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f66:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f6e:	490f      	ldr	r1, [pc, #60]	@ (8002fac <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f70:	4313      	orrs	r3, r2
 8002f72:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d008      	beq.n	8002f92 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002f80:	4b0a      	ldr	r3, [pc, #40]	@ (8002fac <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f84:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f8c:	4907      	ldr	r1, [pc, #28]	@ (8002fac <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d00c      	beq.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8002f9e:	4b03      	ldr	r3, [pc, #12]	@ (8002fac <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002fa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fa2:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	e002      	b.n	8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8002faa:	bf00      	nop
 8002fac:	40021000 	.word	0x40021000
 8002fb0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002fb2:	4913      	ldr	r1, [pc, #76]	@ (8003000 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d008      	beq.n	8002fd6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8002fc4:	4b0e      	ldr	r3, [pc, #56]	@ (8003000 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002fc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fc8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002fd0:	490b      	ldr	r1, [pc, #44]	@ (8003000 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	630b      	str	r3, [r1, #48]	@ 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d008      	beq.n	8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8002fe2:	4b07      	ldr	r3, [pc, #28]	@ (8003000 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002fe4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fe6:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002fee:	4904      	ldr	r1, [pc, #16]	@ (8003000 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002ff0:	4313      	orrs	r3, r2
 8002ff2:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002ff4:	2300      	movs	r3, #0
}
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	3748      	adds	r7, #72	@ 0x48
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bd80      	pop	{r7, pc}
 8002ffe:	bf00      	nop
 8003000:	40021000 	.word	0x40021000

08003004 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b082      	sub	sp, #8
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d101      	bne.n	8003016 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003012:	2301      	movs	r3, #1
 8003014:	e040      	b.n	8003098 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800301a:	2b00      	cmp	r3, #0
 800301c:	d106      	bne.n	800302c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2200      	movs	r2, #0
 8003022:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003026:	6878      	ldr	r0, [r7, #4]
 8003028:	f7fd ff10 	bl	8000e4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2224      	movs	r2, #36	@ 0x24
 8003030:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	681a      	ldr	r2, [r3, #0]
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f022 0201 	bic.w	r2, r2, #1
 8003040:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003046:	2b00      	cmp	r3, #0
 8003048:	d002      	beq.n	8003050 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800304a:	6878      	ldr	r0, [r7, #4]
 800304c:	f000 fa86 	bl	800355c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003050:	6878      	ldr	r0, [r7, #4]
 8003052:	f000 f8af 	bl	80031b4 <UART_SetConfig>
 8003056:	4603      	mov	r3, r0
 8003058:	2b01      	cmp	r3, #1
 800305a:	d101      	bne.n	8003060 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800305c:	2301      	movs	r3, #1
 800305e:	e01b      	b.n	8003098 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	685a      	ldr	r2, [r3, #4]
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800306e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	689a      	ldr	r2, [r3, #8]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800307e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	681a      	ldr	r2, [r3, #0]
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f042 0201 	orr.w	r2, r2, #1
 800308e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003090:	6878      	ldr	r0, [r7, #4]
 8003092:	f000 fb05 	bl	80036a0 <UART_CheckIdleState>
 8003096:	4603      	mov	r3, r0
}
 8003098:	4618      	mov	r0, r3
 800309a:	3708      	adds	r7, #8
 800309c:	46bd      	mov	sp, r7
 800309e:	bd80      	pop	{r7, pc}

080030a0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b08a      	sub	sp, #40	@ 0x28
 80030a4:	af02      	add	r7, sp, #8
 80030a6:	60f8      	str	r0, [r7, #12]
 80030a8:	60b9      	str	r1, [r7, #8]
 80030aa:	603b      	str	r3, [r7, #0]
 80030ac:	4613      	mov	r3, r2
 80030ae:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80030b4:	2b20      	cmp	r3, #32
 80030b6:	d177      	bne.n	80031a8 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d002      	beq.n	80030c4 <HAL_UART_Transmit+0x24>
 80030be:	88fb      	ldrh	r3, [r7, #6]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d101      	bne.n	80030c8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80030c4:	2301      	movs	r3, #1
 80030c6:	e070      	b.n	80031aa <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	2200      	movs	r2, #0
 80030cc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	2221      	movs	r2, #33	@ 0x21
 80030d4:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80030d6:	f7fe f887 	bl	80011e8 <HAL_GetTick>
 80030da:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	88fa      	ldrh	r2, [r7, #6]
 80030e0:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	88fa      	ldrh	r2, [r7, #6]
 80030e8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	689b      	ldr	r3, [r3, #8]
 80030f0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80030f4:	d108      	bne.n	8003108 <HAL_UART_Transmit+0x68>
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	691b      	ldr	r3, [r3, #16]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d104      	bne.n	8003108 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80030fe:	2300      	movs	r3, #0
 8003100:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003102:	68bb      	ldr	r3, [r7, #8]
 8003104:	61bb      	str	r3, [r7, #24]
 8003106:	e003      	b.n	8003110 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800310c:	2300      	movs	r3, #0
 800310e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003110:	e02f      	b.n	8003172 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	9300      	str	r3, [sp, #0]
 8003116:	697b      	ldr	r3, [r7, #20]
 8003118:	2200      	movs	r2, #0
 800311a:	2180      	movs	r1, #128	@ 0x80
 800311c:	68f8      	ldr	r0, [r7, #12]
 800311e:	f000 fb67 	bl	80037f0 <UART_WaitOnFlagUntilTimeout>
 8003122:	4603      	mov	r3, r0
 8003124:	2b00      	cmp	r3, #0
 8003126:	d004      	beq.n	8003132 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	2220      	movs	r2, #32
 800312c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800312e:	2303      	movs	r3, #3
 8003130:	e03b      	b.n	80031aa <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8003132:	69fb      	ldr	r3, [r7, #28]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d10b      	bne.n	8003150 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003138:	69bb      	ldr	r3, [r7, #24]
 800313a:	881a      	ldrh	r2, [r3, #0]
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003144:	b292      	uxth	r2, r2
 8003146:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003148:	69bb      	ldr	r3, [r7, #24]
 800314a:	3302      	adds	r3, #2
 800314c:	61bb      	str	r3, [r7, #24]
 800314e:	e007      	b.n	8003160 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003150:	69fb      	ldr	r3, [r7, #28]
 8003152:	781a      	ldrb	r2, [r3, #0]
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800315a:	69fb      	ldr	r3, [r7, #28]
 800315c:	3301      	adds	r3, #1
 800315e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003166:	b29b      	uxth	r3, r3
 8003168:	3b01      	subs	r3, #1
 800316a:	b29a      	uxth	r2, r3
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003178:	b29b      	uxth	r3, r3
 800317a:	2b00      	cmp	r3, #0
 800317c:	d1c9      	bne.n	8003112 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	9300      	str	r3, [sp, #0]
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	2200      	movs	r2, #0
 8003186:	2140      	movs	r1, #64	@ 0x40
 8003188:	68f8      	ldr	r0, [r7, #12]
 800318a:	f000 fb31 	bl	80037f0 <UART_WaitOnFlagUntilTimeout>
 800318e:	4603      	mov	r3, r0
 8003190:	2b00      	cmp	r3, #0
 8003192:	d004      	beq.n	800319e <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	2220      	movs	r2, #32
 8003198:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800319a:	2303      	movs	r3, #3
 800319c:	e005      	b.n	80031aa <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	2220      	movs	r2, #32
 80031a2:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80031a4:	2300      	movs	r3, #0
 80031a6:	e000      	b.n	80031aa <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80031a8:	2302      	movs	r3, #2
  }
}
 80031aa:	4618      	mov	r0, r3
 80031ac:	3720      	adds	r7, #32
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bd80      	pop	{r7, pc}
	...

080031b4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b088      	sub	sp, #32
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80031bc:	2300      	movs	r3, #0
 80031be:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	689a      	ldr	r2, [r3, #8]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	691b      	ldr	r3, [r3, #16]
 80031c8:	431a      	orrs	r2, r3
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	695b      	ldr	r3, [r3, #20]
 80031ce:	431a      	orrs	r2, r3
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	69db      	ldr	r3, [r3, #28]
 80031d4:	4313      	orrs	r3, r2
 80031d6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	681a      	ldr	r2, [r3, #0]
 80031de:	4b92      	ldr	r3, [pc, #584]	@ (8003428 <UART_SetConfig+0x274>)
 80031e0:	4013      	ands	r3, r2
 80031e2:	687a      	ldr	r2, [r7, #4]
 80031e4:	6812      	ldr	r2, [r2, #0]
 80031e6:	6979      	ldr	r1, [r7, #20]
 80031e8:	430b      	orrs	r3, r1
 80031ea:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	68da      	ldr	r2, [r3, #12]
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	430a      	orrs	r2, r1
 8003200:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	699b      	ldr	r3, [r3, #24]
 8003206:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6a1b      	ldr	r3, [r3, #32]
 800320c:	697a      	ldr	r2, [r7, #20]
 800320e:	4313      	orrs	r3, r2
 8003210:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	689b      	ldr	r3, [r3, #8]
 8003218:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	697a      	ldr	r2, [r7, #20]
 8003222:	430a      	orrs	r2, r1
 8003224:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4a80      	ldr	r2, [pc, #512]	@ (800342c <UART_SetConfig+0x278>)
 800322c:	4293      	cmp	r3, r2
 800322e:	d120      	bne.n	8003272 <UART_SetConfig+0xbe>
 8003230:	4b7f      	ldr	r3, [pc, #508]	@ (8003430 <UART_SetConfig+0x27c>)
 8003232:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003234:	f003 0303 	and.w	r3, r3, #3
 8003238:	2b03      	cmp	r3, #3
 800323a:	d817      	bhi.n	800326c <UART_SetConfig+0xb8>
 800323c:	a201      	add	r2, pc, #4	@ (adr r2, 8003244 <UART_SetConfig+0x90>)
 800323e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003242:	bf00      	nop
 8003244:	08003255 	.word	0x08003255
 8003248:	08003261 	.word	0x08003261
 800324c:	08003267 	.word	0x08003267
 8003250:	0800325b 	.word	0x0800325b
 8003254:	2301      	movs	r3, #1
 8003256:	77fb      	strb	r3, [r7, #31]
 8003258:	e0b5      	b.n	80033c6 <UART_SetConfig+0x212>
 800325a:	2302      	movs	r3, #2
 800325c:	77fb      	strb	r3, [r7, #31]
 800325e:	e0b2      	b.n	80033c6 <UART_SetConfig+0x212>
 8003260:	2304      	movs	r3, #4
 8003262:	77fb      	strb	r3, [r7, #31]
 8003264:	e0af      	b.n	80033c6 <UART_SetConfig+0x212>
 8003266:	2308      	movs	r3, #8
 8003268:	77fb      	strb	r3, [r7, #31]
 800326a:	e0ac      	b.n	80033c6 <UART_SetConfig+0x212>
 800326c:	2310      	movs	r3, #16
 800326e:	77fb      	strb	r3, [r7, #31]
 8003270:	e0a9      	b.n	80033c6 <UART_SetConfig+0x212>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4a6f      	ldr	r2, [pc, #444]	@ (8003434 <UART_SetConfig+0x280>)
 8003278:	4293      	cmp	r3, r2
 800327a:	d124      	bne.n	80032c6 <UART_SetConfig+0x112>
 800327c:	4b6c      	ldr	r3, [pc, #432]	@ (8003430 <UART_SetConfig+0x27c>)
 800327e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003280:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003284:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003288:	d011      	beq.n	80032ae <UART_SetConfig+0xfa>
 800328a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800328e:	d817      	bhi.n	80032c0 <UART_SetConfig+0x10c>
 8003290:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003294:	d011      	beq.n	80032ba <UART_SetConfig+0x106>
 8003296:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800329a:	d811      	bhi.n	80032c0 <UART_SetConfig+0x10c>
 800329c:	2b00      	cmp	r3, #0
 800329e:	d003      	beq.n	80032a8 <UART_SetConfig+0xf4>
 80032a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80032a4:	d006      	beq.n	80032b4 <UART_SetConfig+0x100>
 80032a6:	e00b      	b.n	80032c0 <UART_SetConfig+0x10c>
 80032a8:	2300      	movs	r3, #0
 80032aa:	77fb      	strb	r3, [r7, #31]
 80032ac:	e08b      	b.n	80033c6 <UART_SetConfig+0x212>
 80032ae:	2302      	movs	r3, #2
 80032b0:	77fb      	strb	r3, [r7, #31]
 80032b2:	e088      	b.n	80033c6 <UART_SetConfig+0x212>
 80032b4:	2304      	movs	r3, #4
 80032b6:	77fb      	strb	r3, [r7, #31]
 80032b8:	e085      	b.n	80033c6 <UART_SetConfig+0x212>
 80032ba:	2308      	movs	r3, #8
 80032bc:	77fb      	strb	r3, [r7, #31]
 80032be:	e082      	b.n	80033c6 <UART_SetConfig+0x212>
 80032c0:	2310      	movs	r3, #16
 80032c2:	77fb      	strb	r3, [r7, #31]
 80032c4:	e07f      	b.n	80033c6 <UART_SetConfig+0x212>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4a5b      	ldr	r2, [pc, #364]	@ (8003438 <UART_SetConfig+0x284>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d124      	bne.n	800331a <UART_SetConfig+0x166>
 80032d0:	4b57      	ldr	r3, [pc, #348]	@ (8003430 <UART_SetConfig+0x27c>)
 80032d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032d4:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 80032d8:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80032dc:	d011      	beq.n	8003302 <UART_SetConfig+0x14e>
 80032de:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80032e2:	d817      	bhi.n	8003314 <UART_SetConfig+0x160>
 80032e4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80032e8:	d011      	beq.n	800330e <UART_SetConfig+0x15a>
 80032ea:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80032ee:	d811      	bhi.n	8003314 <UART_SetConfig+0x160>
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d003      	beq.n	80032fc <UART_SetConfig+0x148>
 80032f4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80032f8:	d006      	beq.n	8003308 <UART_SetConfig+0x154>
 80032fa:	e00b      	b.n	8003314 <UART_SetConfig+0x160>
 80032fc:	2300      	movs	r3, #0
 80032fe:	77fb      	strb	r3, [r7, #31]
 8003300:	e061      	b.n	80033c6 <UART_SetConfig+0x212>
 8003302:	2302      	movs	r3, #2
 8003304:	77fb      	strb	r3, [r7, #31]
 8003306:	e05e      	b.n	80033c6 <UART_SetConfig+0x212>
 8003308:	2304      	movs	r3, #4
 800330a:	77fb      	strb	r3, [r7, #31]
 800330c:	e05b      	b.n	80033c6 <UART_SetConfig+0x212>
 800330e:	2308      	movs	r3, #8
 8003310:	77fb      	strb	r3, [r7, #31]
 8003312:	e058      	b.n	80033c6 <UART_SetConfig+0x212>
 8003314:	2310      	movs	r3, #16
 8003316:	77fb      	strb	r3, [r7, #31]
 8003318:	e055      	b.n	80033c6 <UART_SetConfig+0x212>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a47      	ldr	r2, [pc, #284]	@ (800343c <UART_SetConfig+0x288>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d124      	bne.n	800336e <UART_SetConfig+0x1ba>
 8003324:	4b42      	ldr	r3, [pc, #264]	@ (8003430 <UART_SetConfig+0x27c>)
 8003326:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003328:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800332c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003330:	d011      	beq.n	8003356 <UART_SetConfig+0x1a2>
 8003332:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003336:	d817      	bhi.n	8003368 <UART_SetConfig+0x1b4>
 8003338:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800333c:	d011      	beq.n	8003362 <UART_SetConfig+0x1ae>
 800333e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003342:	d811      	bhi.n	8003368 <UART_SetConfig+0x1b4>
 8003344:	2b00      	cmp	r3, #0
 8003346:	d003      	beq.n	8003350 <UART_SetConfig+0x19c>
 8003348:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800334c:	d006      	beq.n	800335c <UART_SetConfig+0x1a8>
 800334e:	e00b      	b.n	8003368 <UART_SetConfig+0x1b4>
 8003350:	2300      	movs	r3, #0
 8003352:	77fb      	strb	r3, [r7, #31]
 8003354:	e037      	b.n	80033c6 <UART_SetConfig+0x212>
 8003356:	2302      	movs	r3, #2
 8003358:	77fb      	strb	r3, [r7, #31]
 800335a:	e034      	b.n	80033c6 <UART_SetConfig+0x212>
 800335c:	2304      	movs	r3, #4
 800335e:	77fb      	strb	r3, [r7, #31]
 8003360:	e031      	b.n	80033c6 <UART_SetConfig+0x212>
 8003362:	2308      	movs	r3, #8
 8003364:	77fb      	strb	r3, [r7, #31]
 8003366:	e02e      	b.n	80033c6 <UART_SetConfig+0x212>
 8003368:	2310      	movs	r3, #16
 800336a:	77fb      	strb	r3, [r7, #31]
 800336c:	e02b      	b.n	80033c6 <UART_SetConfig+0x212>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a33      	ldr	r2, [pc, #204]	@ (8003440 <UART_SetConfig+0x28c>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d124      	bne.n	80033c2 <UART_SetConfig+0x20e>
 8003378:	4b2d      	ldr	r3, [pc, #180]	@ (8003430 <UART_SetConfig+0x27c>)
 800337a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800337c:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8003380:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003384:	d011      	beq.n	80033aa <UART_SetConfig+0x1f6>
 8003386:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800338a:	d817      	bhi.n	80033bc <UART_SetConfig+0x208>
 800338c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003390:	d011      	beq.n	80033b6 <UART_SetConfig+0x202>
 8003392:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003396:	d811      	bhi.n	80033bc <UART_SetConfig+0x208>
 8003398:	2b00      	cmp	r3, #0
 800339a:	d003      	beq.n	80033a4 <UART_SetConfig+0x1f0>
 800339c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80033a0:	d006      	beq.n	80033b0 <UART_SetConfig+0x1fc>
 80033a2:	e00b      	b.n	80033bc <UART_SetConfig+0x208>
 80033a4:	2300      	movs	r3, #0
 80033a6:	77fb      	strb	r3, [r7, #31]
 80033a8:	e00d      	b.n	80033c6 <UART_SetConfig+0x212>
 80033aa:	2302      	movs	r3, #2
 80033ac:	77fb      	strb	r3, [r7, #31]
 80033ae:	e00a      	b.n	80033c6 <UART_SetConfig+0x212>
 80033b0:	2304      	movs	r3, #4
 80033b2:	77fb      	strb	r3, [r7, #31]
 80033b4:	e007      	b.n	80033c6 <UART_SetConfig+0x212>
 80033b6:	2308      	movs	r3, #8
 80033b8:	77fb      	strb	r3, [r7, #31]
 80033ba:	e004      	b.n	80033c6 <UART_SetConfig+0x212>
 80033bc:	2310      	movs	r3, #16
 80033be:	77fb      	strb	r3, [r7, #31]
 80033c0:	e001      	b.n	80033c6 <UART_SetConfig+0x212>
 80033c2:	2310      	movs	r3, #16
 80033c4:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	69db      	ldr	r3, [r3, #28]
 80033ca:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80033ce:	d16b      	bne.n	80034a8 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 80033d0:	7ffb      	ldrb	r3, [r7, #31]
 80033d2:	2b08      	cmp	r3, #8
 80033d4:	d838      	bhi.n	8003448 <UART_SetConfig+0x294>
 80033d6:	a201      	add	r2, pc, #4	@ (adr r2, 80033dc <UART_SetConfig+0x228>)
 80033d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033dc:	08003401 	.word	0x08003401
 80033e0:	08003409 	.word	0x08003409
 80033e4:	08003411 	.word	0x08003411
 80033e8:	08003449 	.word	0x08003449
 80033ec:	08003417 	.word	0x08003417
 80033f0:	08003449 	.word	0x08003449
 80033f4:	08003449 	.word	0x08003449
 80033f8:	08003449 	.word	0x08003449
 80033fc:	0800341f 	.word	0x0800341f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003400:	f7ff fb9e 	bl	8002b40 <HAL_RCC_GetPCLK1Freq>
 8003404:	61b8      	str	r0, [r7, #24]
        break;
 8003406:	e024      	b.n	8003452 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003408:	f7ff fbbc 	bl	8002b84 <HAL_RCC_GetPCLK2Freq>
 800340c:	61b8      	str	r0, [r7, #24]
        break;
 800340e:	e020      	b.n	8003452 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003410:	4b0c      	ldr	r3, [pc, #48]	@ (8003444 <UART_SetConfig+0x290>)
 8003412:	61bb      	str	r3, [r7, #24]
        break;
 8003414:	e01d      	b.n	8003452 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003416:	f7ff fb33 	bl	8002a80 <HAL_RCC_GetSysClockFreq>
 800341a:	61b8      	str	r0, [r7, #24]
        break;
 800341c:	e019      	b.n	8003452 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800341e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003422:	61bb      	str	r3, [r7, #24]
        break;
 8003424:	e015      	b.n	8003452 <UART_SetConfig+0x29e>
 8003426:	bf00      	nop
 8003428:	efff69f3 	.word	0xefff69f3
 800342c:	40013800 	.word	0x40013800
 8003430:	40021000 	.word	0x40021000
 8003434:	40004400 	.word	0x40004400
 8003438:	40004800 	.word	0x40004800
 800343c:	40004c00 	.word	0x40004c00
 8003440:	40005000 	.word	0x40005000
 8003444:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8003448:	2300      	movs	r3, #0
 800344a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800344c:	2301      	movs	r3, #1
 800344e:	77bb      	strb	r3, [r7, #30]
        break;
 8003450:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003452:	69bb      	ldr	r3, [r7, #24]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d073      	beq.n	8003540 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003458:	69bb      	ldr	r3, [r7, #24]
 800345a:	005a      	lsls	r2, r3, #1
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	085b      	lsrs	r3, r3, #1
 8003462:	441a      	add	r2, r3
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	fbb2 f3f3 	udiv	r3, r2, r3
 800346c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800346e:	693b      	ldr	r3, [r7, #16]
 8003470:	2b0f      	cmp	r3, #15
 8003472:	d916      	bls.n	80034a2 <UART_SetConfig+0x2ee>
 8003474:	693b      	ldr	r3, [r7, #16]
 8003476:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800347a:	d212      	bcs.n	80034a2 <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800347c:	693b      	ldr	r3, [r7, #16]
 800347e:	b29b      	uxth	r3, r3
 8003480:	f023 030f 	bic.w	r3, r3, #15
 8003484:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003486:	693b      	ldr	r3, [r7, #16]
 8003488:	085b      	lsrs	r3, r3, #1
 800348a:	b29b      	uxth	r3, r3
 800348c:	f003 0307 	and.w	r3, r3, #7
 8003490:	b29a      	uxth	r2, r3
 8003492:	89fb      	ldrh	r3, [r7, #14]
 8003494:	4313      	orrs	r3, r2
 8003496:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	89fa      	ldrh	r2, [r7, #14]
 800349e:	60da      	str	r2, [r3, #12]
 80034a0:	e04e      	b.n	8003540 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80034a2:	2301      	movs	r3, #1
 80034a4:	77bb      	strb	r3, [r7, #30]
 80034a6:	e04b      	b.n	8003540 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80034a8:	7ffb      	ldrb	r3, [r7, #31]
 80034aa:	2b08      	cmp	r3, #8
 80034ac:	d827      	bhi.n	80034fe <UART_SetConfig+0x34a>
 80034ae:	a201      	add	r2, pc, #4	@ (adr r2, 80034b4 <UART_SetConfig+0x300>)
 80034b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034b4:	080034d9 	.word	0x080034d9
 80034b8:	080034e1 	.word	0x080034e1
 80034bc:	080034e9 	.word	0x080034e9
 80034c0:	080034ff 	.word	0x080034ff
 80034c4:	080034ef 	.word	0x080034ef
 80034c8:	080034ff 	.word	0x080034ff
 80034cc:	080034ff 	.word	0x080034ff
 80034d0:	080034ff 	.word	0x080034ff
 80034d4:	080034f7 	.word	0x080034f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80034d8:	f7ff fb32 	bl	8002b40 <HAL_RCC_GetPCLK1Freq>
 80034dc:	61b8      	str	r0, [r7, #24]
        break;
 80034de:	e013      	b.n	8003508 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80034e0:	f7ff fb50 	bl	8002b84 <HAL_RCC_GetPCLK2Freq>
 80034e4:	61b8      	str	r0, [r7, #24]
        break;
 80034e6:	e00f      	b.n	8003508 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80034e8:	4b1b      	ldr	r3, [pc, #108]	@ (8003558 <UART_SetConfig+0x3a4>)
 80034ea:	61bb      	str	r3, [r7, #24]
        break;
 80034ec:	e00c      	b.n	8003508 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80034ee:	f7ff fac7 	bl	8002a80 <HAL_RCC_GetSysClockFreq>
 80034f2:	61b8      	str	r0, [r7, #24]
        break;
 80034f4:	e008      	b.n	8003508 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80034f6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80034fa:	61bb      	str	r3, [r7, #24]
        break;
 80034fc:	e004      	b.n	8003508 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 80034fe:	2300      	movs	r3, #0
 8003500:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003502:	2301      	movs	r3, #1
 8003504:	77bb      	strb	r3, [r7, #30]
        break;
 8003506:	bf00      	nop
    }

    if (pclk != 0U)
 8003508:	69bb      	ldr	r3, [r7, #24]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d018      	beq.n	8003540 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	085a      	lsrs	r2, r3, #1
 8003514:	69bb      	ldr	r3, [r7, #24]
 8003516:	441a      	add	r2, r3
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003520:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003522:	693b      	ldr	r3, [r7, #16]
 8003524:	2b0f      	cmp	r3, #15
 8003526:	d909      	bls.n	800353c <UART_SetConfig+0x388>
 8003528:	693b      	ldr	r3, [r7, #16]
 800352a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800352e:	d205      	bcs.n	800353c <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003530:	693b      	ldr	r3, [r7, #16]
 8003532:	b29a      	uxth	r2, r3
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	60da      	str	r2, [r3, #12]
 800353a:	e001      	b.n	8003540 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 800353c:	2301      	movs	r3, #1
 800353e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2200      	movs	r2, #0
 8003544:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2200      	movs	r2, #0
 800354a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800354c:	7fbb      	ldrb	r3, [r7, #30]
}
 800354e:	4618      	mov	r0, r3
 8003550:	3720      	adds	r7, #32
 8003552:	46bd      	mov	sp, r7
 8003554:	bd80      	pop	{r7, pc}
 8003556:	bf00      	nop
 8003558:	007a1200 	.word	0x007a1200

0800355c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800355c:	b480      	push	{r7}
 800355e:	b083      	sub	sp, #12
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003568:	f003 0308 	and.w	r3, r3, #8
 800356c:	2b00      	cmp	r3, #0
 800356e:	d00a      	beq.n	8003586 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	430a      	orrs	r2, r1
 8003584:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800358a:	f003 0301 	and.w	r3, r3, #1
 800358e:	2b00      	cmp	r3, #0
 8003590:	d00a      	beq.n	80035a8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	430a      	orrs	r2, r1
 80035a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035ac:	f003 0302 	and.w	r3, r3, #2
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d00a      	beq.n	80035ca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	430a      	orrs	r2, r1
 80035c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035ce:	f003 0304 	and.w	r3, r3, #4
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d00a      	beq.n	80035ec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	430a      	orrs	r2, r1
 80035ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035f0:	f003 0310 	and.w	r3, r3, #16
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d00a      	beq.n	800360e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	689b      	ldr	r3, [r3, #8]
 80035fe:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	430a      	orrs	r2, r1
 800360c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003612:	f003 0320 	and.w	r3, r3, #32
 8003616:	2b00      	cmp	r3, #0
 8003618:	d00a      	beq.n	8003630 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	689b      	ldr	r3, [r3, #8]
 8003620:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	430a      	orrs	r2, r1
 800362e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003634:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003638:	2b00      	cmp	r3, #0
 800363a:	d01a      	beq.n	8003672 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	430a      	orrs	r2, r1
 8003650:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003656:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800365a:	d10a      	bne.n	8003672 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	430a      	orrs	r2, r1
 8003670:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003676:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800367a:	2b00      	cmp	r3, #0
 800367c:	d00a      	beq.n	8003694 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	430a      	orrs	r2, r1
 8003692:	605a      	str	r2, [r3, #4]
  }
}
 8003694:	bf00      	nop
 8003696:	370c      	adds	r7, #12
 8003698:	46bd      	mov	sp, r7
 800369a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369e:	4770      	bx	lr

080036a0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b098      	sub	sp, #96	@ 0x60
 80036a4:	af02      	add	r7, sp, #8
 80036a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2200      	movs	r2, #0
 80036ac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80036b0:	f7fd fd9a 	bl	80011e8 <HAL_GetTick>
 80036b4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f003 0308 	and.w	r3, r3, #8
 80036c0:	2b08      	cmp	r3, #8
 80036c2:	d12e      	bne.n	8003722 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80036c4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80036c8:	9300      	str	r3, [sp, #0]
 80036ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80036cc:	2200      	movs	r2, #0
 80036ce:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80036d2:	6878      	ldr	r0, [r7, #4]
 80036d4:	f000 f88c 	bl	80037f0 <UART_WaitOnFlagUntilTimeout>
 80036d8:	4603      	mov	r3, r0
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d021      	beq.n	8003722 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036e6:	e853 3f00 	ldrex	r3, [r3]
 80036ea:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80036ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80036ee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80036f2:	653b      	str	r3, [r7, #80]	@ 0x50
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	461a      	mov	r2, r3
 80036fa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80036fc:	647b      	str	r3, [r7, #68]	@ 0x44
 80036fe:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003700:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003702:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003704:	e841 2300 	strex	r3, r2, [r1]
 8003708:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800370a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800370c:	2b00      	cmp	r3, #0
 800370e:	d1e6      	bne.n	80036de <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2220      	movs	r2, #32
 8003714:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2200      	movs	r2, #0
 800371a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800371e:	2303      	movs	r3, #3
 8003720:	e062      	b.n	80037e8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f003 0304 	and.w	r3, r3, #4
 800372c:	2b04      	cmp	r3, #4
 800372e:	d149      	bne.n	80037c4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003730:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003734:	9300      	str	r3, [sp, #0]
 8003736:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003738:	2200      	movs	r2, #0
 800373a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800373e:	6878      	ldr	r0, [r7, #4]
 8003740:	f000 f856 	bl	80037f0 <UART_WaitOnFlagUntilTimeout>
 8003744:	4603      	mov	r3, r0
 8003746:	2b00      	cmp	r3, #0
 8003748:	d03c      	beq.n	80037c4 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003750:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003752:	e853 3f00 	ldrex	r3, [r3]
 8003756:	623b      	str	r3, [r7, #32]
   return(result);
 8003758:	6a3b      	ldr	r3, [r7, #32]
 800375a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800375e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	461a      	mov	r2, r3
 8003766:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003768:	633b      	str	r3, [r7, #48]	@ 0x30
 800376a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800376c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800376e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003770:	e841 2300 	strex	r3, r2, [r1]
 8003774:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003776:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003778:	2b00      	cmp	r3, #0
 800377a:	d1e6      	bne.n	800374a <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	3308      	adds	r3, #8
 8003782:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003784:	693b      	ldr	r3, [r7, #16]
 8003786:	e853 3f00 	ldrex	r3, [r3]
 800378a:	60fb      	str	r3, [r7, #12]
   return(result);
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	f023 0301 	bic.w	r3, r3, #1
 8003792:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	3308      	adds	r3, #8
 800379a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800379c:	61fa      	str	r2, [r7, #28]
 800379e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037a0:	69b9      	ldr	r1, [r7, #24]
 80037a2:	69fa      	ldr	r2, [r7, #28]
 80037a4:	e841 2300 	strex	r3, r2, [r1]
 80037a8:	617b      	str	r3, [r7, #20]
   return(result);
 80037aa:	697b      	ldr	r3, [r7, #20]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d1e5      	bne.n	800377c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2220      	movs	r2, #32
 80037b4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2200      	movs	r2, #0
 80037bc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80037c0:	2303      	movs	r3, #3
 80037c2:	e011      	b.n	80037e8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2220      	movs	r2, #32
 80037c8:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2220      	movs	r2, #32
 80037ce:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2200      	movs	r2, #0
 80037d6:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2200      	movs	r2, #0
 80037dc:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2200      	movs	r2, #0
 80037e2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80037e6:	2300      	movs	r3, #0
}
 80037e8:	4618      	mov	r0, r3
 80037ea:	3758      	adds	r7, #88	@ 0x58
 80037ec:	46bd      	mov	sp, r7
 80037ee:	bd80      	pop	{r7, pc}

080037f0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b084      	sub	sp, #16
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	60f8      	str	r0, [r7, #12]
 80037f8:	60b9      	str	r1, [r7, #8]
 80037fa:	603b      	str	r3, [r7, #0]
 80037fc:	4613      	mov	r3, r2
 80037fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003800:	e04f      	b.n	80038a2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003802:	69bb      	ldr	r3, [r7, #24]
 8003804:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003808:	d04b      	beq.n	80038a2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800380a:	f7fd fced 	bl	80011e8 <HAL_GetTick>
 800380e:	4602      	mov	r2, r0
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	1ad3      	subs	r3, r2, r3
 8003814:	69ba      	ldr	r2, [r7, #24]
 8003816:	429a      	cmp	r2, r3
 8003818:	d302      	bcc.n	8003820 <UART_WaitOnFlagUntilTimeout+0x30>
 800381a:	69bb      	ldr	r3, [r7, #24]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d101      	bne.n	8003824 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003820:	2303      	movs	r3, #3
 8003822:	e04e      	b.n	80038c2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f003 0304 	and.w	r3, r3, #4
 800382e:	2b00      	cmp	r3, #0
 8003830:	d037      	beq.n	80038a2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003832:	68bb      	ldr	r3, [r7, #8]
 8003834:	2b80      	cmp	r3, #128	@ 0x80
 8003836:	d034      	beq.n	80038a2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003838:	68bb      	ldr	r3, [r7, #8]
 800383a:	2b40      	cmp	r3, #64	@ 0x40
 800383c:	d031      	beq.n	80038a2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	69db      	ldr	r3, [r3, #28]
 8003844:	f003 0308 	and.w	r3, r3, #8
 8003848:	2b08      	cmp	r3, #8
 800384a:	d110      	bne.n	800386e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	2208      	movs	r2, #8
 8003852:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003854:	68f8      	ldr	r0, [r7, #12]
 8003856:	f000 f838 	bl	80038ca <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	2208      	movs	r2, #8
 800385e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	2200      	movs	r2, #0
 8003866:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800386a:	2301      	movs	r3, #1
 800386c:	e029      	b.n	80038c2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	69db      	ldr	r3, [r3, #28]
 8003874:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003878:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800387c:	d111      	bne.n	80038a2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003886:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003888:	68f8      	ldr	r0, [r7, #12]
 800388a:	f000 f81e 	bl	80038ca <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	2220      	movs	r2, #32
 8003892:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	2200      	movs	r2, #0
 800389a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800389e:	2303      	movs	r3, #3
 80038a0:	e00f      	b.n	80038c2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	69da      	ldr	r2, [r3, #28]
 80038a8:	68bb      	ldr	r3, [r7, #8]
 80038aa:	4013      	ands	r3, r2
 80038ac:	68ba      	ldr	r2, [r7, #8]
 80038ae:	429a      	cmp	r2, r3
 80038b0:	bf0c      	ite	eq
 80038b2:	2301      	moveq	r3, #1
 80038b4:	2300      	movne	r3, #0
 80038b6:	b2db      	uxtb	r3, r3
 80038b8:	461a      	mov	r2, r3
 80038ba:	79fb      	ldrb	r3, [r7, #7]
 80038bc:	429a      	cmp	r2, r3
 80038be:	d0a0      	beq.n	8003802 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80038c0:	2300      	movs	r3, #0
}
 80038c2:	4618      	mov	r0, r3
 80038c4:	3710      	adds	r7, #16
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bd80      	pop	{r7, pc}

080038ca <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80038ca:	b480      	push	{r7}
 80038cc:	b095      	sub	sp, #84	@ 0x54
 80038ce:	af00      	add	r7, sp, #0
 80038d0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80038da:	e853 3f00 	ldrex	r3, [r3]
 80038de:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80038e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038e2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80038e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	461a      	mov	r2, r3
 80038ee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80038f0:	643b      	str	r3, [r7, #64]	@ 0x40
 80038f2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038f4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80038f6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80038f8:	e841 2300 	strex	r3, r2, [r1]
 80038fc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80038fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003900:	2b00      	cmp	r3, #0
 8003902:	d1e6      	bne.n	80038d2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	3308      	adds	r3, #8
 800390a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800390c:	6a3b      	ldr	r3, [r7, #32]
 800390e:	e853 3f00 	ldrex	r3, [r3]
 8003912:	61fb      	str	r3, [r7, #28]
   return(result);
 8003914:	69fb      	ldr	r3, [r7, #28]
 8003916:	f023 0301 	bic.w	r3, r3, #1
 800391a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	3308      	adds	r3, #8
 8003922:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003924:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003926:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003928:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800392a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800392c:	e841 2300 	strex	r3, r2, [r1]
 8003930:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003932:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003934:	2b00      	cmp	r3, #0
 8003936:	d1e5      	bne.n	8003904 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800393c:	2b01      	cmp	r3, #1
 800393e:	d118      	bne.n	8003972 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	e853 3f00 	ldrex	r3, [r3]
 800394c:	60bb      	str	r3, [r7, #8]
   return(result);
 800394e:	68bb      	ldr	r3, [r7, #8]
 8003950:	f023 0310 	bic.w	r3, r3, #16
 8003954:	647b      	str	r3, [r7, #68]	@ 0x44
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	461a      	mov	r2, r3
 800395c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800395e:	61bb      	str	r3, [r7, #24]
 8003960:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003962:	6979      	ldr	r1, [r7, #20]
 8003964:	69ba      	ldr	r2, [r7, #24]
 8003966:	e841 2300 	strex	r3, r2, [r1]
 800396a:	613b      	str	r3, [r7, #16]
   return(result);
 800396c:	693b      	ldr	r3, [r7, #16]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d1e6      	bne.n	8003940 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2220      	movs	r2, #32
 8003976:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2200      	movs	r2, #0
 800397e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2200      	movs	r2, #0
 8003984:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003986:	bf00      	nop
 8003988:	3754      	adds	r7, #84	@ 0x54
 800398a:	46bd      	mov	sp, r7
 800398c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003990:	4770      	bx	lr

08003992 <__cvt>:
 8003992:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003996:	ec57 6b10 	vmov	r6, r7, d0
 800399a:	2f00      	cmp	r7, #0
 800399c:	460c      	mov	r4, r1
 800399e:	4619      	mov	r1, r3
 80039a0:	463b      	mov	r3, r7
 80039a2:	bfbb      	ittet	lt
 80039a4:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80039a8:	461f      	movlt	r7, r3
 80039aa:	2300      	movge	r3, #0
 80039ac:	232d      	movlt	r3, #45	@ 0x2d
 80039ae:	700b      	strb	r3, [r1, #0]
 80039b0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80039b2:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80039b6:	4691      	mov	r9, r2
 80039b8:	f023 0820 	bic.w	r8, r3, #32
 80039bc:	bfbc      	itt	lt
 80039be:	4632      	movlt	r2, r6
 80039c0:	4616      	movlt	r6, r2
 80039c2:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80039c6:	d005      	beq.n	80039d4 <__cvt+0x42>
 80039c8:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80039cc:	d100      	bne.n	80039d0 <__cvt+0x3e>
 80039ce:	3401      	adds	r4, #1
 80039d0:	2102      	movs	r1, #2
 80039d2:	e000      	b.n	80039d6 <__cvt+0x44>
 80039d4:	2103      	movs	r1, #3
 80039d6:	ab03      	add	r3, sp, #12
 80039d8:	9301      	str	r3, [sp, #4]
 80039da:	ab02      	add	r3, sp, #8
 80039dc:	9300      	str	r3, [sp, #0]
 80039de:	ec47 6b10 	vmov	d0, r6, r7
 80039e2:	4653      	mov	r3, sl
 80039e4:	4622      	mov	r2, r4
 80039e6:	f000 fe4b 	bl	8004680 <_dtoa_r>
 80039ea:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80039ee:	4605      	mov	r5, r0
 80039f0:	d119      	bne.n	8003a26 <__cvt+0x94>
 80039f2:	f019 0f01 	tst.w	r9, #1
 80039f6:	d00e      	beq.n	8003a16 <__cvt+0x84>
 80039f8:	eb00 0904 	add.w	r9, r0, r4
 80039fc:	2200      	movs	r2, #0
 80039fe:	2300      	movs	r3, #0
 8003a00:	4630      	mov	r0, r6
 8003a02:	4639      	mov	r1, r7
 8003a04:	f7fd f868 	bl	8000ad8 <__aeabi_dcmpeq>
 8003a08:	b108      	cbz	r0, 8003a0e <__cvt+0x7c>
 8003a0a:	f8cd 900c 	str.w	r9, [sp, #12]
 8003a0e:	2230      	movs	r2, #48	@ 0x30
 8003a10:	9b03      	ldr	r3, [sp, #12]
 8003a12:	454b      	cmp	r3, r9
 8003a14:	d31e      	bcc.n	8003a54 <__cvt+0xc2>
 8003a16:	9b03      	ldr	r3, [sp, #12]
 8003a18:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8003a1a:	1b5b      	subs	r3, r3, r5
 8003a1c:	4628      	mov	r0, r5
 8003a1e:	6013      	str	r3, [r2, #0]
 8003a20:	b004      	add	sp, #16
 8003a22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a26:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003a2a:	eb00 0904 	add.w	r9, r0, r4
 8003a2e:	d1e5      	bne.n	80039fc <__cvt+0x6a>
 8003a30:	7803      	ldrb	r3, [r0, #0]
 8003a32:	2b30      	cmp	r3, #48	@ 0x30
 8003a34:	d10a      	bne.n	8003a4c <__cvt+0xba>
 8003a36:	2200      	movs	r2, #0
 8003a38:	2300      	movs	r3, #0
 8003a3a:	4630      	mov	r0, r6
 8003a3c:	4639      	mov	r1, r7
 8003a3e:	f7fd f84b 	bl	8000ad8 <__aeabi_dcmpeq>
 8003a42:	b918      	cbnz	r0, 8003a4c <__cvt+0xba>
 8003a44:	f1c4 0401 	rsb	r4, r4, #1
 8003a48:	f8ca 4000 	str.w	r4, [sl]
 8003a4c:	f8da 3000 	ldr.w	r3, [sl]
 8003a50:	4499      	add	r9, r3
 8003a52:	e7d3      	b.n	80039fc <__cvt+0x6a>
 8003a54:	1c59      	adds	r1, r3, #1
 8003a56:	9103      	str	r1, [sp, #12]
 8003a58:	701a      	strb	r2, [r3, #0]
 8003a5a:	e7d9      	b.n	8003a10 <__cvt+0x7e>

08003a5c <__exponent>:
 8003a5c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003a5e:	2900      	cmp	r1, #0
 8003a60:	bfba      	itte	lt
 8003a62:	4249      	neglt	r1, r1
 8003a64:	232d      	movlt	r3, #45	@ 0x2d
 8003a66:	232b      	movge	r3, #43	@ 0x2b
 8003a68:	2909      	cmp	r1, #9
 8003a6a:	7002      	strb	r2, [r0, #0]
 8003a6c:	7043      	strb	r3, [r0, #1]
 8003a6e:	dd29      	ble.n	8003ac4 <__exponent+0x68>
 8003a70:	f10d 0307 	add.w	r3, sp, #7
 8003a74:	461d      	mov	r5, r3
 8003a76:	270a      	movs	r7, #10
 8003a78:	461a      	mov	r2, r3
 8003a7a:	fbb1 f6f7 	udiv	r6, r1, r7
 8003a7e:	fb07 1416 	mls	r4, r7, r6, r1
 8003a82:	3430      	adds	r4, #48	@ 0x30
 8003a84:	f802 4c01 	strb.w	r4, [r2, #-1]
 8003a88:	460c      	mov	r4, r1
 8003a8a:	2c63      	cmp	r4, #99	@ 0x63
 8003a8c:	f103 33ff 	add.w	r3, r3, #4294967295
 8003a90:	4631      	mov	r1, r6
 8003a92:	dcf1      	bgt.n	8003a78 <__exponent+0x1c>
 8003a94:	3130      	adds	r1, #48	@ 0x30
 8003a96:	1e94      	subs	r4, r2, #2
 8003a98:	f803 1c01 	strb.w	r1, [r3, #-1]
 8003a9c:	1c41      	adds	r1, r0, #1
 8003a9e:	4623      	mov	r3, r4
 8003aa0:	42ab      	cmp	r3, r5
 8003aa2:	d30a      	bcc.n	8003aba <__exponent+0x5e>
 8003aa4:	f10d 0309 	add.w	r3, sp, #9
 8003aa8:	1a9b      	subs	r3, r3, r2
 8003aaa:	42ac      	cmp	r4, r5
 8003aac:	bf88      	it	hi
 8003aae:	2300      	movhi	r3, #0
 8003ab0:	3302      	adds	r3, #2
 8003ab2:	4403      	add	r3, r0
 8003ab4:	1a18      	subs	r0, r3, r0
 8003ab6:	b003      	add	sp, #12
 8003ab8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003aba:	f813 6b01 	ldrb.w	r6, [r3], #1
 8003abe:	f801 6f01 	strb.w	r6, [r1, #1]!
 8003ac2:	e7ed      	b.n	8003aa0 <__exponent+0x44>
 8003ac4:	2330      	movs	r3, #48	@ 0x30
 8003ac6:	3130      	adds	r1, #48	@ 0x30
 8003ac8:	7083      	strb	r3, [r0, #2]
 8003aca:	70c1      	strb	r1, [r0, #3]
 8003acc:	1d03      	adds	r3, r0, #4
 8003ace:	e7f1      	b.n	8003ab4 <__exponent+0x58>

08003ad0 <_printf_float>:
 8003ad0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ad4:	b08d      	sub	sp, #52	@ 0x34
 8003ad6:	460c      	mov	r4, r1
 8003ad8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8003adc:	4616      	mov	r6, r2
 8003ade:	461f      	mov	r7, r3
 8003ae0:	4605      	mov	r5, r0
 8003ae2:	f000 fccd 	bl	8004480 <_localeconv_r>
 8003ae6:	6803      	ldr	r3, [r0, #0]
 8003ae8:	9304      	str	r3, [sp, #16]
 8003aea:	4618      	mov	r0, r3
 8003aec:	f7fc fbc8 	bl	8000280 <strlen>
 8003af0:	2300      	movs	r3, #0
 8003af2:	930a      	str	r3, [sp, #40]	@ 0x28
 8003af4:	f8d8 3000 	ldr.w	r3, [r8]
 8003af8:	9005      	str	r0, [sp, #20]
 8003afa:	3307      	adds	r3, #7
 8003afc:	f023 0307 	bic.w	r3, r3, #7
 8003b00:	f103 0208 	add.w	r2, r3, #8
 8003b04:	f894 a018 	ldrb.w	sl, [r4, #24]
 8003b08:	f8d4 b000 	ldr.w	fp, [r4]
 8003b0c:	f8c8 2000 	str.w	r2, [r8]
 8003b10:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003b14:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8003b18:	9307      	str	r3, [sp, #28]
 8003b1a:	f8cd 8018 	str.w	r8, [sp, #24]
 8003b1e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8003b22:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003b26:	4b9c      	ldr	r3, [pc, #624]	@ (8003d98 <_printf_float+0x2c8>)
 8003b28:	f04f 32ff 	mov.w	r2, #4294967295
 8003b2c:	f7fd f806 	bl	8000b3c <__aeabi_dcmpun>
 8003b30:	bb70      	cbnz	r0, 8003b90 <_printf_float+0xc0>
 8003b32:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003b36:	4b98      	ldr	r3, [pc, #608]	@ (8003d98 <_printf_float+0x2c8>)
 8003b38:	f04f 32ff 	mov.w	r2, #4294967295
 8003b3c:	f7fc ffe0 	bl	8000b00 <__aeabi_dcmple>
 8003b40:	bb30      	cbnz	r0, 8003b90 <_printf_float+0xc0>
 8003b42:	2200      	movs	r2, #0
 8003b44:	2300      	movs	r3, #0
 8003b46:	4640      	mov	r0, r8
 8003b48:	4649      	mov	r1, r9
 8003b4a:	f7fc ffcf 	bl	8000aec <__aeabi_dcmplt>
 8003b4e:	b110      	cbz	r0, 8003b56 <_printf_float+0x86>
 8003b50:	232d      	movs	r3, #45	@ 0x2d
 8003b52:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003b56:	4a91      	ldr	r2, [pc, #580]	@ (8003d9c <_printf_float+0x2cc>)
 8003b58:	4b91      	ldr	r3, [pc, #580]	@ (8003da0 <_printf_float+0x2d0>)
 8003b5a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8003b5e:	bf94      	ite	ls
 8003b60:	4690      	movls	r8, r2
 8003b62:	4698      	movhi	r8, r3
 8003b64:	2303      	movs	r3, #3
 8003b66:	6123      	str	r3, [r4, #16]
 8003b68:	f02b 0304 	bic.w	r3, fp, #4
 8003b6c:	6023      	str	r3, [r4, #0]
 8003b6e:	f04f 0900 	mov.w	r9, #0
 8003b72:	9700      	str	r7, [sp, #0]
 8003b74:	4633      	mov	r3, r6
 8003b76:	aa0b      	add	r2, sp, #44	@ 0x2c
 8003b78:	4621      	mov	r1, r4
 8003b7a:	4628      	mov	r0, r5
 8003b7c:	f000 f9d2 	bl	8003f24 <_printf_common>
 8003b80:	3001      	adds	r0, #1
 8003b82:	f040 808d 	bne.w	8003ca0 <_printf_float+0x1d0>
 8003b86:	f04f 30ff 	mov.w	r0, #4294967295
 8003b8a:	b00d      	add	sp, #52	@ 0x34
 8003b8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b90:	4642      	mov	r2, r8
 8003b92:	464b      	mov	r3, r9
 8003b94:	4640      	mov	r0, r8
 8003b96:	4649      	mov	r1, r9
 8003b98:	f7fc ffd0 	bl	8000b3c <__aeabi_dcmpun>
 8003b9c:	b140      	cbz	r0, 8003bb0 <_printf_float+0xe0>
 8003b9e:	464b      	mov	r3, r9
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	bfbc      	itt	lt
 8003ba4:	232d      	movlt	r3, #45	@ 0x2d
 8003ba6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8003baa:	4a7e      	ldr	r2, [pc, #504]	@ (8003da4 <_printf_float+0x2d4>)
 8003bac:	4b7e      	ldr	r3, [pc, #504]	@ (8003da8 <_printf_float+0x2d8>)
 8003bae:	e7d4      	b.n	8003b5a <_printf_float+0x8a>
 8003bb0:	6863      	ldr	r3, [r4, #4]
 8003bb2:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8003bb6:	9206      	str	r2, [sp, #24]
 8003bb8:	1c5a      	adds	r2, r3, #1
 8003bba:	d13b      	bne.n	8003c34 <_printf_float+0x164>
 8003bbc:	2306      	movs	r3, #6
 8003bbe:	6063      	str	r3, [r4, #4]
 8003bc0:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	6022      	str	r2, [r4, #0]
 8003bc8:	9303      	str	r3, [sp, #12]
 8003bca:	ab0a      	add	r3, sp, #40	@ 0x28
 8003bcc:	e9cd a301 	strd	sl, r3, [sp, #4]
 8003bd0:	ab09      	add	r3, sp, #36	@ 0x24
 8003bd2:	9300      	str	r3, [sp, #0]
 8003bd4:	6861      	ldr	r1, [r4, #4]
 8003bd6:	ec49 8b10 	vmov	d0, r8, r9
 8003bda:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8003bde:	4628      	mov	r0, r5
 8003be0:	f7ff fed7 	bl	8003992 <__cvt>
 8003be4:	9b06      	ldr	r3, [sp, #24]
 8003be6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8003be8:	2b47      	cmp	r3, #71	@ 0x47
 8003bea:	4680      	mov	r8, r0
 8003bec:	d129      	bne.n	8003c42 <_printf_float+0x172>
 8003bee:	1cc8      	adds	r0, r1, #3
 8003bf0:	db02      	blt.n	8003bf8 <_printf_float+0x128>
 8003bf2:	6863      	ldr	r3, [r4, #4]
 8003bf4:	4299      	cmp	r1, r3
 8003bf6:	dd41      	ble.n	8003c7c <_printf_float+0x1ac>
 8003bf8:	f1aa 0a02 	sub.w	sl, sl, #2
 8003bfc:	fa5f fa8a 	uxtb.w	sl, sl
 8003c00:	3901      	subs	r1, #1
 8003c02:	4652      	mov	r2, sl
 8003c04:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8003c08:	9109      	str	r1, [sp, #36]	@ 0x24
 8003c0a:	f7ff ff27 	bl	8003a5c <__exponent>
 8003c0e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8003c10:	1813      	adds	r3, r2, r0
 8003c12:	2a01      	cmp	r2, #1
 8003c14:	4681      	mov	r9, r0
 8003c16:	6123      	str	r3, [r4, #16]
 8003c18:	dc02      	bgt.n	8003c20 <_printf_float+0x150>
 8003c1a:	6822      	ldr	r2, [r4, #0]
 8003c1c:	07d2      	lsls	r2, r2, #31
 8003c1e:	d501      	bpl.n	8003c24 <_printf_float+0x154>
 8003c20:	3301      	adds	r3, #1
 8003c22:	6123      	str	r3, [r4, #16]
 8003c24:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d0a2      	beq.n	8003b72 <_printf_float+0xa2>
 8003c2c:	232d      	movs	r3, #45	@ 0x2d
 8003c2e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003c32:	e79e      	b.n	8003b72 <_printf_float+0xa2>
 8003c34:	9a06      	ldr	r2, [sp, #24]
 8003c36:	2a47      	cmp	r2, #71	@ 0x47
 8003c38:	d1c2      	bne.n	8003bc0 <_printf_float+0xf0>
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d1c0      	bne.n	8003bc0 <_printf_float+0xf0>
 8003c3e:	2301      	movs	r3, #1
 8003c40:	e7bd      	b.n	8003bbe <_printf_float+0xee>
 8003c42:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8003c46:	d9db      	bls.n	8003c00 <_printf_float+0x130>
 8003c48:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8003c4c:	d118      	bne.n	8003c80 <_printf_float+0x1b0>
 8003c4e:	2900      	cmp	r1, #0
 8003c50:	6863      	ldr	r3, [r4, #4]
 8003c52:	dd0b      	ble.n	8003c6c <_printf_float+0x19c>
 8003c54:	6121      	str	r1, [r4, #16]
 8003c56:	b913      	cbnz	r3, 8003c5e <_printf_float+0x18e>
 8003c58:	6822      	ldr	r2, [r4, #0]
 8003c5a:	07d0      	lsls	r0, r2, #31
 8003c5c:	d502      	bpl.n	8003c64 <_printf_float+0x194>
 8003c5e:	3301      	adds	r3, #1
 8003c60:	440b      	add	r3, r1
 8003c62:	6123      	str	r3, [r4, #16]
 8003c64:	65a1      	str	r1, [r4, #88]	@ 0x58
 8003c66:	f04f 0900 	mov.w	r9, #0
 8003c6a:	e7db      	b.n	8003c24 <_printf_float+0x154>
 8003c6c:	b913      	cbnz	r3, 8003c74 <_printf_float+0x1a4>
 8003c6e:	6822      	ldr	r2, [r4, #0]
 8003c70:	07d2      	lsls	r2, r2, #31
 8003c72:	d501      	bpl.n	8003c78 <_printf_float+0x1a8>
 8003c74:	3302      	adds	r3, #2
 8003c76:	e7f4      	b.n	8003c62 <_printf_float+0x192>
 8003c78:	2301      	movs	r3, #1
 8003c7a:	e7f2      	b.n	8003c62 <_printf_float+0x192>
 8003c7c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8003c80:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003c82:	4299      	cmp	r1, r3
 8003c84:	db05      	blt.n	8003c92 <_printf_float+0x1c2>
 8003c86:	6823      	ldr	r3, [r4, #0]
 8003c88:	6121      	str	r1, [r4, #16]
 8003c8a:	07d8      	lsls	r0, r3, #31
 8003c8c:	d5ea      	bpl.n	8003c64 <_printf_float+0x194>
 8003c8e:	1c4b      	adds	r3, r1, #1
 8003c90:	e7e7      	b.n	8003c62 <_printf_float+0x192>
 8003c92:	2900      	cmp	r1, #0
 8003c94:	bfd4      	ite	le
 8003c96:	f1c1 0202 	rsble	r2, r1, #2
 8003c9a:	2201      	movgt	r2, #1
 8003c9c:	4413      	add	r3, r2
 8003c9e:	e7e0      	b.n	8003c62 <_printf_float+0x192>
 8003ca0:	6823      	ldr	r3, [r4, #0]
 8003ca2:	055a      	lsls	r2, r3, #21
 8003ca4:	d407      	bmi.n	8003cb6 <_printf_float+0x1e6>
 8003ca6:	6923      	ldr	r3, [r4, #16]
 8003ca8:	4642      	mov	r2, r8
 8003caa:	4631      	mov	r1, r6
 8003cac:	4628      	mov	r0, r5
 8003cae:	47b8      	blx	r7
 8003cb0:	3001      	adds	r0, #1
 8003cb2:	d12b      	bne.n	8003d0c <_printf_float+0x23c>
 8003cb4:	e767      	b.n	8003b86 <_printf_float+0xb6>
 8003cb6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8003cba:	f240 80dd 	bls.w	8003e78 <_printf_float+0x3a8>
 8003cbe:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	f7fc ff07 	bl	8000ad8 <__aeabi_dcmpeq>
 8003cca:	2800      	cmp	r0, #0
 8003ccc:	d033      	beq.n	8003d36 <_printf_float+0x266>
 8003cce:	4a37      	ldr	r2, [pc, #220]	@ (8003dac <_printf_float+0x2dc>)
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	4631      	mov	r1, r6
 8003cd4:	4628      	mov	r0, r5
 8003cd6:	47b8      	blx	r7
 8003cd8:	3001      	adds	r0, #1
 8003cda:	f43f af54 	beq.w	8003b86 <_printf_float+0xb6>
 8003cde:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8003ce2:	4543      	cmp	r3, r8
 8003ce4:	db02      	blt.n	8003cec <_printf_float+0x21c>
 8003ce6:	6823      	ldr	r3, [r4, #0]
 8003ce8:	07d8      	lsls	r0, r3, #31
 8003cea:	d50f      	bpl.n	8003d0c <_printf_float+0x23c>
 8003cec:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003cf0:	4631      	mov	r1, r6
 8003cf2:	4628      	mov	r0, r5
 8003cf4:	47b8      	blx	r7
 8003cf6:	3001      	adds	r0, #1
 8003cf8:	f43f af45 	beq.w	8003b86 <_printf_float+0xb6>
 8003cfc:	f04f 0900 	mov.w	r9, #0
 8003d00:	f108 38ff 	add.w	r8, r8, #4294967295
 8003d04:	f104 0a1a 	add.w	sl, r4, #26
 8003d08:	45c8      	cmp	r8, r9
 8003d0a:	dc09      	bgt.n	8003d20 <_printf_float+0x250>
 8003d0c:	6823      	ldr	r3, [r4, #0]
 8003d0e:	079b      	lsls	r3, r3, #30
 8003d10:	f100 8103 	bmi.w	8003f1a <_printf_float+0x44a>
 8003d14:	68e0      	ldr	r0, [r4, #12]
 8003d16:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8003d18:	4298      	cmp	r0, r3
 8003d1a:	bfb8      	it	lt
 8003d1c:	4618      	movlt	r0, r3
 8003d1e:	e734      	b.n	8003b8a <_printf_float+0xba>
 8003d20:	2301      	movs	r3, #1
 8003d22:	4652      	mov	r2, sl
 8003d24:	4631      	mov	r1, r6
 8003d26:	4628      	mov	r0, r5
 8003d28:	47b8      	blx	r7
 8003d2a:	3001      	adds	r0, #1
 8003d2c:	f43f af2b 	beq.w	8003b86 <_printf_float+0xb6>
 8003d30:	f109 0901 	add.w	r9, r9, #1
 8003d34:	e7e8      	b.n	8003d08 <_printf_float+0x238>
 8003d36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	dc39      	bgt.n	8003db0 <_printf_float+0x2e0>
 8003d3c:	4a1b      	ldr	r2, [pc, #108]	@ (8003dac <_printf_float+0x2dc>)
 8003d3e:	2301      	movs	r3, #1
 8003d40:	4631      	mov	r1, r6
 8003d42:	4628      	mov	r0, r5
 8003d44:	47b8      	blx	r7
 8003d46:	3001      	adds	r0, #1
 8003d48:	f43f af1d 	beq.w	8003b86 <_printf_float+0xb6>
 8003d4c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8003d50:	ea59 0303 	orrs.w	r3, r9, r3
 8003d54:	d102      	bne.n	8003d5c <_printf_float+0x28c>
 8003d56:	6823      	ldr	r3, [r4, #0]
 8003d58:	07d9      	lsls	r1, r3, #31
 8003d5a:	d5d7      	bpl.n	8003d0c <_printf_float+0x23c>
 8003d5c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003d60:	4631      	mov	r1, r6
 8003d62:	4628      	mov	r0, r5
 8003d64:	47b8      	blx	r7
 8003d66:	3001      	adds	r0, #1
 8003d68:	f43f af0d 	beq.w	8003b86 <_printf_float+0xb6>
 8003d6c:	f04f 0a00 	mov.w	sl, #0
 8003d70:	f104 0b1a 	add.w	fp, r4, #26
 8003d74:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003d76:	425b      	negs	r3, r3
 8003d78:	4553      	cmp	r3, sl
 8003d7a:	dc01      	bgt.n	8003d80 <_printf_float+0x2b0>
 8003d7c:	464b      	mov	r3, r9
 8003d7e:	e793      	b.n	8003ca8 <_printf_float+0x1d8>
 8003d80:	2301      	movs	r3, #1
 8003d82:	465a      	mov	r2, fp
 8003d84:	4631      	mov	r1, r6
 8003d86:	4628      	mov	r0, r5
 8003d88:	47b8      	blx	r7
 8003d8a:	3001      	adds	r0, #1
 8003d8c:	f43f aefb 	beq.w	8003b86 <_printf_float+0xb6>
 8003d90:	f10a 0a01 	add.w	sl, sl, #1
 8003d94:	e7ee      	b.n	8003d74 <_printf_float+0x2a4>
 8003d96:	bf00      	nop
 8003d98:	7fefffff 	.word	0x7fefffff
 8003d9c:	0800634c 	.word	0x0800634c
 8003da0:	08006350 	.word	0x08006350
 8003da4:	08006354 	.word	0x08006354
 8003da8:	08006358 	.word	0x08006358
 8003dac:	0800635c 	.word	0x0800635c
 8003db0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003db2:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8003db6:	4553      	cmp	r3, sl
 8003db8:	bfa8      	it	ge
 8003dba:	4653      	movge	r3, sl
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	4699      	mov	r9, r3
 8003dc0:	dc36      	bgt.n	8003e30 <_printf_float+0x360>
 8003dc2:	f04f 0b00 	mov.w	fp, #0
 8003dc6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003dca:	f104 021a 	add.w	r2, r4, #26
 8003dce:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003dd0:	9306      	str	r3, [sp, #24]
 8003dd2:	eba3 0309 	sub.w	r3, r3, r9
 8003dd6:	455b      	cmp	r3, fp
 8003dd8:	dc31      	bgt.n	8003e3e <_printf_float+0x36e>
 8003dda:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003ddc:	459a      	cmp	sl, r3
 8003dde:	dc3a      	bgt.n	8003e56 <_printf_float+0x386>
 8003de0:	6823      	ldr	r3, [r4, #0]
 8003de2:	07da      	lsls	r2, r3, #31
 8003de4:	d437      	bmi.n	8003e56 <_printf_float+0x386>
 8003de6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003de8:	ebaa 0903 	sub.w	r9, sl, r3
 8003dec:	9b06      	ldr	r3, [sp, #24]
 8003dee:	ebaa 0303 	sub.w	r3, sl, r3
 8003df2:	4599      	cmp	r9, r3
 8003df4:	bfa8      	it	ge
 8003df6:	4699      	movge	r9, r3
 8003df8:	f1b9 0f00 	cmp.w	r9, #0
 8003dfc:	dc33      	bgt.n	8003e66 <_printf_float+0x396>
 8003dfe:	f04f 0800 	mov.w	r8, #0
 8003e02:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003e06:	f104 0b1a 	add.w	fp, r4, #26
 8003e0a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003e0c:	ebaa 0303 	sub.w	r3, sl, r3
 8003e10:	eba3 0309 	sub.w	r3, r3, r9
 8003e14:	4543      	cmp	r3, r8
 8003e16:	f77f af79 	ble.w	8003d0c <_printf_float+0x23c>
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	465a      	mov	r2, fp
 8003e1e:	4631      	mov	r1, r6
 8003e20:	4628      	mov	r0, r5
 8003e22:	47b8      	blx	r7
 8003e24:	3001      	adds	r0, #1
 8003e26:	f43f aeae 	beq.w	8003b86 <_printf_float+0xb6>
 8003e2a:	f108 0801 	add.w	r8, r8, #1
 8003e2e:	e7ec      	b.n	8003e0a <_printf_float+0x33a>
 8003e30:	4642      	mov	r2, r8
 8003e32:	4631      	mov	r1, r6
 8003e34:	4628      	mov	r0, r5
 8003e36:	47b8      	blx	r7
 8003e38:	3001      	adds	r0, #1
 8003e3a:	d1c2      	bne.n	8003dc2 <_printf_float+0x2f2>
 8003e3c:	e6a3      	b.n	8003b86 <_printf_float+0xb6>
 8003e3e:	2301      	movs	r3, #1
 8003e40:	4631      	mov	r1, r6
 8003e42:	4628      	mov	r0, r5
 8003e44:	9206      	str	r2, [sp, #24]
 8003e46:	47b8      	blx	r7
 8003e48:	3001      	adds	r0, #1
 8003e4a:	f43f ae9c 	beq.w	8003b86 <_printf_float+0xb6>
 8003e4e:	9a06      	ldr	r2, [sp, #24]
 8003e50:	f10b 0b01 	add.w	fp, fp, #1
 8003e54:	e7bb      	b.n	8003dce <_printf_float+0x2fe>
 8003e56:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003e5a:	4631      	mov	r1, r6
 8003e5c:	4628      	mov	r0, r5
 8003e5e:	47b8      	blx	r7
 8003e60:	3001      	adds	r0, #1
 8003e62:	d1c0      	bne.n	8003de6 <_printf_float+0x316>
 8003e64:	e68f      	b.n	8003b86 <_printf_float+0xb6>
 8003e66:	9a06      	ldr	r2, [sp, #24]
 8003e68:	464b      	mov	r3, r9
 8003e6a:	4442      	add	r2, r8
 8003e6c:	4631      	mov	r1, r6
 8003e6e:	4628      	mov	r0, r5
 8003e70:	47b8      	blx	r7
 8003e72:	3001      	adds	r0, #1
 8003e74:	d1c3      	bne.n	8003dfe <_printf_float+0x32e>
 8003e76:	e686      	b.n	8003b86 <_printf_float+0xb6>
 8003e78:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8003e7c:	f1ba 0f01 	cmp.w	sl, #1
 8003e80:	dc01      	bgt.n	8003e86 <_printf_float+0x3b6>
 8003e82:	07db      	lsls	r3, r3, #31
 8003e84:	d536      	bpl.n	8003ef4 <_printf_float+0x424>
 8003e86:	2301      	movs	r3, #1
 8003e88:	4642      	mov	r2, r8
 8003e8a:	4631      	mov	r1, r6
 8003e8c:	4628      	mov	r0, r5
 8003e8e:	47b8      	blx	r7
 8003e90:	3001      	adds	r0, #1
 8003e92:	f43f ae78 	beq.w	8003b86 <_printf_float+0xb6>
 8003e96:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003e9a:	4631      	mov	r1, r6
 8003e9c:	4628      	mov	r0, r5
 8003e9e:	47b8      	blx	r7
 8003ea0:	3001      	adds	r0, #1
 8003ea2:	f43f ae70 	beq.w	8003b86 <_printf_float+0xb6>
 8003ea6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8003eaa:	2200      	movs	r2, #0
 8003eac:	2300      	movs	r3, #0
 8003eae:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003eb2:	f7fc fe11 	bl	8000ad8 <__aeabi_dcmpeq>
 8003eb6:	b9c0      	cbnz	r0, 8003eea <_printf_float+0x41a>
 8003eb8:	4653      	mov	r3, sl
 8003eba:	f108 0201 	add.w	r2, r8, #1
 8003ebe:	4631      	mov	r1, r6
 8003ec0:	4628      	mov	r0, r5
 8003ec2:	47b8      	blx	r7
 8003ec4:	3001      	adds	r0, #1
 8003ec6:	d10c      	bne.n	8003ee2 <_printf_float+0x412>
 8003ec8:	e65d      	b.n	8003b86 <_printf_float+0xb6>
 8003eca:	2301      	movs	r3, #1
 8003ecc:	465a      	mov	r2, fp
 8003ece:	4631      	mov	r1, r6
 8003ed0:	4628      	mov	r0, r5
 8003ed2:	47b8      	blx	r7
 8003ed4:	3001      	adds	r0, #1
 8003ed6:	f43f ae56 	beq.w	8003b86 <_printf_float+0xb6>
 8003eda:	f108 0801 	add.w	r8, r8, #1
 8003ede:	45d0      	cmp	r8, sl
 8003ee0:	dbf3      	blt.n	8003eca <_printf_float+0x3fa>
 8003ee2:	464b      	mov	r3, r9
 8003ee4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8003ee8:	e6df      	b.n	8003caa <_printf_float+0x1da>
 8003eea:	f04f 0800 	mov.w	r8, #0
 8003eee:	f104 0b1a 	add.w	fp, r4, #26
 8003ef2:	e7f4      	b.n	8003ede <_printf_float+0x40e>
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	4642      	mov	r2, r8
 8003ef8:	e7e1      	b.n	8003ebe <_printf_float+0x3ee>
 8003efa:	2301      	movs	r3, #1
 8003efc:	464a      	mov	r2, r9
 8003efe:	4631      	mov	r1, r6
 8003f00:	4628      	mov	r0, r5
 8003f02:	47b8      	blx	r7
 8003f04:	3001      	adds	r0, #1
 8003f06:	f43f ae3e 	beq.w	8003b86 <_printf_float+0xb6>
 8003f0a:	f108 0801 	add.w	r8, r8, #1
 8003f0e:	68e3      	ldr	r3, [r4, #12]
 8003f10:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8003f12:	1a5b      	subs	r3, r3, r1
 8003f14:	4543      	cmp	r3, r8
 8003f16:	dcf0      	bgt.n	8003efa <_printf_float+0x42a>
 8003f18:	e6fc      	b.n	8003d14 <_printf_float+0x244>
 8003f1a:	f04f 0800 	mov.w	r8, #0
 8003f1e:	f104 0919 	add.w	r9, r4, #25
 8003f22:	e7f4      	b.n	8003f0e <_printf_float+0x43e>

08003f24 <_printf_common>:
 8003f24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f28:	4616      	mov	r6, r2
 8003f2a:	4698      	mov	r8, r3
 8003f2c:	688a      	ldr	r2, [r1, #8]
 8003f2e:	690b      	ldr	r3, [r1, #16]
 8003f30:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003f34:	4293      	cmp	r3, r2
 8003f36:	bfb8      	it	lt
 8003f38:	4613      	movlt	r3, r2
 8003f3a:	6033      	str	r3, [r6, #0]
 8003f3c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003f40:	4607      	mov	r7, r0
 8003f42:	460c      	mov	r4, r1
 8003f44:	b10a      	cbz	r2, 8003f4a <_printf_common+0x26>
 8003f46:	3301      	adds	r3, #1
 8003f48:	6033      	str	r3, [r6, #0]
 8003f4a:	6823      	ldr	r3, [r4, #0]
 8003f4c:	0699      	lsls	r1, r3, #26
 8003f4e:	bf42      	ittt	mi
 8003f50:	6833      	ldrmi	r3, [r6, #0]
 8003f52:	3302      	addmi	r3, #2
 8003f54:	6033      	strmi	r3, [r6, #0]
 8003f56:	6825      	ldr	r5, [r4, #0]
 8003f58:	f015 0506 	ands.w	r5, r5, #6
 8003f5c:	d106      	bne.n	8003f6c <_printf_common+0x48>
 8003f5e:	f104 0a19 	add.w	sl, r4, #25
 8003f62:	68e3      	ldr	r3, [r4, #12]
 8003f64:	6832      	ldr	r2, [r6, #0]
 8003f66:	1a9b      	subs	r3, r3, r2
 8003f68:	42ab      	cmp	r3, r5
 8003f6a:	dc26      	bgt.n	8003fba <_printf_common+0x96>
 8003f6c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003f70:	6822      	ldr	r2, [r4, #0]
 8003f72:	3b00      	subs	r3, #0
 8003f74:	bf18      	it	ne
 8003f76:	2301      	movne	r3, #1
 8003f78:	0692      	lsls	r2, r2, #26
 8003f7a:	d42b      	bmi.n	8003fd4 <_printf_common+0xb0>
 8003f7c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003f80:	4641      	mov	r1, r8
 8003f82:	4638      	mov	r0, r7
 8003f84:	47c8      	blx	r9
 8003f86:	3001      	adds	r0, #1
 8003f88:	d01e      	beq.n	8003fc8 <_printf_common+0xa4>
 8003f8a:	6823      	ldr	r3, [r4, #0]
 8003f8c:	6922      	ldr	r2, [r4, #16]
 8003f8e:	f003 0306 	and.w	r3, r3, #6
 8003f92:	2b04      	cmp	r3, #4
 8003f94:	bf02      	ittt	eq
 8003f96:	68e5      	ldreq	r5, [r4, #12]
 8003f98:	6833      	ldreq	r3, [r6, #0]
 8003f9a:	1aed      	subeq	r5, r5, r3
 8003f9c:	68a3      	ldr	r3, [r4, #8]
 8003f9e:	bf0c      	ite	eq
 8003fa0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003fa4:	2500      	movne	r5, #0
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	bfc4      	itt	gt
 8003faa:	1a9b      	subgt	r3, r3, r2
 8003fac:	18ed      	addgt	r5, r5, r3
 8003fae:	2600      	movs	r6, #0
 8003fb0:	341a      	adds	r4, #26
 8003fb2:	42b5      	cmp	r5, r6
 8003fb4:	d11a      	bne.n	8003fec <_printf_common+0xc8>
 8003fb6:	2000      	movs	r0, #0
 8003fb8:	e008      	b.n	8003fcc <_printf_common+0xa8>
 8003fba:	2301      	movs	r3, #1
 8003fbc:	4652      	mov	r2, sl
 8003fbe:	4641      	mov	r1, r8
 8003fc0:	4638      	mov	r0, r7
 8003fc2:	47c8      	blx	r9
 8003fc4:	3001      	adds	r0, #1
 8003fc6:	d103      	bne.n	8003fd0 <_printf_common+0xac>
 8003fc8:	f04f 30ff 	mov.w	r0, #4294967295
 8003fcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003fd0:	3501      	adds	r5, #1
 8003fd2:	e7c6      	b.n	8003f62 <_printf_common+0x3e>
 8003fd4:	18e1      	adds	r1, r4, r3
 8003fd6:	1c5a      	adds	r2, r3, #1
 8003fd8:	2030      	movs	r0, #48	@ 0x30
 8003fda:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003fde:	4422      	add	r2, r4
 8003fe0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003fe4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003fe8:	3302      	adds	r3, #2
 8003fea:	e7c7      	b.n	8003f7c <_printf_common+0x58>
 8003fec:	2301      	movs	r3, #1
 8003fee:	4622      	mov	r2, r4
 8003ff0:	4641      	mov	r1, r8
 8003ff2:	4638      	mov	r0, r7
 8003ff4:	47c8      	blx	r9
 8003ff6:	3001      	adds	r0, #1
 8003ff8:	d0e6      	beq.n	8003fc8 <_printf_common+0xa4>
 8003ffa:	3601      	adds	r6, #1
 8003ffc:	e7d9      	b.n	8003fb2 <_printf_common+0x8e>
	...

08004000 <_printf_i>:
 8004000:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004004:	7e0f      	ldrb	r7, [r1, #24]
 8004006:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004008:	2f78      	cmp	r7, #120	@ 0x78
 800400a:	4691      	mov	r9, r2
 800400c:	4680      	mov	r8, r0
 800400e:	460c      	mov	r4, r1
 8004010:	469a      	mov	sl, r3
 8004012:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004016:	d807      	bhi.n	8004028 <_printf_i+0x28>
 8004018:	2f62      	cmp	r7, #98	@ 0x62
 800401a:	d80a      	bhi.n	8004032 <_printf_i+0x32>
 800401c:	2f00      	cmp	r7, #0
 800401e:	f000 80d2 	beq.w	80041c6 <_printf_i+0x1c6>
 8004022:	2f58      	cmp	r7, #88	@ 0x58
 8004024:	f000 80b9 	beq.w	800419a <_printf_i+0x19a>
 8004028:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800402c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004030:	e03a      	b.n	80040a8 <_printf_i+0xa8>
 8004032:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004036:	2b15      	cmp	r3, #21
 8004038:	d8f6      	bhi.n	8004028 <_printf_i+0x28>
 800403a:	a101      	add	r1, pc, #4	@ (adr r1, 8004040 <_printf_i+0x40>)
 800403c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004040:	08004099 	.word	0x08004099
 8004044:	080040ad 	.word	0x080040ad
 8004048:	08004029 	.word	0x08004029
 800404c:	08004029 	.word	0x08004029
 8004050:	08004029 	.word	0x08004029
 8004054:	08004029 	.word	0x08004029
 8004058:	080040ad 	.word	0x080040ad
 800405c:	08004029 	.word	0x08004029
 8004060:	08004029 	.word	0x08004029
 8004064:	08004029 	.word	0x08004029
 8004068:	08004029 	.word	0x08004029
 800406c:	080041ad 	.word	0x080041ad
 8004070:	080040d7 	.word	0x080040d7
 8004074:	08004167 	.word	0x08004167
 8004078:	08004029 	.word	0x08004029
 800407c:	08004029 	.word	0x08004029
 8004080:	080041cf 	.word	0x080041cf
 8004084:	08004029 	.word	0x08004029
 8004088:	080040d7 	.word	0x080040d7
 800408c:	08004029 	.word	0x08004029
 8004090:	08004029 	.word	0x08004029
 8004094:	0800416f 	.word	0x0800416f
 8004098:	6833      	ldr	r3, [r6, #0]
 800409a:	1d1a      	adds	r2, r3, #4
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	6032      	str	r2, [r6, #0]
 80040a0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80040a4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80040a8:	2301      	movs	r3, #1
 80040aa:	e09d      	b.n	80041e8 <_printf_i+0x1e8>
 80040ac:	6833      	ldr	r3, [r6, #0]
 80040ae:	6820      	ldr	r0, [r4, #0]
 80040b0:	1d19      	adds	r1, r3, #4
 80040b2:	6031      	str	r1, [r6, #0]
 80040b4:	0606      	lsls	r6, r0, #24
 80040b6:	d501      	bpl.n	80040bc <_printf_i+0xbc>
 80040b8:	681d      	ldr	r5, [r3, #0]
 80040ba:	e003      	b.n	80040c4 <_printf_i+0xc4>
 80040bc:	0645      	lsls	r5, r0, #25
 80040be:	d5fb      	bpl.n	80040b8 <_printf_i+0xb8>
 80040c0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80040c4:	2d00      	cmp	r5, #0
 80040c6:	da03      	bge.n	80040d0 <_printf_i+0xd0>
 80040c8:	232d      	movs	r3, #45	@ 0x2d
 80040ca:	426d      	negs	r5, r5
 80040cc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80040d0:	4859      	ldr	r0, [pc, #356]	@ (8004238 <_printf_i+0x238>)
 80040d2:	230a      	movs	r3, #10
 80040d4:	e011      	b.n	80040fa <_printf_i+0xfa>
 80040d6:	6821      	ldr	r1, [r4, #0]
 80040d8:	6833      	ldr	r3, [r6, #0]
 80040da:	0608      	lsls	r0, r1, #24
 80040dc:	f853 5b04 	ldr.w	r5, [r3], #4
 80040e0:	d402      	bmi.n	80040e8 <_printf_i+0xe8>
 80040e2:	0649      	lsls	r1, r1, #25
 80040e4:	bf48      	it	mi
 80040e6:	b2ad      	uxthmi	r5, r5
 80040e8:	2f6f      	cmp	r7, #111	@ 0x6f
 80040ea:	4853      	ldr	r0, [pc, #332]	@ (8004238 <_printf_i+0x238>)
 80040ec:	6033      	str	r3, [r6, #0]
 80040ee:	bf14      	ite	ne
 80040f0:	230a      	movne	r3, #10
 80040f2:	2308      	moveq	r3, #8
 80040f4:	2100      	movs	r1, #0
 80040f6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80040fa:	6866      	ldr	r6, [r4, #4]
 80040fc:	60a6      	str	r6, [r4, #8]
 80040fe:	2e00      	cmp	r6, #0
 8004100:	bfa2      	ittt	ge
 8004102:	6821      	ldrge	r1, [r4, #0]
 8004104:	f021 0104 	bicge.w	r1, r1, #4
 8004108:	6021      	strge	r1, [r4, #0]
 800410a:	b90d      	cbnz	r5, 8004110 <_printf_i+0x110>
 800410c:	2e00      	cmp	r6, #0
 800410e:	d04b      	beq.n	80041a8 <_printf_i+0x1a8>
 8004110:	4616      	mov	r6, r2
 8004112:	fbb5 f1f3 	udiv	r1, r5, r3
 8004116:	fb03 5711 	mls	r7, r3, r1, r5
 800411a:	5dc7      	ldrb	r7, [r0, r7]
 800411c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004120:	462f      	mov	r7, r5
 8004122:	42bb      	cmp	r3, r7
 8004124:	460d      	mov	r5, r1
 8004126:	d9f4      	bls.n	8004112 <_printf_i+0x112>
 8004128:	2b08      	cmp	r3, #8
 800412a:	d10b      	bne.n	8004144 <_printf_i+0x144>
 800412c:	6823      	ldr	r3, [r4, #0]
 800412e:	07df      	lsls	r7, r3, #31
 8004130:	d508      	bpl.n	8004144 <_printf_i+0x144>
 8004132:	6923      	ldr	r3, [r4, #16]
 8004134:	6861      	ldr	r1, [r4, #4]
 8004136:	4299      	cmp	r1, r3
 8004138:	bfde      	ittt	le
 800413a:	2330      	movle	r3, #48	@ 0x30
 800413c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004140:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004144:	1b92      	subs	r2, r2, r6
 8004146:	6122      	str	r2, [r4, #16]
 8004148:	f8cd a000 	str.w	sl, [sp]
 800414c:	464b      	mov	r3, r9
 800414e:	aa03      	add	r2, sp, #12
 8004150:	4621      	mov	r1, r4
 8004152:	4640      	mov	r0, r8
 8004154:	f7ff fee6 	bl	8003f24 <_printf_common>
 8004158:	3001      	adds	r0, #1
 800415a:	d14a      	bne.n	80041f2 <_printf_i+0x1f2>
 800415c:	f04f 30ff 	mov.w	r0, #4294967295
 8004160:	b004      	add	sp, #16
 8004162:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004166:	6823      	ldr	r3, [r4, #0]
 8004168:	f043 0320 	orr.w	r3, r3, #32
 800416c:	6023      	str	r3, [r4, #0]
 800416e:	4833      	ldr	r0, [pc, #204]	@ (800423c <_printf_i+0x23c>)
 8004170:	2778      	movs	r7, #120	@ 0x78
 8004172:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004176:	6823      	ldr	r3, [r4, #0]
 8004178:	6831      	ldr	r1, [r6, #0]
 800417a:	061f      	lsls	r7, r3, #24
 800417c:	f851 5b04 	ldr.w	r5, [r1], #4
 8004180:	d402      	bmi.n	8004188 <_printf_i+0x188>
 8004182:	065f      	lsls	r7, r3, #25
 8004184:	bf48      	it	mi
 8004186:	b2ad      	uxthmi	r5, r5
 8004188:	6031      	str	r1, [r6, #0]
 800418a:	07d9      	lsls	r1, r3, #31
 800418c:	bf44      	itt	mi
 800418e:	f043 0320 	orrmi.w	r3, r3, #32
 8004192:	6023      	strmi	r3, [r4, #0]
 8004194:	b11d      	cbz	r5, 800419e <_printf_i+0x19e>
 8004196:	2310      	movs	r3, #16
 8004198:	e7ac      	b.n	80040f4 <_printf_i+0xf4>
 800419a:	4827      	ldr	r0, [pc, #156]	@ (8004238 <_printf_i+0x238>)
 800419c:	e7e9      	b.n	8004172 <_printf_i+0x172>
 800419e:	6823      	ldr	r3, [r4, #0]
 80041a0:	f023 0320 	bic.w	r3, r3, #32
 80041a4:	6023      	str	r3, [r4, #0]
 80041a6:	e7f6      	b.n	8004196 <_printf_i+0x196>
 80041a8:	4616      	mov	r6, r2
 80041aa:	e7bd      	b.n	8004128 <_printf_i+0x128>
 80041ac:	6833      	ldr	r3, [r6, #0]
 80041ae:	6825      	ldr	r5, [r4, #0]
 80041b0:	6961      	ldr	r1, [r4, #20]
 80041b2:	1d18      	adds	r0, r3, #4
 80041b4:	6030      	str	r0, [r6, #0]
 80041b6:	062e      	lsls	r6, r5, #24
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	d501      	bpl.n	80041c0 <_printf_i+0x1c0>
 80041bc:	6019      	str	r1, [r3, #0]
 80041be:	e002      	b.n	80041c6 <_printf_i+0x1c6>
 80041c0:	0668      	lsls	r0, r5, #25
 80041c2:	d5fb      	bpl.n	80041bc <_printf_i+0x1bc>
 80041c4:	8019      	strh	r1, [r3, #0]
 80041c6:	2300      	movs	r3, #0
 80041c8:	6123      	str	r3, [r4, #16]
 80041ca:	4616      	mov	r6, r2
 80041cc:	e7bc      	b.n	8004148 <_printf_i+0x148>
 80041ce:	6833      	ldr	r3, [r6, #0]
 80041d0:	1d1a      	adds	r2, r3, #4
 80041d2:	6032      	str	r2, [r6, #0]
 80041d4:	681e      	ldr	r6, [r3, #0]
 80041d6:	6862      	ldr	r2, [r4, #4]
 80041d8:	2100      	movs	r1, #0
 80041da:	4630      	mov	r0, r6
 80041dc:	f7fc f800 	bl	80001e0 <memchr>
 80041e0:	b108      	cbz	r0, 80041e6 <_printf_i+0x1e6>
 80041e2:	1b80      	subs	r0, r0, r6
 80041e4:	6060      	str	r0, [r4, #4]
 80041e6:	6863      	ldr	r3, [r4, #4]
 80041e8:	6123      	str	r3, [r4, #16]
 80041ea:	2300      	movs	r3, #0
 80041ec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80041f0:	e7aa      	b.n	8004148 <_printf_i+0x148>
 80041f2:	6923      	ldr	r3, [r4, #16]
 80041f4:	4632      	mov	r2, r6
 80041f6:	4649      	mov	r1, r9
 80041f8:	4640      	mov	r0, r8
 80041fa:	47d0      	blx	sl
 80041fc:	3001      	adds	r0, #1
 80041fe:	d0ad      	beq.n	800415c <_printf_i+0x15c>
 8004200:	6823      	ldr	r3, [r4, #0]
 8004202:	079b      	lsls	r3, r3, #30
 8004204:	d413      	bmi.n	800422e <_printf_i+0x22e>
 8004206:	68e0      	ldr	r0, [r4, #12]
 8004208:	9b03      	ldr	r3, [sp, #12]
 800420a:	4298      	cmp	r0, r3
 800420c:	bfb8      	it	lt
 800420e:	4618      	movlt	r0, r3
 8004210:	e7a6      	b.n	8004160 <_printf_i+0x160>
 8004212:	2301      	movs	r3, #1
 8004214:	4632      	mov	r2, r6
 8004216:	4649      	mov	r1, r9
 8004218:	4640      	mov	r0, r8
 800421a:	47d0      	blx	sl
 800421c:	3001      	adds	r0, #1
 800421e:	d09d      	beq.n	800415c <_printf_i+0x15c>
 8004220:	3501      	adds	r5, #1
 8004222:	68e3      	ldr	r3, [r4, #12]
 8004224:	9903      	ldr	r1, [sp, #12]
 8004226:	1a5b      	subs	r3, r3, r1
 8004228:	42ab      	cmp	r3, r5
 800422a:	dcf2      	bgt.n	8004212 <_printf_i+0x212>
 800422c:	e7eb      	b.n	8004206 <_printf_i+0x206>
 800422e:	2500      	movs	r5, #0
 8004230:	f104 0619 	add.w	r6, r4, #25
 8004234:	e7f5      	b.n	8004222 <_printf_i+0x222>
 8004236:	bf00      	nop
 8004238:	0800635e 	.word	0x0800635e
 800423c:	0800636f 	.word	0x0800636f

08004240 <std>:
 8004240:	2300      	movs	r3, #0
 8004242:	b510      	push	{r4, lr}
 8004244:	4604      	mov	r4, r0
 8004246:	e9c0 3300 	strd	r3, r3, [r0]
 800424a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800424e:	6083      	str	r3, [r0, #8]
 8004250:	8181      	strh	r1, [r0, #12]
 8004252:	6643      	str	r3, [r0, #100]	@ 0x64
 8004254:	81c2      	strh	r2, [r0, #14]
 8004256:	6183      	str	r3, [r0, #24]
 8004258:	4619      	mov	r1, r3
 800425a:	2208      	movs	r2, #8
 800425c:	305c      	adds	r0, #92	@ 0x5c
 800425e:	f000 f906 	bl	800446e <memset>
 8004262:	4b0d      	ldr	r3, [pc, #52]	@ (8004298 <std+0x58>)
 8004264:	6263      	str	r3, [r4, #36]	@ 0x24
 8004266:	4b0d      	ldr	r3, [pc, #52]	@ (800429c <std+0x5c>)
 8004268:	62a3      	str	r3, [r4, #40]	@ 0x28
 800426a:	4b0d      	ldr	r3, [pc, #52]	@ (80042a0 <std+0x60>)
 800426c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800426e:	4b0d      	ldr	r3, [pc, #52]	@ (80042a4 <std+0x64>)
 8004270:	6323      	str	r3, [r4, #48]	@ 0x30
 8004272:	4b0d      	ldr	r3, [pc, #52]	@ (80042a8 <std+0x68>)
 8004274:	6224      	str	r4, [r4, #32]
 8004276:	429c      	cmp	r4, r3
 8004278:	d006      	beq.n	8004288 <std+0x48>
 800427a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800427e:	4294      	cmp	r4, r2
 8004280:	d002      	beq.n	8004288 <std+0x48>
 8004282:	33d0      	adds	r3, #208	@ 0xd0
 8004284:	429c      	cmp	r4, r3
 8004286:	d105      	bne.n	8004294 <std+0x54>
 8004288:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800428c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004290:	f000 b96a 	b.w	8004568 <__retarget_lock_init_recursive>
 8004294:	bd10      	pop	{r4, pc}
 8004296:	bf00      	nop
 8004298:	080043e9 	.word	0x080043e9
 800429c:	0800440b 	.word	0x0800440b
 80042a0:	08004443 	.word	0x08004443
 80042a4:	08004467 	.word	0x08004467
 80042a8:	20000280 	.word	0x20000280

080042ac <stdio_exit_handler>:
 80042ac:	4a02      	ldr	r2, [pc, #8]	@ (80042b8 <stdio_exit_handler+0xc>)
 80042ae:	4903      	ldr	r1, [pc, #12]	@ (80042bc <stdio_exit_handler+0x10>)
 80042b0:	4803      	ldr	r0, [pc, #12]	@ (80042c0 <stdio_exit_handler+0x14>)
 80042b2:	f000 b869 	b.w	8004388 <_fwalk_sglue>
 80042b6:	bf00      	nop
 80042b8:	2000000c 	.word	0x2000000c
 80042bc:	08005e99 	.word	0x08005e99
 80042c0:	2000001c 	.word	0x2000001c

080042c4 <cleanup_stdio>:
 80042c4:	6841      	ldr	r1, [r0, #4]
 80042c6:	4b0c      	ldr	r3, [pc, #48]	@ (80042f8 <cleanup_stdio+0x34>)
 80042c8:	4299      	cmp	r1, r3
 80042ca:	b510      	push	{r4, lr}
 80042cc:	4604      	mov	r4, r0
 80042ce:	d001      	beq.n	80042d4 <cleanup_stdio+0x10>
 80042d0:	f001 fde2 	bl	8005e98 <_fflush_r>
 80042d4:	68a1      	ldr	r1, [r4, #8]
 80042d6:	4b09      	ldr	r3, [pc, #36]	@ (80042fc <cleanup_stdio+0x38>)
 80042d8:	4299      	cmp	r1, r3
 80042da:	d002      	beq.n	80042e2 <cleanup_stdio+0x1e>
 80042dc:	4620      	mov	r0, r4
 80042de:	f001 fddb 	bl	8005e98 <_fflush_r>
 80042e2:	68e1      	ldr	r1, [r4, #12]
 80042e4:	4b06      	ldr	r3, [pc, #24]	@ (8004300 <cleanup_stdio+0x3c>)
 80042e6:	4299      	cmp	r1, r3
 80042e8:	d004      	beq.n	80042f4 <cleanup_stdio+0x30>
 80042ea:	4620      	mov	r0, r4
 80042ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80042f0:	f001 bdd2 	b.w	8005e98 <_fflush_r>
 80042f4:	bd10      	pop	{r4, pc}
 80042f6:	bf00      	nop
 80042f8:	20000280 	.word	0x20000280
 80042fc:	200002e8 	.word	0x200002e8
 8004300:	20000350 	.word	0x20000350

08004304 <global_stdio_init.part.0>:
 8004304:	b510      	push	{r4, lr}
 8004306:	4b0b      	ldr	r3, [pc, #44]	@ (8004334 <global_stdio_init.part.0+0x30>)
 8004308:	4c0b      	ldr	r4, [pc, #44]	@ (8004338 <global_stdio_init.part.0+0x34>)
 800430a:	4a0c      	ldr	r2, [pc, #48]	@ (800433c <global_stdio_init.part.0+0x38>)
 800430c:	601a      	str	r2, [r3, #0]
 800430e:	4620      	mov	r0, r4
 8004310:	2200      	movs	r2, #0
 8004312:	2104      	movs	r1, #4
 8004314:	f7ff ff94 	bl	8004240 <std>
 8004318:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800431c:	2201      	movs	r2, #1
 800431e:	2109      	movs	r1, #9
 8004320:	f7ff ff8e 	bl	8004240 <std>
 8004324:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004328:	2202      	movs	r2, #2
 800432a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800432e:	2112      	movs	r1, #18
 8004330:	f7ff bf86 	b.w	8004240 <std>
 8004334:	200003b8 	.word	0x200003b8
 8004338:	20000280 	.word	0x20000280
 800433c:	080042ad 	.word	0x080042ad

08004340 <__sfp_lock_acquire>:
 8004340:	4801      	ldr	r0, [pc, #4]	@ (8004348 <__sfp_lock_acquire+0x8>)
 8004342:	f000 b912 	b.w	800456a <__retarget_lock_acquire_recursive>
 8004346:	bf00      	nop
 8004348:	200003c1 	.word	0x200003c1

0800434c <__sfp_lock_release>:
 800434c:	4801      	ldr	r0, [pc, #4]	@ (8004354 <__sfp_lock_release+0x8>)
 800434e:	f000 b90d 	b.w	800456c <__retarget_lock_release_recursive>
 8004352:	bf00      	nop
 8004354:	200003c1 	.word	0x200003c1

08004358 <__sinit>:
 8004358:	b510      	push	{r4, lr}
 800435a:	4604      	mov	r4, r0
 800435c:	f7ff fff0 	bl	8004340 <__sfp_lock_acquire>
 8004360:	6a23      	ldr	r3, [r4, #32]
 8004362:	b11b      	cbz	r3, 800436c <__sinit+0x14>
 8004364:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004368:	f7ff bff0 	b.w	800434c <__sfp_lock_release>
 800436c:	4b04      	ldr	r3, [pc, #16]	@ (8004380 <__sinit+0x28>)
 800436e:	6223      	str	r3, [r4, #32]
 8004370:	4b04      	ldr	r3, [pc, #16]	@ (8004384 <__sinit+0x2c>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d1f5      	bne.n	8004364 <__sinit+0xc>
 8004378:	f7ff ffc4 	bl	8004304 <global_stdio_init.part.0>
 800437c:	e7f2      	b.n	8004364 <__sinit+0xc>
 800437e:	bf00      	nop
 8004380:	080042c5 	.word	0x080042c5
 8004384:	200003b8 	.word	0x200003b8

08004388 <_fwalk_sglue>:
 8004388:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800438c:	4607      	mov	r7, r0
 800438e:	4688      	mov	r8, r1
 8004390:	4614      	mov	r4, r2
 8004392:	2600      	movs	r6, #0
 8004394:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004398:	f1b9 0901 	subs.w	r9, r9, #1
 800439c:	d505      	bpl.n	80043aa <_fwalk_sglue+0x22>
 800439e:	6824      	ldr	r4, [r4, #0]
 80043a0:	2c00      	cmp	r4, #0
 80043a2:	d1f7      	bne.n	8004394 <_fwalk_sglue+0xc>
 80043a4:	4630      	mov	r0, r6
 80043a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80043aa:	89ab      	ldrh	r3, [r5, #12]
 80043ac:	2b01      	cmp	r3, #1
 80043ae:	d907      	bls.n	80043c0 <_fwalk_sglue+0x38>
 80043b0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80043b4:	3301      	adds	r3, #1
 80043b6:	d003      	beq.n	80043c0 <_fwalk_sglue+0x38>
 80043b8:	4629      	mov	r1, r5
 80043ba:	4638      	mov	r0, r7
 80043bc:	47c0      	blx	r8
 80043be:	4306      	orrs	r6, r0
 80043c0:	3568      	adds	r5, #104	@ 0x68
 80043c2:	e7e9      	b.n	8004398 <_fwalk_sglue+0x10>

080043c4 <iprintf>:
 80043c4:	b40f      	push	{r0, r1, r2, r3}
 80043c6:	b507      	push	{r0, r1, r2, lr}
 80043c8:	4906      	ldr	r1, [pc, #24]	@ (80043e4 <iprintf+0x20>)
 80043ca:	ab04      	add	r3, sp, #16
 80043cc:	6808      	ldr	r0, [r1, #0]
 80043ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80043d2:	6881      	ldr	r1, [r0, #8]
 80043d4:	9301      	str	r3, [sp, #4]
 80043d6:	f001 fbc3 	bl	8005b60 <_vfiprintf_r>
 80043da:	b003      	add	sp, #12
 80043dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80043e0:	b004      	add	sp, #16
 80043e2:	4770      	bx	lr
 80043e4:	20000018 	.word	0x20000018

080043e8 <__sread>:
 80043e8:	b510      	push	{r4, lr}
 80043ea:	460c      	mov	r4, r1
 80043ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80043f0:	f000 f86c 	bl	80044cc <_read_r>
 80043f4:	2800      	cmp	r0, #0
 80043f6:	bfab      	itete	ge
 80043f8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80043fa:	89a3      	ldrhlt	r3, [r4, #12]
 80043fc:	181b      	addge	r3, r3, r0
 80043fe:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004402:	bfac      	ite	ge
 8004404:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004406:	81a3      	strhlt	r3, [r4, #12]
 8004408:	bd10      	pop	{r4, pc}

0800440a <__swrite>:
 800440a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800440e:	461f      	mov	r7, r3
 8004410:	898b      	ldrh	r3, [r1, #12]
 8004412:	05db      	lsls	r3, r3, #23
 8004414:	4605      	mov	r5, r0
 8004416:	460c      	mov	r4, r1
 8004418:	4616      	mov	r6, r2
 800441a:	d505      	bpl.n	8004428 <__swrite+0x1e>
 800441c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004420:	2302      	movs	r3, #2
 8004422:	2200      	movs	r2, #0
 8004424:	f000 f840 	bl	80044a8 <_lseek_r>
 8004428:	89a3      	ldrh	r3, [r4, #12]
 800442a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800442e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004432:	81a3      	strh	r3, [r4, #12]
 8004434:	4632      	mov	r2, r6
 8004436:	463b      	mov	r3, r7
 8004438:	4628      	mov	r0, r5
 800443a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800443e:	f000 b857 	b.w	80044f0 <_write_r>

08004442 <__sseek>:
 8004442:	b510      	push	{r4, lr}
 8004444:	460c      	mov	r4, r1
 8004446:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800444a:	f000 f82d 	bl	80044a8 <_lseek_r>
 800444e:	1c43      	adds	r3, r0, #1
 8004450:	89a3      	ldrh	r3, [r4, #12]
 8004452:	bf15      	itete	ne
 8004454:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004456:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800445a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800445e:	81a3      	strheq	r3, [r4, #12]
 8004460:	bf18      	it	ne
 8004462:	81a3      	strhne	r3, [r4, #12]
 8004464:	bd10      	pop	{r4, pc}

08004466 <__sclose>:
 8004466:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800446a:	f000 b80d 	b.w	8004488 <_close_r>

0800446e <memset>:
 800446e:	4402      	add	r2, r0
 8004470:	4603      	mov	r3, r0
 8004472:	4293      	cmp	r3, r2
 8004474:	d100      	bne.n	8004478 <memset+0xa>
 8004476:	4770      	bx	lr
 8004478:	f803 1b01 	strb.w	r1, [r3], #1
 800447c:	e7f9      	b.n	8004472 <memset+0x4>
	...

08004480 <_localeconv_r>:
 8004480:	4800      	ldr	r0, [pc, #0]	@ (8004484 <_localeconv_r+0x4>)
 8004482:	4770      	bx	lr
 8004484:	20000158 	.word	0x20000158

08004488 <_close_r>:
 8004488:	b538      	push	{r3, r4, r5, lr}
 800448a:	4d06      	ldr	r5, [pc, #24]	@ (80044a4 <_close_r+0x1c>)
 800448c:	2300      	movs	r3, #0
 800448e:	4604      	mov	r4, r0
 8004490:	4608      	mov	r0, r1
 8004492:	602b      	str	r3, [r5, #0]
 8004494:	f7fc fda7 	bl	8000fe6 <_close>
 8004498:	1c43      	adds	r3, r0, #1
 800449a:	d102      	bne.n	80044a2 <_close_r+0x1a>
 800449c:	682b      	ldr	r3, [r5, #0]
 800449e:	b103      	cbz	r3, 80044a2 <_close_r+0x1a>
 80044a0:	6023      	str	r3, [r4, #0]
 80044a2:	bd38      	pop	{r3, r4, r5, pc}
 80044a4:	200003bc 	.word	0x200003bc

080044a8 <_lseek_r>:
 80044a8:	b538      	push	{r3, r4, r5, lr}
 80044aa:	4d07      	ldr	r5, [pc, #28]	@ (80044c8 <_lseek_r+0x20>)
 80044ac:	4604      	mov	r4, r0
 80044ae:	4608      	mov	r0, r1
 80044b0:	4611      	mov	r1, r2
 80044b2:	2200      	movs	r2, #0
 80044b4:	602a      	str	r2, [r5, #0]
 80044b6:	461a      	mov	r2, r3
 80044b8:	f7fc fdbc 	bl	8001034 <_lseek>
 80044bc:	1c43      	adds	r3, r0, #1
 80044be:	d102      	bne.n	80044c6 <_lseek_r+0x1e>
 80044c0:	682b      	ldr	r3, [r5, #0]
 80044c2:	b103      	cbz	r3, 80044c6 <_lseek_r+0x1e>
 80044c4:	6023      	str	r3, [r4, #0]
 80044c6:	bd38      	pop	{r3, r4, r5, pc}
 80044c8:	200003bc 	.word	0x200003bc

080044cc <_read_r>:
 80044cc:	b538      	push	{r3, r4, r5, lr}
 80044ce:	4d07      	ldr	r5, [pc, #28]	@ (80044ec <_read_r+0x20>)
 80044d0:	4604      	mov	r4, r0
 80044d2:	4608      	mov	r0, r1
 80044d4:	4611      	mov	r1, r2
 80044d6:	2200      	movs	r2, #0
 80044d8:	602a      	str	r2, [r5, #0]
 80044da:	461a      	mov	r2, r3
 80044dc:	f7fc fd4a 	bl	8000f74 <_read>
 80044e0:	1c43      	adds	r3, r0, #1
 80044e2:	d102      	bne.n	80044ea <_read_r+0x1e>
 80044e4:	682b      	ldr	r3, [r5, #0]
 80044e6:	b103      	cbz	r3, 80044ea <_read_r+0x1e>
 80044e8:	6023      	str	r3, [r4, #0]
 80044ea:	bd38      	pop	{r3, r4, r5, pc}
 80044ec:	200003bc 	.word	0x200003bc

080044f0 <_write_r>:
 80044f0:	b538      	push	{r3, r4, r5, lr}
 80044f2:	4d07      	ldr	r5, [pc, #28]	@ (8004510 <_write_r+0x20>)
 80044f4:	4604      	mov	r4, r0
 80044f6:	4608      	mov	r0, r1
 80044f8:	4611      	mov	r1, r2
 80044fa:	2200      	movs	r2, #0
 80044fc:	602a      	str	r2, [r5, #0]
 80044fe:	461a      	mov	r2, r3
 8004500:	f7fc fd55 	bl	8000fae <_write>
 8004504:	1c43      	adds	r3, r0, #1
 8004506:	d102      	bne.n	800450e <_write_r+0x1e>
 8004508:	682b      	ldr	r3, [r5, #0]
 800450a:	b103      	cbz	r3, 800450e <_write_r+0x1e>
 800450c:	6023      	str	r3, [r4, #0]
 800450e:	bd38      	pop	{r3, r4, r5, pc}
 8004510:	200003bc 	.word	0x200003bc

08004514 <__errno>:
 8004514:	4b01      	ldr	r3, [pc, #4]	@ (800451c <__errno+0x8>)
 8004516:	6818      	ldr	r0, [r3, #0]
 8004518:	4770      	bx	lr
 800451a:	bf00      	nop
 800451c:	20000018 	.word	0x20000018

08004520 <__libc_init_array>:
 8004520:	b570      	push	{r4, r5, r6, lr}
 8004522:	4d0d      	ldr	r5, [pc, #52]	@ (8004558 <__libc_init_array+0x38>)
 8004524:	4c0d      	ldr	r4, [pc, #52]	@ (800455c <__libc_init_array+0x3c>)
 8004526:	1b64      	subs	r4, r4, r5
 8004528:	10a4      	asrs	r4, r4, #2
 800452a:	2600      	movs	r6, #0
 800452c:	42a6      	cmp	r6, r4
 800452e:	d109      	bne.n	8004544 <__libc_init_array+0x24>
 8004530:	4d0b      	ldr	r5, [pc, #44]	@ (8004560 <__libc_init_array+0x40>)
 8004532:	4c0c      	ldr	r4, [pc, #48]	@ (8004564 <__libc_init_array+0x44>)
 8004534:	f001 febe 	bl	80062b4 <_init>
 8004538:	1b64      	subs	r4, r4, r5
 800453a:	10a4      	asrs	r4, r4, #2
 800453c:	2600      	movs	r6, #0
 800453e:	42a6      	cmp	r6, r4
 8004540:	d105      	bne.n	800454e <__libc_init_array+0x2e>
 8004542:	bd70      	pop	{r4, r5, r6, pc}
 8004544:	f855 3b04 	ldr.w	r3, [r5], #4
 8004548:	4798      	blx	r3
 800454a:	3601      	adds	r6, #1
 800454c:	e7ee      	b.n	800452c <__libc_init_array+0xc>
 800454e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004552:	4798      	blx	r3
 8004554:	3601      	adds	r6, #1
 8004556:	e7f2      	b.n	800453e <__libc_init_array+0x1e>
 8004558:	080066c8 	.word	0x080066c8
 800455c:	080066c8 	.word	0x080066c8
 8004560:	080066c8 	.word	0x080066c8
 8004564:	080066cc 	.word	0x080066cc

08004568 <__retarget_lock_init_recursive>:
 8004568:	4770      	bx	lr

0800456a <__retarget_lock_acquire_recursive>:
 800456a:	4770      	bx	lr

0800456c <__retarget_lock_release_recursive>:
 800456c:	4770      	bx	lr

0800456e <quorem>:
 800456e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004572:	6903      	ldr	r3, [r0, #16]
 8004574:	690c      	ldr	r4, [r1, #16]
 8004576:	42a3      	cmp	r3, r4
 8004578:	4607      	mov	r7, r0
 800457a:	db7e      	blt.n	800467a <quorem+0x10c>
 800457c:	3c01      	subs	r4, #1
 800457e:	f101 0814 	add.w	r8, r1, #20
 8004582:	00a3      	lsls	r3, r4, #2
 8004584:	f100 0514 	add.w	r5, r0, #20
 8004588:	9300      	str	r3, [sp, #0]
 800458a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800458e:	9301      	str	r3, [sp, #4]
 8004590:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004594:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004598:	3301      	adds	r3, #1
 800459a:	429a      	cmp	r2, r3
 800459c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80045a0:	fbb2 f6f3 	udiv	r6, r2, r3
 80045a4:	d32e      	bcc.n	8004604 <quorem+0x96>
 80045a6:	f04f 0a00 	mov.w	sl, #0
 80045aa:	46c4      	mov	ip, r8
 80045ac:	46ae      	mov	lr, r5
 80045ae:	46d3      	mov	fp, sl
 80045b0:	f85c 3b04 	ldr.w	r3, [ip], #4
 80045b4:	b298      	uxth	r0, r3
 80045b6:	fb06 a000 	mla	r0, r6, r0, sl
 80045ba:	0c02      	lsrs	r2, r0, #16
 80045bc:	0c1b      	lsrs	r3, r3, #16
 80045be:	fb06 2303 	mla	r3, r6, r3, r2
 80045c2:	f8de 2000 	ldr.w	r2, [lr]
 80045c6:	b280      	uxth	r0, r0
 80045c8:	b292      	uxth	r2, r2
 80045ca:	1a12      	subs	r2, r2, r0
 80045cc:	445a      	add	r2, fp
 80045ce:	f8de 0000 	ldr.w	r0, [lr]
 80045d2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80045d6:	b29b      	uxth	r3, r3
 80045d8:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80045dc:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80045e0:	b292      	uxth	r2, r2
 80045e2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80045e6:	45e1      	cmp	r9, ip
 80045e8:	f84e 2b04 	str.w	r2, [lr], #4
 80045ec:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80045f0:	d2de      	bcs.n	80045b0 <quorem+0x42>
 80045f2:	9b00      	ldr	r3, [sp, #0]
 80045f4:	58eb      	ldr	r3, [r5, r3]
 80045f6:	b92b      	cbnz	r3, 8004604 <quorem+0x96>
 80045f8:	9b01      	ldr	r3, [sp, #4]
 80045fa:	3b04      	subs	r3, #4
 80045fc:	429d      	cmp	r5, r3
 80045fe:	461a      	mov	r2, r3
 8004600:	d32f      	bcc.n	8004662 <quorem+0xf4>
 8004602:	613c      	str	r4, [r7, #16]
 8004604:	4638      	mov	r0, r7
 8004606:	f001 f979 	bl	80058fc <__mcmp>
 800460a:	2800      	cmp	r0, #0
 800460c:	db25      	blt.n	800465a <quorem+0xec>
 800460e:	4629      	mov	r1, r5
 8004610:	2000      	movs	r0, #0
 8004612:	f858 2b04 	ldr.w	r2, [r8], #4
 8004616:	f8d1 c000 	ldr.w	ip, [r1]
 800461a:	fa1f fe82 	uxth.w	lr, r2
 800461e:	fa1f f38c 	uxth.w	r3, ip
 8004622:	eba3 030e 	sub.w	r3, r3, lr
 8004626:	4403      	add	r3, r0
 8004628:	0c12      	lsrs	r2, r2, #16
 800462a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800462e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8004632:	b29b      	uxth	r3, r3
 8004634:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004638:	45c1      	cmp	r9, r8
 800463a:	f841 3b04 	str.w	r3, [r1], #4
 800463e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8004642:	d2e6      	bcs.n	8004612 <quorem+0xa4>
 8004644:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004648:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800464c:	b922      	cbnz	r2, 8004658 <quorem+0xea>
 800464e:	3b04      	subs	r3, #4
 8004650:	429d      	cmp	r5, r3
 8004652:	461a      	mov	r2, r3
 8004654:	d30b      	bcc.n	800466e <quorem+0x100>
 8004656:	613c      	str	r4, [r7, #16]
 8004658:	3601      	adds	r6, #1
 800465a:	4630      	mov	r0, r6
 800465c:	b003      	add	sp, #12
 800465e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004662:	6812      	ldr	r2, [r2, #0]
 8004664:	3b04      	subs	r3, #4
 8004666:	2a00      	cmp	r2, #0
 8004668:	d1cb      	bne.n	8004602 <quorem+0x94>
 800466a:	3c01      	subs	r4, #1
 800466c:	e7c6      	b.n	80045fc <quorem+0x8e>
 800466e:	6812      	ldr	r2, [r2, #0]
 8004670:	3b04      	subs	r3, #4
 8004672:	2a00      	cmp	r2, #0
 8004674:	d1ef      	bne.n	8004656 <quorem+0xe8>
 8004676:	3c01      	subs	r4, #1
 8004678:	e7ea      	b.n	8004650 <quorem+0xe2>
 800467a:	2000      	movs	r0, #0
 800467c:	e7ee      	b.n	800465c <quorem+0xee>
	...

08004680 <_dtoa_r>:
 8004680:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004684:	69c7      	ldr	r7, [r0, #28]
 8004686:	b099      	sub	sp, #100	@ 0x64
 8004688:	ed8d 0b02 	vstr	d0, [sp, #8]
 800468c:	ec55 4b10 	vmov	r4, r5, d0
 8004690:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8004692:	9109      	str	r1, [sp, #36]	@ 0x24
 8004694:	4683      	mov	fp, r0
 8004696:	920e      	str	r2, [sp, #56]	@ 0x38
 8004698:	9313      	str	r3, [sp, #76]	@ 0x4c
 800469a:	b97f      	cbnz	r7, 80046bc <_dtoa_r+0x3c>
 800469c:	2010      	movs	r0, #16
 800469e:	f000 fdfd 	bl	800529c <malloc>
 80046a2:	4602      	mov	r2, r0
 80046a4:	f8cb 001c 	str.w	r0, [fp, #28]
 80046a8:	b920      	cbnz	r0, 80046b4 <_dtoa_r+0x34>
 80046aa:	4ba7      	ldr	r3, [pc, #668]	@ (8004948 <_dtoa_r+0x2c8>)
 80046ac:	21ef      	movs	r1, #239	@ 0xef
 80046ae:	48a7      	ldr	r0, [pc, #668]	@ (800494c <_dtoa_r+0x2cc>)
 80046b0:	f001 fccc 	bl	800604c <__assert_func>
 80046b4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80046b8:	6007      	str	r7, [r0, #0]
 80046ba:	60c7      	str	r7, [r0, #12]
 80046bc:	f8db 301c 	ldr.w	r3, [fp, #28]
 80046c0:	6819      	ldr	r1, [r3, #0]
 80046c2:	b159      	cbz	r1, 80046dc <_dtoa_r+0x5c>
 80046c4:	685a      	ldr	r2, [r3, #4]
 80046c6:	604a      	str	r2, [r1, #4]
 80046c8:	2301      	movs	r3, #1
 80046ca:	4093      	lsls	r3, r2
 80046cc:	608b      	str	r3, [r1, #8]
 80046ce:	4658      	mov	r0, fp
 80046d0:	f000 feda 	bl	8005488 <_Bfree>
 80046d4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80046d8:	2200      	movs	r2, #0
 80046da:	601a      	str	r2, [r3, #0]
 80046dc:	1e2b      	subs	r3, r5, #0
 80046de:	bfb9      	ittee	lt
 80046e0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80046e4:	9303      	strlt	r3, [sp, #12]
 80046e6:	2300      	movge	r3, #0
 80046e8:	6033      	strge	r3, [r6, #0]
 80046ea:	9f03      	ldr	r7, [sp, #12]
 80046ec:	4b98      	ldr	r3, [pc, #608]	@ (8004950 <_dtoa_r+0x2d0>)
 80046ee:	bfbc      	itt	lt
 80046f0:	2201      	movlt	r2, #1
 80046f2:	6032      	strlt	r2, [r6, #0]
 80046f4:	43bb      	bics	r3, r7
 80046f6:	d112      	bne.n	800471e <_dtoa_r+0x9e>
 80046f8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80046fa:	f242 730f 	movw	r3, #9999	@ 0x270f
 80046fe:	6013      	str	r3, [r2, #0]
 8004700:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8004704:	4323      	orrs	r3, r4
 8004706:	f000 854d 	beq.w	80051a4 <_dtoa_r+0xb24>
 800470a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800470c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8004964 <_dtoa_r+0x2e4>
 8004710:	2b00      	cmp	r3, #0
 8004712:	f000 854f 	beq.w	80051b4 <_dtoa_r+0xb34>
 8004716:	f10a 0303 	add.w	r3, sl, #3
 800471a:	f000 bd49 	b.w	80051b0 <_dtoa_r+0xb30>
 800471e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004722:	2200      	movs	r2, #0
 8004724:	ec51 0b17 	vmov	r0, r1, d7
 8004728:	2300      	movs	r3, #0
 800472a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800472e:	f7fc f9d3 	bl	8000ad8 <__aeabi_dcmpeq>
 8004732:	4680      	mov	r8, r0
 8004734:	b158      	cbz	r0, 800474e <_dtoa_r+0xce>
 8004736:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8004738:	2301      	movs	r3, #1
 800473a:	6013      	str	r3, [r2, #0]
 800473c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800473e:	b113      	cbz	r3, 8004746 <_dtoa_r+0xc6>
 8004740:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8004742:	4b84      	ldr	r3, [pc, #528]	@ (8004954 <_dtoa_r+0x2d4>)
 8004744:	6013      	str	r3, [r2, #0]
 8004746:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8004968 <_dtoa_r+0x2e8>
 800474a:	f000 bd33 	b.w	80051b4 <_dtoa_r+0xb34>
 800474e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8004752:	aa16      	add	r2, sp, #88	@ 0x58
 8004754:	a917      	add	r1, sp, #92	@ 0x5c
 8004756:	4658      	mov	r0, fp
 8004758:	f001 f980 	bl	8005a5c <__d2b>
 800475c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8004760:	4681      	mov	r9, r0
 8004762:	2e00      	cmp	r6, #0
 8004764:	d077      	beq.n	8004856 <_dtoa_r+0x1d6>
 8004766:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004768:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800476c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004770:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004774:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8004778:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800477c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8004780:	4619      	mov	r1, r3
 8004782:	2200      	movs	r2, #0
 8004784:	4b74      	ldr	r3, [pc, #464]	@ (8004958 <_dtoa_r+0x2d8>)
 8004786:	f7fb fd87 	bl	8000298 <__aeabi_dsub>
 800478a:	a369      	add	r3, pc, #420	@ (adr r3, 8004930 <_dtoa_r+0x2b0>)
 800478c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004790:	f7fb ff3a 	bl	8000608 <__aeabi_dmul>
 8004794:	a368      	add	r3, pc, #416	@ (adr r3, 8004938 <_dtoa_r+0x2b8>)
 8004796:	e9d3 2300 	ldrd	r2, r3, [r3]
 800479a:	f7fb fd7f 	bl	800029c <__adddf3>
 800479e:	4604      	mov	r4, r0
 80047a0:	4630      	mov	r0, r6
 80047a2:	460d      	mov	r5, r1
 80047a4:	f7fb fec6 	bl	8000534 <__aeabi_i2d>
 80047a8:	a365      	add	r3, pc, #404	@ (adr r3, 8004940 <_dtoa_r+0x2c0>)
 80047aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047ae:	f7fb ff2b 	bl	8000608 <__aeabi_dmul>
 80047b2:	4602      	mov	r2, r0
 80047b4:	460b      	mov	r3, r1
 80047b6:	4620      	mov	r0, r4
 80047b8:	4629      	mov	r1, r5
 80047ba:	f7fb fd6f 	bl	800029c <__adddf3>
 80047be:	4604      	mov	r4, r0
 80047c0:	460d      	mov	r5, r1
 80047c2:	f7fc f9d1 	bl	8000b68 <__aeabi_d2iz>
 80047c6:	2200      	movs	r2, #0
 80047c8:	4607      	mov	r7, r0
 80047ca:	2300      	movs	r3, #0
 80047cc:	4620      	mov	r0, r4
 80047ce:	4629      	mov	r1, r5
 80047d0:	f7fc f98c 	bl	8000aec <__aeabi_dcmplt>
 80047d4:	b140      	cbz	r0, 80047e8 <_dtoa_r+0x168>
 80047d6:	4638      	mov	r0, r7
 80047d8:	f7fb feac 	bl	8000534 <__aeabi_i2d>
 80047dc:	4622      	mov	r2, r4
 80047de:	462b      	mov	r3, r5
 80047e0:	f7fc f97a 	bl	8000ad8 <__aeabi_dcmpeq>
 80047e4:	b900      	cbnz	r0, 80047e8 <_dtoa_r+0x168>
 80047e6:	3f01      	subs	r7, #1
 80047e8:	2f16      	cmp	r7, #22
 80047ea:	d851      	bhi.n	8004890 <_dtoa_r+0x210>
 80047ec:	4b5b      	ldr	r3, [pc, #364]	@ (800495c <_dtoa_r+0x2dc>)
 80047ee:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80047f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047f6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80047fa:	f7fc f977 	bl	8000aec <__aeabi_dcmplt>
 80047fe:	2800      	cmp	r0, #0
 8004800:	d048      	beq.n	8004894 <_dtoa_r+0x214>
 8004802:	3f01      	subs	r7, #1
 8004804:	2300      	movs	r3, #0
 8004806:	9312      	str	r3, [sp, #72]	@ 0x48
 8004808:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800480a:	1b9b      	subs	r3, r3, r6
 800480c:	1e5a      	subs	r2, r3, #1
 800480e:	bf44      	itt	mi
 8004810:	f1c3 0801 	rsbmi	r8, r3, #1
 8004814:	2300      	movmi	r3, #0
 8004816:	9208      	str	r2, [sp, #32]
 8004818:	bf54      	ite	pl
 800481a:	f04f 0800 	movpl.w	r8, #0
 800481e:	9308      	strmi	r3, [sp, #32]
 8004820:	2f00      	cmp	r7, #0
 8004822:	db39      	blt.n	8004898 <_dtoa_r+0x218>
 8004824:	9b08      	ldr	r3, [sp, #32]
 8004826:	970f      	str	r7, [sp, #60]	@ 0x3c
 8004828:	443b      	add	r3, r7
 800482a:	9308      	str	r3, [sp, #32]
 800482c:	2300      	movs	r3, #0
 800482e:	930a      	str	r3, [sp, #40]	@ 0x28
 8004830:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004832:	2b09      	cmp	r3, #9
 8004834:	d864      	bhi.n	8004900 <_dtoa_r+0x280>
 8004836:	2b05      	cmp	r3, #5
 8004838:	bfc4      	itt	gt
 800483a:	3b04      	subgt	r3, #4
 800483c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800483e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004840:	f1a3 0302 	sub.w	r3, r3, #2
 8004844:	bfcc      	ite	gt
 8004846:	2400      	movgt	r4, #0
 8004848:	2401      	movle	r4, #1
 800484a:	2b03      	cmp	r3, #3
 800484c:	d863      	bhi.n	8004916 <_dtoa_r+0x296>
 800484e:	e8df f003 	tbb	[pc, r3]
 8004852:	372a      	.short	0x372a
 8004854:	5535      	.short	0x5535
 8004856:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800485a:	441e      	add	r6, r3
 800485c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8004860:	2b20      	cmp	r3, #32
 8004862:	bfc1      	itttt	gt
 8004864:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8004868:	409f      	lslgt	r7, r3
 800486a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800486e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8004872:	bfd6      	itet	le
 8004874:	f1c3 0320 	rsble	r3, r3, #32
 8004878:	ea47 0003 	orrgt.w	r0, r7, r3
 800487c:	fa04 f003 	lslle.w	r0, r4, r3
 8004880:	f7fb fe48 	bl	8000514 <__aeabi_ui2d>
 8004884:	2201      	movs	r2, #1
 8004886:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800488a:	3e01      	subs	r6, #1
 800488c:	9214      	str	r2, [sp, #80]	@ 0x50
 800488e:	e777      	b.n	8004780 <_dtoa_r+0x100>
 8004890:	2301      	movs	r3, #1
 8004892:	e7b8      	b.n	8004806 <_dtoa_r+0x186>
 8004894:	9012      	str	r0, [sp, #72]	@ 0x48
 8004896:	e7b7      	b.n	8004808 <_dtoa_r+0x188>
 8004898:	427b      	negs	r3, r7
 800489a:	930a      	str	r3, [sp, #40]	@ 0x28
 800489c:	2300      	movs	r3, #0
 800489e:	eba8 0807 	sub.w	r8, r8, r7
 80048a2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80048a4:	e7c4      	b.n	8004830 <_dtoa_r+0x1b0>
 80048a6:	2300      	movs	r3, #0
 80048a8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80048aa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	dc35      	bgt.n	800491c <_dtoa_r+0x29c>
 80048b0:	2301      	movs	r3, #1
 80048b2:	9300      	str	r3, [sp, #0]
 80048b4:	9307      	str	r3, [sp, #28]
 80048b6:	461a      	mov	r2, r3
 80048b8:	920e      	str	r2, [sp, #56]	@ 0x38
 80048ba:	e00b      	b.n	80048d4 <_dtoa_r+0x254>
 80048bc:	2301      	movs	r3, #1
 80048be:	e7f3      	b.n	80048a8 <_dtoa_r+0x228>
 80048c0:	2300      	movs	r3, #0
 80048c2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80048c4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80048c6:	18fb      	adds	r3, r7, r3
 80048c8:	9300      	str	r3, [sp, #0]
 80048ca:	3301      	adds	r3, #1
 80048cc:	2b01      	cmp	r3, #1
 80048ce:	9307      	str	r3, [sp, #28]
 80048d0:	bfb8      	it	lt
 80048d2:	2301      	movlt	r3, #1
 80048d4:	f8db 001c 	ldr.w	r0, [fp, #28]
 80048d8:	2100      	movs	r1, #0
 80048da:	2204      	movs	r2, #4
 80048dc:	f102 0514 	add.w	r5, r2, #20
 80048e0:	429d      	cmp	r5, r3
 80048e2:	d91f      	bls.n	8004924 <_dtoa_r+0x2a4>
 80048e4:	6041      	str	r1, [r0, #4]
 80048e6:	4658      	mov	r0, fp
 80048e8:	f000 fd8e 	bl	8005408 <_Balloc>
 80048ec:	4682      	mov	sl, r0
 80048ee:	2800      	cmp	r0, #0
 80048f0:	d13c      	bne.n	800496c <_dtoa_r+0x2ec>
 80048f2:	4b1b      	ldr	r3, [pc, #108]	@ (8004960 <_dtoa_r+0x2e0>)
 80048f4:	4602      	mov	r2, r0
 80048f6:	f240 11af 	movw	r1, #431	@ 0x1af
 80048fa:	e6d8      	b.n	80046ae <_dtoa_r+0x2e>
 80048fc:	2301      	movs	r3, #1
 80048fe:	e7e0      	b.n	80048c2 <_dtoa_r+0x242>
 8004900:	2401      	movs	r4, #1
 8004902:	2300      	movs	r3, #0
 8004904:	9309      	str	r3, [sp, #36]	@ 0x24
 8004906:	940b      	str	r4, [sp, #44]	@ 0x2c
 8004908:	f04f 33ff 	mov.w	r3, #4294967295
 800490c:	9300      	str	r3, [sp, #0]
 800490e:	9307      	str	r3, [sp, #28]
 8004910:	2200      	movs	r2, #0
 8004912:	2312      	movs	r3, #18
 8004914:	e7d0      	b.n	80048b8 <_dtoa_r+0x238>
 8004916:	2301      	movs	r3, #1
 8004918:	930b      	str	r3, [sp, #44]	@ 0x2c
 800491a:	e7f5      	b.n	8004908 <_dtoa_r+0x288>
 800491c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800491e:	9300      	str	r3, [sp, #0]
 8004920:	9307      	str	r3, [sp, #28]
 8004922:	e7d7      	b.n	80048d4 <_dtoa_r+0x254>
 8004924:	3101      	adds	r1, #1
 8004926:	0052      	lsls	r2, r2, #1
 8004928:	e7d8      	b.n	80048dc <_dtoa_r+0x25c>
 800492a:	bf00      	nop
 800492c:	f3af 8000 	nop.w
 8004930:	636f4361 	.word	0x636f4361
 8004934:	3fd287a7 	.word	0x3fd287a7
 8004938:	8b60c8b3 	.word	0x8b60c8b3
 800493c:	3fc68a28 	.word	0x3fc68a28
 8004940:	509f79fb 	.word	0x509f79fb
 8004944:	3fd34413 	.word	0x3fd34413
 8004948:	0800638d 	.word	0x0800638d
 800494c:	080063a4 	.word	0x080063a4
 8004950:	7ff00000 	.word	0x7ff00000
 8004954:	0800635d 	.word	0x0800635d
 8004958:	3ff80000 	.word	0x3ff80000
 800495c:	080064a0 	.word	0x080064a0
 8004960:	080063fc 	.word	0x080063fc
 8004964:	08006389 	.word	0x08006389
 8004968:	0800635c 	.word	0x0800635c
 800496c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004970:	6018      	str	r0, [r3, #0]
 8004972:	9b07      	ldr	r3, [sp, #28]
 8004974:	2b0e      	cmp	r3, #14
 8004976:	f200 80a4 	bhi.w	8004ac2 <_dtoa_r+0x442>
 800497a:	2c00      	cmp	r4, #0
 800497c:	f000 80a1 	beq.w	8004ac2 <_dtoa_r+0x442>
 8004980:	2f00      	cmp	r7, #0
 8004982:	dd33      	ble.n	80049ec <_dtoa_r+0x36c>
 8004984:	4bad      	ldr	r3, [pc, #692]	@ (8004c3c <_dtoa_r+0x5bc>)
 8004986:	f007 020f 	and.w	r2, r7, #15
 800498a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800498e:	ed93 7b00 	vldr	d7, [r3]
 8004992:	05f8      	lsls	r0, r7, #23
 8004994:	ed8d 7b04 	vstr	d7, [sp, #16]
 8004998:	ea4f 1427 	mov.w	r4, r7, asr #4
 800499c:	d516      	bpl.n	80049cc <_dtoa_r+0x34c>
 800499e:	4ba8      	ldr	r3, [pc, #672]	@ (8004c40 <_dtoa_r+0x5c0>)
 80049a0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80049a4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80049a8:	f7fb ff58 	bl	800085c <__aeabi_ddiv>
 80049ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80049b0:	f004 040f 	and.w	r4, r4, #15
 80049b4:	2603      	movs	r6, #3
 80049b6:	4da2      	ldr	r5, [pc, #648]	@ (8004c40 <_dtoa_r+0x5c0>)
 80049b8:	b954      	cbnz	r4, 80049d0 <_dtoa_r+0x350>
 80049ba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80049be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80049c2:	f7fb ff4b 	bl	800085c <__aeabi_ddiv>
 80049c6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80049ca:	e028      	b.n	8004a1e <_dtoa_r+0x39e>
 80049cc:	2602      	movs	r6, #2
 80049ce:	e7f2      	b.n	80049b6 <_dtoa_r+0x336>
 80049d0:	07e1      	lsls	r1, r4, #31
 80049d2:	d508      	bpl.n	80049e6 <_dtoa_r+0x366>
 80049d4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80049d8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80049dc:	f7fb fe14 	bl	8000608 <__aeabi_dmul>
 80049e0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80049e4:	3601      	adds	r6, #1
 80049e6:	1064      	asrs	r4, r4, #1
 80049e8:	3508      	adds	r5, #8
 80049ea:	e7e5      	b.n	80049b8 <_dtoa_r+0x338>
 80049ec:	f000 80d2 	beq.w	8004b94 <_dtoa_r+0x514>
 80049f0:	427c      	negs	r4, r7
 80049f2:	4b92      	ldr	r3, [pc, #584]	@ (8004c3c <_dtoa_r+0x5bc>)
 80049f4:	4d92      	ldr	r5, [pc, #584]	@ (8004c40 <_dtoa_r+0x5c0>)
 80049f6:	f004 020f 	and.w	r2, r4, #15
 80049fa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80049fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a02:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004a06:	f7fb fdff 	bl	8000608 <__aeabi_dmul>
 8004a0a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004a0e:	1124      	asrs	r4, r4, #4
 8004a10:	2300      	movs	r3, #0
 8004a12:	2602      	movs	r6, #2
 8004a14:	2c00      	cmp	r4, #0
 8004a16:	f040 80b2 	bne.w	8004b7e <_dtoa_r+0x4fe>
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d1d3      	bne.n	80049c6 <_dtoa_r+0x346>
 8004a1e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8004a20:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	f000 80b7 	beq.w	8004b98 <_dtoa_r+0x518>
 8004a2a:	4b86      	ldr	r3, [pc, #536]	@ (8004c44 <_dtoa_r+0x5c4>)
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	4620      	mov	r0, r4
 8004a30:	4629      	mov	r1, r5
 8004a32:	f7fc f85b 	bl	8000aec <__aeabi_dcmplt>
 8004a36:	2800      	cmp	r0, #0
 8004a38:	f000 80ae 	beq.w	8004b98 <_dtoa_r+0x518>
 8004a3c:	9b07      	ldr	r3, [sp, #28]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	f000 80aa 	beq.w	8004b98 <_dtoa_r+0x518>
 8004a44:	9b00      	ldr	r3, [sp, #0]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	dd37      	ble.n	8004aba <_dtoa_r+0x43a>
 8004a4a:	1e7b      	subs	r3, r7, #1
 8004a4c:	9304      	str	r3, [sp, #16]
 8004a4e:	4620      	mov	r0, r4
 8004a50:	4b7d      	ldr	r3, [pc, #500]	@ (8004c48 <_dtoa_r+0x5c8>)
 8004a52:	2200      	movs	r2, #0
 8004a54:	4629      	mov	r1, r5
 8004a56:	f7fb fdd7 	bl	8000608 <__aeabi_dmul>
 8004a5a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004a5e:	9c00      	ldr	r4, [sp, #0]
 8004a60:	3601      	adds	r6, #1
 8004a62:	4630      	mov	r0, r6
 8004a64:	f7fb fd66 	bl	8000534 <__aeabi_i2d>
 8004a68:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004a6c:	f7fb fdcc 	bl	8000608 <__aeabi_dmul>
 8004a70:	4b76      	ldr	r3, [pc, #472]	@ (8004c4c <_dtoa_r+0x5cc>)
 8004a72:	2200      	movs	r2, #0
 8004a74:	f7fb fc12 	bl	800029c <__adddf3>
 8004a78:	4605      	mov	r5, r0
 8004a7a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8004a7e:	2c00      	cmp	r4, #0
 8004a80:	f040 808d 	bne.w	8004b9e <_dtoa_r+0x51e>
 8004a84:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004a88:	4b71      	ldr	r3, [pc, #452]	@ (8004c50 <_dtoa_r+0x5d0>)
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	f7fb fc04 	bl	8000298 <__aeabi_dsub>
 8004a90:	4602      	mov	r2, r0
 8004a92:	460b      	mov	r3, r1
 8004a94:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004a98:	462a      	mov	r2, r5
 8004a9a:	4633      	mov	r3, r6
 8004a9c:	f7fc f844 	bl	8000b28 <__aeabi_dcmpgt>
 8004aa0:	2800      	cmp	r0, #0
 8004aa2:	f040 828b 	bne.w	8004fbc <_dtoa_r+0x93c>
 8004aa6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004aaa:	462a      	mov	r2, r5
 8004aac:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8004ab0:	f7fc f81c 	bl	8000aec <__aeabi_dcmplt>
 8004ab4:	2800      	cmp	r0, #0
 8004ab6:	f040 8128 	bne.w	8004d0a <_dtoa_r+0x68a>
 8004aba:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8004abe:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8004ac2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	f2c0 815a 	blt.w	8004d7e <_dtoa_r+0x6fe>
 8004aca:	2f0e      	cmp	r7, #14
 8004acc:	f300 8157 	bgt.w	8004d7e <_dtoa_r+0x6fe>
 8004ad0:	4b5a      	ldr	r3, [pc, #360]	@ (8004c3c <_dtoa_r+0x5bc>)
 8004ad2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004ad6:	ed93 7b00 	vldr	d7, [r3]
 8004ada:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	ed8d 7b00 	vstr	d7, [sp]
 8004ae2:	da03      	bge.n	8004aec <_dtoa_r+0x46c>
 8004ae4:	9b07      	ldr	r3, [sp, #28]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	f340 8101 	ble.w	8004cee <_dtoa_r+0x66e>
 8004aec:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8004af0:	4656      	mov	r6, sl
 8004af2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004af6:	4620      	mov	r0, r4
 8004af8:	4629      	mov	r1, r5
 8004afa:	f7fb feaf 	bl	800085c <__aeabi_ddiv>
 8004afe:	f7fc f833 	bl	8000b68 <__aeabi_d2iz>
 8004b02:	4680      	mov	r8, r0
 8004b04:	f7fb fd16 	bl	8000534 <__aeabi_i2d>
 8004b08:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004b0c:	f7fb fd7c 	bl	8000608 <__aeabi_dmul>
 8004b10:	4602      	mov	r2, r0
 8004b12:	460b      	mov	r3, r1
 8004b14:	4620      	mov	r0, r4
 8004b16:	4629      	mov	r1, r5
 8004b18:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8004b1c:	f7fb fbbc 	bl	8000298 <__aeabi_dsub>
 8004b20:	f806 4b01 	strb.w	r4, [r6], #1
 8004b24:	9d07      	ldr	r5, [sp, #28]
 8004b26:	eba6 040a 	sub.w	r4, r6, sl
 8004b2a:	42a5      	cmp	r5, r4
 8004b2c:	4602      	mov	r2, r0
 8004b2e:	460b      	mov	r3, r1
 8004b30:	f040 8117 	bne.w	8004d62 <_dtoa_r+0x6e2>
 8004b34:	f7fb fbb2 	bl	800029c <__adddf3>
 8004b38:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004b3c:	4604      	mov	r4, r0
 8004b3e:	460d      	mov	r5, r1
 8004b40:	f7fb fff2 	bl	8000b28 <__aeabi_dcmpgt>
 8004b44:	2800      	cmp	r0, #0
 8004b46:	f040 80f9 	bne.w	8004d3c <_dtoa_r+0x6bc>
 8004b4a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004b4e:	4620      	mov	r0, r4
 8004b50:	4629      	mov	r1, r5
 8004b52:	f7fb ffc1 	bl	8000ad8 <__aeabi_dcmpeq>
 8004b56:	b118      	cbz	r0, 8004b60 <_dtoa_r+0x4e0>
 8004b58:	f018 0f01 	tst.w	r8, #1
 8004b5c:	f040 80ee 	bne.w	8004d3c <_dtoa_r+0x6bc>
 8004b60:	4649      	mov	r1, r9
 8004b62:	4658      	mov	r0, fp
 8004b64:	f000 fc90 	bl	8005488 <_Bfree>
 8004b68:	2300      	movs	r3, #0
 8004b6a:	7033      	strb	r3, [r6, #0]
 8004b6c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8004b6e:	3701      	adds	r7, #1
 8004b70:	601f      	str	r7, [r3, #0]
 8004b72:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	f000 831d 	beq.w	80051b4 <_dtoa_r+0xb34>
 8004b7a:	601e      	str	r6, [r3, #0]
 8004b7c:	e31a      	b.n	80051b4 <_dtoa_r+0xb34>
 8004b7e:	07e2      	lsls	r2, r4, #31
 8004b80:	d505      	bpl.n	8004b8e <_dtoa_r+0x50e>
 8004b82:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004b86:	f7fb fd3f 	bl	8000608 <__aeabi_dmul>
 8004b8a:	3601      	adds	r6, #1
 8004b8c:	2301      	movs	r3, #1
 8004b8e:	1064      	asrs	r4, r4, #1
 8004b90:	3508      	adds	r5, #8
 8004b92:	e73f      	b.n	8004a14 <_dtoa_r+0x394>
 8004b94:	2602      	movs	r6, #2
 8004b96:	e742      	b.n	8004a1e <_dtoa_r+0x39e>
 8004b98:	9c07      	ldr	r4, [sp, #28]
 8004b9a:	9704      	str	r7, [sp, #16]
 8004b9c:	e761      	b.n	8004a62 <_dtoa_r+0x3e2>
 8004b9e:	4b27      	ldr	r3, [pc, #156]	@ (8004c3c <_dtoa_r+0x5bc>)
 8004ba0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8004ba2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004ba6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004baa:	4454      	add	r4, sl
 8004bac:	2900      	cmp	r1, #0
 8004bae:	d053      	beq.n	8004c58 <_dtoa_r+0x5d8>
 8004bb0:	4928      	ldr	r1, [pc, #160]	@ (8004c54 <_dtoa_r+0x5d4>)
 8004bb2:	2000      	movs	r0, #0
 8004bb4:	f7fb fe52 	bl	800085c <__aeabi_ddiv>
 8004bb8:	4633      	mov	r3, r6
 8004bba:	462a      	mov	r2, r5
 8004bbc:	f7fb fb6c 	bl	8000298 <__aeabi_dsub>
 8004bc0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004bc4:	4656      	mov	r6, sl
 8004bc6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004bca:	f7fb ffcd 	bl	8000b68 <__aeabi_d2iz>
 8004bce:	4605      	mov	r5, r0
 8004bd0:	f7fb fcb0 	bl	8000534 <__aeabi_i2d>
 8004bd4:	4602      	mov	r2, r0
 8004bd6:	460b      	mov	r3, r1
 8004bd8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004bdc:	f7fb fb5c 	bl	8000298 <__aeabi_dsub>
 8004be0:	3530      	adds	r5, #48	@ 0x30
 8004be2:	4602      	mov	r2, r0
 8004be4:	460b      	mov	r3, r1
 8004be6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004bea:	f806 5b01 	strb.w	r5, [r6], #1
 8004bee:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004bf2:	f7fb ff7b 	bl	8000aec <__aeabi_dcmplt>
 8004bf6:	2800      	cmp	r0, #0
 8004bf8:	d171      	bne.n	8004cde <_dtoa_r+0x65e>
 8004bfa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004bfe:	4911      	ldr	r1, [pc, #68]	@ (8004c44 <_dtoa_r+0x5c4>)
 8004c00:	2000      	movs	r0, #0
 8004c02:	f7fb fb49 	bl	8000298 <__aeabi_dsub>
 8004c06:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004c0a:	f7fb ff6f 	bl	8000aec <__aeabi_dcmplt>
 8004c0e:	2800      	cmp	r0, #0
 8004c10:	f040 8095 	bne.w	8004d3e <_dtoa_r+0x6be>
 8004c14:	42a6      	cmp	r6, r4
 8004c16:	f43f af50 	beq.w	8004aba <_dtoa_r+0x43a>
 8004c1a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8004c1e:	4b0a      	ldr	r3, [pc, #40]	@ (8004c48 <_dtoa_r+0x5c8>)
 8004c20:	2200      	movs	r2, #0
 8004c22:	f7fb fcf1 	bl	8000608 <__aeabi_dmul>
 8004c26:	4b08      	ldr	r3, [pc, #32]	@ (8004c48 <_dtoa_r+0x5c8>)
 8004c28:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004c32:	f7fb fce9 	bl	8000608 <__aeabi_dmul>
 8004c36:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004c3a:	e7c4      	b.n	8004bc6 <_dtoa_r+0x546>
 8004c3c:	080064a0 	.word	0x080064a0
 8004c40:	08006478 	.word	0x08006478
 8004c44:	3ff00000 	.word	0x3ff00000
 8004c48:	40240000 	.word	0x40240000
 8004c4c:	401c0000 	.word	0x401c0000
 8004c50:	40140000 	.word	0x40140000
 8004c54:	3fe00000 	.word	0x3fe00000
 8004c58:	4631      	mov	r1, r6
 8004c5a:	4628      	mov	r0, r5
 8004c5c:	f7fb fcd4 	bl	8000608 <__aeabi_dmul>
 8004c60:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004c64:	9415      	str	r4, [sp, #84]	@ 0x54
 8004c66:	4656      	mov	r6, sl
 8004c68:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004c6c:	f7fb ff7c 	bl	8000b68 <__aeabi_d2iz>
 8004c70:	4605      	mov	r5, r0
 8004c72:	f7fb fc5f 	bl	8000534 <__aeabi_i2d>
 8004c76:	4602      	mov	r2, r0
 8004c78:	460b      	mov	r3, r1
 8004c7a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004c7e:	f7fb fb0b 	bl	8000298 <__aeabi_dsub>
 8004c82:	3530      	adds	r5, #48	@ 0x30
 8004c84:	f806 5b01 	strb.w	r5, [r6], #1
 8004c88:	4602      	mov	r2, r0
 8004c8a:	460b      	mov	r3, r1
 8004c8c:	42a6      	cmp	r6, r4
 8004c8e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004c92:	f04f 0200 	mov.w	r2, #0
 8004c96:	d124      	bne.n	8004ce2 <_dtoa_r+0x662>
 8004c98:	4bac      	ldr	r3, [pc, #688]	@ (8004f4c <_dtoa_r+0x8cc>)
 8004c9a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8004c9e:	f7fb fafd 	bl	800029c <__adddf3>
 8004ca2:	4602      	mov	r2, r0
 8004ca4:	460b      	mov	r3, r1
 8004ca6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004caa:	f7fb ff3d 	bl	8000b28 <__aeabi_dcmpgt>
 8004cae:	2800      	cmp	r0, #0
 8004cb0:	d145      	bne.n	8004d3e <_dtoa_r+0x6be>
 8004cb2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004cb6:	49a5      	ldr	r1, [pc, #660]	@ (8004f4c <_dtoa_r+0x8cc>)
 8004cb8:	2000      	movs	r0, #0
 8004cba:	f7fb faed 	bl	8000298 <__aeabi_dsub>
 8004cbe:	4602      	mov	r2, r0
 8004cc0:	460b      	mov	r3, r1
 8004cc2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004cc6:	f7fb ff11 	bl	8000aec <__aeabi_dcmplt>
 8004cca:	2800      	cmp	r0, #0
 8004ccc:	f43f aef5 	beq.w	8004aba <_dtoa_r+0x43a>
 8004cd0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8004cd2:	1e73      	subs	r3, r6, #1
 8004cd4:	9315      	str	r3, [sp, #84]	@ 0x54
 8004cd6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8004cda:	2b30      	cmp	r3, #48	@ 0x30
 8004cdc:	d0f8      	beq.n	8004cd0 <_dtoa_r+0x650>
 8004cde:	9f04      	ldr	r7, [sp, #16]
 8004ce0:	e73e      	b.n	8004b60 <_dtoa_r+0x4e0>
 8004ce2:	4b9b      	ldr	r3, [pc, #620]	@ (8004f50 <_dtoa_r+0x8d0>)
 8004ce4:	f7fb fc90 	bl	8000608 <__aeabi_dmul>
 8004ce8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004cec:	e7bc      	b.n	8004c68 <_dtoa_r+0x5e8>
 8004cee:	d10c      	bne.n	8004d0a <_dtoa_r+0x68a>
 8004cf0:	4b98      	ldr	r3, [pc, #608]	@ (8004f54 <_dtoa_r+0x8d4>)
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004cf8:	f7fb fc86 	bl	8000608 <__aeabi_dmul>
 8004cfc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004d00:	f7fb ff08 	bl	8000b14 <__aeabi_dcmpge>
 8004d04:	2800      	cmp	r0, #0
 8004d06:	f000 8157 	beq.w	8004fb8 <_dtoa_r+0x938>
 8004d0a:	2400      	movs	r4, #0
 8004d0c:	4625      	mov	r5, r4
 8004d0e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004d10:	43db      	mvns	r3, r3
 8004d12:	9304      	str	r3, [sp, #16]
 8004d14:	4656      	mov	r6, sl
 8004d16:	2700      	movs	r7, #0
 8004d18:	4621      	mov	r1, r4
 8004d1a:	4658      	mov	r0, fp
 8004d1c:	f000 fbb4 	bl	8005488 <_Bfree>
 8004d20:	2d00      	cmp	r5, #0
 8004d22:	d0dc      	beq.n	8004cde <_dtoa_r+0x65e>
 8004d24:	b12f      	cbz	r7, 8004d32 <_dtoa_r+0x6b2>
 8004d26:	42af      	cmp	r7, r5
 8004d28:	d003      	beq.n	8004d32 <_dtoa_r+0x6b2>
 8004d2a:	4639      	mov	r1, r7
 8004d2c:	4658      	mov	r0, fp
 8004d2e:	f000 fbab 	bl	8005488 <_Bfree>
 8004d32:	4629      	mov	r1, r5
 8004d34:	4658      	mov	r0, fp
 8004d36:	f000 fba7 	bl	8005488 <_Bfree>
 8004d3a:	e7d0      	b.n	8004cde <_dtoa_r+0x65e>
 8004d3c:	9704      	str	r7, [sp, #16]
 8004d3e:	4633      	mov	r3, r6
 8004d40:	461e      	mov	r6, r3
 8004d42:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004d46:	2a39      	cmp	r2, #57	@ 0x39
 8004d48:	d107      	bne.n	8004d5a <_dtoa_r+0x6da>
 8004d4a:	459a      	cmp	sl, r3
 8004d4c:	d1f8      	bne.n	8004d40 <_dtoa_r+0x6c0>
 8004d4e:	9a04      	ldr	r2, [sp, #16]
 8004d50:	3201      	adds	r2, #1
 8004d52:	9204      	str	r2, [sp, #16]
 8004d54:	2230      	movs	r2, #48	@ 0x30
 8004d56:	f88a 2000 	strb.w	r2, [sl]
 8004d5a:	781a      	ldrb	r2, [r3, #0]
 8004d5c:	3201      	adds	r2, #1
 8004d5e:	701a      	strb	r2, [r3, #0]
 8004d60:	e7bd      	b.n	8004cde <_dtoa_r+0x65e>
 8004d62:	4b7b      	ldr	r3, [pc, #492]	@ (8004f50 <_dtoa_r+0x8d0>)
 8004d64:	2200      	movs	r2, #0
 8004d66:	f7fb fc4f 	bl	8000608 <__aeabi_dmul>
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	4604      	mov	r4, r0
 8004d70:	460d      	mov	r5, r1
 8004d72:	f7fb feb1 	bl	8000ad8 <__aeabi_dcmpeq>
 8004d76:	2800      	cmp	r0, #0
 8004d78:	f43f aebb 	beq.w	8004af2 <_dtoa_r+0x472>
 8004d7c:	e6f0      	b.n	8004b60 <_dtoa_r+0x4e0>
 8004d7e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8004d80:	2a00      	cmp	r2, #0
 8004d82:	f000 80db 	beq.w	8004f3c <_dtoa_r+0x8bc>
 8004d86:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004d88:	2a01      	cmp	r2, #1
 8004d8a:	f300 80bf 	bgt.w	8004f0c <_dtoa_r+0x88c>
 8004d8e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8004d90:	2a00      	cmp	r2, #0
 8004d92:	f000 80b7 	beq.w	8004f04 <_dtoa_r+0x884>
 8004d96:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8004d9a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8004d9c:	4646      	mov	r6, r8
 8004d9e:	9a08      	ldr	r2, [sp, #32]
 8004da0:	2101      	movs	r1, #1
 8004da2:	441a      	add	r2, r3
 8004da4:	4658      	mov	r0, fp
 8004da6:	4498      	add	r8, r3
 8004da8:	9208      	str	r2, [sp, #32]
 8004daa:	f000 fc21 	bl	80055f0 <__i2b>
 8004dae:	4605      	mov	r5, r0
 8004db0:	b15e      	cbz	r6, 8004dca <_dtoa_r+0x74a>
 8004db2:	9b08      	ldr	r3, [sp, #32]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	dd08      	ble.n	8004dca <_dtoa_r+0x74a>
 8004db8:	42b3      	cmp	r3, r6
 8004dba:	9a08      	ldr	r2, [sp, #32]
 8004dbc:	bfa8      	it	ge
 8004dbe:	4633      	movge	r3, r6
 8004dc0:	eba8 0803 	sub.w	r8, r8, r3
 8004dc4:	1af6      	subs	r6, r6, r3
 8004dc6:	1ad3      	subs	r3, r2, r3
 8004dc8:	9308      	str	r3, [sp, #32]
 8004dca:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004dcc:	b1f3      	cbz	r3, 8004e0c <_dtoa_r+0x78c>
 8004dce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	f000 80b7 	beq.w	8004f44 <_dtoa_r+0x8c4>
 8004dd6:	b18c      	cbz	r4, 8004dfc <_dtoa_r+0x77c>
 8004dd8:	4629      	mov	r1, r5
 8004dda:	4622      	mov	r2, r4
 8004ddc:	4658      	mov	r0, fp
 8004dde:	f000 fcc7 	bl	8005770 <__pow5mult>
 8004de2:	464a      	mov	r2, r9
 8004de4:	4601      	mov	r1, r0
 8004de6:	4605      	mov	r5, r0
 8004de8:	4658      	mov	r0, fp
 8004dea:	f000 fc17 	bl	800561c <__multiply>
 8004dee:	4649      	mov	r1, r9
 8004df0:	9004      	str	r0, [sp, #16]
 8004df2:	4658      	mov	r0, fp
 8004df4:	f000 fb48 	bl	8005488 <_Bfree>
 8004df8:	9b04      	ldr	r3, [sp, #16]
 8004dfa:	4699      	mov	r9, r3
 8004dfc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004dfe:	1b1a      	subs	r2, r3, r4
 8004e00:	d004      	beq.n	8004e0c <_dtoa_r+0x78c>
 8004e02:	4649      	mov	r1, r9
 8004e04:	4658      	mov	r0, fp
 8004e06:	f000 fcb3 	bl	8005770 <__pow5mult>
 8004e0a:	4681      	mov	r9, r0
 8004e0c:	2101      	movs	r1, #1
 8004e0e:	4658      	mov	r0, fp
 8004e10:	f000 fbee 	bl	80055f0 <__i2b>
 8004e14:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004e16:	4604      	mov	r4, r0
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	f000 81cf 	beq.w	80051bc <_dtoa_r+0xb3c>
 8004e1e:	461a      	mov	r2, r3
 8004e20:	4601      	mov	r1, r0
 8004e22:	4658      	mov	r0, fp
 8004e24:	f000 fca4 	bl	8005770 <__pow5mult>
 8004e28:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004e2a:	2b01      	cmp	r3, #1
 8004e2c:	4604      	mov	r4, r0
 8004e2e:	f300 8095 	bgt.w	8004f5c <_dtoa_r+0x8dc>
 8004e32:	9b02      	ldr	r3, [sp, #8]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	f040 8087 	bne.w	8004f48 <_dtoa_r+0x8c8>
 8004e3a:	9b03      	ldr	r3, [sp, #12]
 8004e3c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	f040 8089 	bne.w	8004f58 <_dtoa_r+0x8d8>
 8004e46:	9b03      	ldr	r3, [sp, #12]
 8004e48:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004e4c:	0d1b      	lsrs	r3, r3, #20
 8004e4e:	051b      	lsls	r3, r3, #20
 8004e50:	b12b      	cbz	r3, 8004e5e <_dtoa_r+0x7de>
 8004e52:	9b08      	ldr	r3, [sp, #32]
 8004e54:	3301      	adds	r3, #1
 8004e56:	9308      	str	r3, [sp, #32]
 8004e58:	f108 0801 	add.w	r8, r8, #1
 8004e5c:	2301      	movs	r3, #1
 8004e5e:	930a      	str	r3, [sp, #40]	@ 0x28
 8004e60:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	f000 81b0 	beq.w	80051c8 <_dtoa_r+0xb48>
 8004e68:	6923      	ldr	r3, [r4, #16]
 8004e6a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004e6e:	6918      	ldr	r0, [r3, #16]
 8004e70:	f000 fb72 	bl	8005558 <__hi0bits>
 8004e74:	f1c0 0020 	rsb	r0, r0, #32
 8004e78:	9b08      	ldr	r3, [sp, #32]
 8004e7a:	4418      	add	r0, r3
 8004e7c:	f010 001f 	ands.w	r0, r0, #31
 8004e80:	d077      	beq.n	8004f72 <_dtoa_r+0x8f2>
 8004e82:	f1c0 0320 	rsb	r3, r0, #32
 8004e86:	2b04      	cmp	r3, #4
 8004e88:	dd6b      	ble.n	8004f62 <_dtoa_r+0x8e2>
 8004e8a:	9b08      	ldr	r3, [sp, #32]
 8004e8c:	f1c0 001c 	rsb	r0, r0, #28
 8004e90:	4403      	add	r3, r0
 8004e92:	4480      	add	r8, r0
 8004e94:	4406      	add	r6, r0
 8004e96:	9308      	str	r3, [sp, #32]
 8004e98:	f1b8 0f00 	cmp.w	r8, #0
 8004e9c:	dd05      	ble.n	8004eaa <_dtoa_r+0x82a>
 8004e9e:	4649      	mov	r1, r9
 8004ea0:	4642      	mov	r2, r8
 8004ea2:	4658      	mov	r0, fp
 8004ea4:	f000 fcbe 	bl	8005824 <__lshift>
 8004ea8:	4681      	mov	r9, r0
 8004eaa:	9b08      	ldr	r3, [sp, #32]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	dd05      	ble.n	8004ebc <_dtoa_r+0x83c>
 8004eb0:	4621      	mov	r1, r4
 8004eb2:	461a      	mov	r2, r3
 8004eb4:	4658      	mov	r0, fp
 8004eb6:	f000 fcb5 	bl	8005824 <__lshift>
 8004eba:	4604      	mov	r4, r0
 8004ebc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d059      	beq.n	8004f76 <_dtoa_r+0x8f6>
 8004ec2:	4621      	mov	r1, r4
 8004ec4:	4648      	mov	r0, r9
 8004ec6:	f000 fd19 	bl	80058fc <__mcmp>
 8004eca:	2800      	cmp	r0, #0
 8004ecc:	da53      	bge.n	8004f76 <_dtoa_r+0x8f6>
 8004ece:	1e7b      	subs	r3, r7, #1
 8004ed0:	9304      	str	r3, [sp, #16]
 8004ed2:	4649      	mov	r1, r9
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	220a      	movs	r2, #10
 8004ed8:	4658      	mov	r0, fp
 8004eda:	f000 faf7 	bl	80054cc <__multadd>
 8004ede:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004ee0:	4681      	mov	r9, r0
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	f000 8172 	beq.w	80051cc <_dtoa_r+0xb4c>
 8004ee8:	2300      	movs	r3, #0
 8004eea:	4629      	mov	r1, r5
 8004eec:	220a      	movs	r2, #10
 8004eee:	4658      	mov	r0, fp
 8004ef0:	f000 faec 	bl	80054cc <__multadd>
 8004ef4:	9b00      	ldr	r3, [sp, #0]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	4605      	mov	r5, r0
 8004efa:	dc67      	bgt.n	8004fcc <_dtoa_r+0x94c>
 8004efc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004efe:	2b02      	cmp	r3, #2
 8004f00:	dc41      	bgt.n	8004f86 <_dtoa_r+0x906>
 8004f02:	e063      	b.n	8004fcc <_dtoa_r+0x94c>
 8004f04:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8004f06:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8004f0a:	e746      	b.n	8004d9a <_dtoa_r+0x71a>
 8004f0c:	9b07      	ldr	r3, [sp, #28]
 8004f0e:	1e5c      	subs	r4, r3, #1
 8004f10:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004f12:	42a3      	cmp	r3, r4
 8004f14:	bfbf      	itttt	lt
 8004f16:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8004f18:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8004f1a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8004f1c:	1ae3      	sublt	r3, r4, r3
 8004f1e:	bfb4      	ite	lt
 8004f20:	18d2      	addlt	r2, r2, r3
 8004f22:	1b1c      	subge	r4, r3, r4
 8004f24:	9b07      	ldr	r3, [sp, #28]
 8004f26:	bfbc      	itt	lt
 8004f28:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8004f2a:	2400      	movlt	r4, #0
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	bfb5      	itete	lt
 8004f30:	eba8 0603 	sublt.w	r6, r8, r3
 8004f34:	9b07      	ldrge	r3, [sp, #28]
 8004f36:	2300      	movlt	r3, #0
 8004f38:	4646      	movge	r6, r8
 8004f3a:	e730      	b.n	8004d9e <_dtoa_r+0x71e>
 8004f3c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8004f3e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8004f40:	4646      	mov	r6, r8
 8004f42:	e735      	b.n	8004db0 <_dtoa_r+0x730>
 8004f44:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004f46:	e75c      	b.n	8004e02 <_dtoa_r+0x782>
 8004f48:	2300      	movs	r3, #0
 8004f4a:	e788      	b.n	8004e5e <_dtoa_r+0x7de>
 8004f4c:	3fe00000 	.word	0x3fe00000
 8004f50:	40240000 	.word	0x40240000
 8004f54:	40140000 	.word	0x40140000
 8004f58:	9b02      	ldr	r3, [sp, #8]
 8004f5a:	e780      	b.n	8004e5e <_dtoa_r+0x7de>
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	930a      	str	r3, [sp, #40]	@ 0x28
 8004f60:	e782      	b.n	8004e68 <_dtoa_r+0x7e8>
 8004f62:	d099      	beq.n	8004e98 <_dtoa_r+0x818>
 8004f64:	9a08      	ldr	r2, [sp, #32]
 8004f66:	331c      	adds	r3, #28
 8004f68:	441a      	add	r2, r3
 8004f6a:	4498      	add	r8, r3
 8004f6c:	441e      	add	r6, r3
 8004f6e:	9208      	str	r2, [sp, #32]
 8004f70:	e792      	b.n	8004e98 <_dtoa_r+0x818>
 8004f72:	4603      	mov	r3, r0
 8004f74:	e7f6      	b.n	8004f64 <_dtoa_r+0x8e4>
 8004f76:	9b07      	ldr	r3, [sp, #28]
 8004f78:	9704      	str	r7, [sp, #16]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	dc20      	bgt.n	8004fc0 <_dtoa_r+0x940>
 8004f7e:	9300      	str	r3, [sp, #0]
 8004f80:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004f82:	2b02      	cmp	r3, #2
 8004f84:	dd1e      	ble.n	8004fc4 <_dtoa_r+0x944>
 8004f86:	9b00      	ldr	r3, [sp, #0]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	f47f aec0 	bne.w	8004d0e <_dtoa_r+0x68e>
 8004f8e:	4621      	mov	r1, r4
 8004f90:	2205      	movs	r2, #5
 8004f92:	4658      	mov	r0, fp
 8004f94:	f000 fa9a 	bl	80054cc <__multadd>
 8004f98:	4601      	mov	r1, r0
 8004f9a:	4604      	mov	r4, r0
 8004f9c:	4648      	mov	r0, r9
 8004f9e:	f000 fcad 	bl	80058fc <__mcmp>
 8004fa2:	2800      	cmp	r0, #0
 8004fa4:	f77f aeb3 	ble.w	8004d0e <_dtoa_r+0x68e>
 8004fa8:	4656      	mov	r6, sl
 8004faa:	2331      	movs	r3, #49	@ 0x31
 8004fac:	f806 3b01 	strb.w	r3, [r6], #1
 8004fb0:	9b04      	ldr	r3, [sp, #16]
 8004fb2:	3301      	adds	r3, #1
 8004fb4:	9304      	str	r3, [sp, #16]
 8004fb6:	e6ae      	b.n	8004d16 <_dtoa_r+0x696>
 8004fb8:	9c07      	ldr	r4, [sp, #28]
 8004fba:	9704      	str	r7, [sp, #16]
 8004fbc:	4625      	mov	r5, r4
 8004fbe:	e7f3      	b.n	8004fa8 <_dtoa_r+0x928>
 8004fc0:	9b07      	ldr	r3, [sp, #28]
 8004fc2:	9300      	str	r3, [sp, #0]
 8004fc4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	f000 8104 	beq.w	80051d4 <_dtoa_r+0xb54>
 8004fcc:	2e00      	cmp	r6, #0
 8004fce:	dd05      	ble.n	8004fdc <_dtoa_r+0x95c>
 8004fd0:	4629      	mov	r1, r5
 8004fd2:	4632      	mov	r2, r6
 8004fd4:	4658      	mov	r0, fp
 8004fd6:	f000 fc25 	bl	8005824 <__lshift>
 8004fda:	4605      	mov	r5, r0
 8004fdc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d05a      	beq.n	8005098 <_dtoa_r+0xa18>
 8004fe2:	6869      	ldr	r1, [r5, #4]
 8004fe4:	4658      	mov	r0, fp
 8004fe6:	f000 fa0f 	bl	8005408 <_Balloc>
 8004fea:	4606      	mov	r6, r0
 8004fec:	b928      	cbnz	r0, 8004ffa <_dtoa_r+0x97a>
 8004fee:	4b84      	ldr	r3, [pc, #528]	@ (8005200 <_dtoa_r+0xb80>)
 8004ff0:	4602      	mov	r2, r0
 8004ff2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8004ff6:	f7ff bb5a 	b.w	80046ae <_dtoa_r+0x2e>
 8004ffa:	692a      	ldr	r2, [r5, #16]
 8004ffc:	3202      	adds	r2, #2
 8004ffe:	0092      	lsls	r2, r2, #2
 8005000:	f105 010c 	add.w	r1, r5, #12
 8005004:	300c      	adds	r0, #12
 8005006:	f001 f813 	bl	8006030 <memcpy>
 800500a:	2201      	movs	r2, #1
 800500c:	4631      	mov	r1, r6
 800500e:	4658      	mov	r0, fp
 8005010:	f000 fc08 	bl	8005824 <__lshift>
 8005014:	f10a 0301 	add.w	r3, sl, #1
 8005018:	9307      	str	r3, [sp, #28]
 800501a:	9b00      	ldr	r3, [sp, #0]
 800501c:	4453      	add	r3, sl
 800501e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005020:	9b02      	ldr	r3, [sp, #8]
 8005022:	f003 0301 	and.w	r3, r3, #1
 8005026:	462f      	mov	r7, r5
 8005028:	930a      	str	r3, [sp, #40]	@ 0x28
 800502a:	4605      	mov	r5, r0
 800502c:	9b07      	ldr	r3, [sp, #28]
 800502e:	4621      	mov	r1, r4
 8005030:	3b01      	subs	r3, #1
 8005032:	4648      	mov	r0, r9
 8005034:	9300      	str	r3, [sp, #0]
 8005036:	f7ff fa9a 	bl	800456e <quorem>
 800503a:	4639      	mov	r1, r7
 800503c:	9002      	str	r0, [sp, #8]
 800503e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8005042:	4648      	mov	r0, r9
 8005044:	f000 fc5a 	bl	80058fc <__mcmp>
 8005048:	462a      	mov	r2, r5
 800504a:	9008      	str	r0, [sp, #32]
 800504c:	4621      	mov	r1, r4
 800504e:	4658      	mov	r0, fp
 8005050:	f000 fc70 	bl	8005934 <__mdiff>
 8005054:	68c2      	ldr	r2, [r0, #12]
 8005056:	4606      	mov	r6, r0
 8005058:	bb02      	cbnz	r2, 800509c <_dtoa_r+0xa1c>
 800505a:	4601      	mov	r1, r0
 800505c:	4648      	mov	r0, r9
 800505e:	f000 fc4d 	bl	80058fc <__mcmp>
 8005062:	4602      	mov	r2, r0
 8005064:	4631      	mov	r1, r6
 8005066:	4658      	mov	r0, fp
 8005068:	920e      	str	r2, [sp, #56]	@ 0x38
 800506a:	f000 fa0d 	bl	8005488 <_Bfree>
 800506e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005070:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005072:	9e07      	ldr	r6, [sp, #28]
 8005074:	ea43 0102 	orr.w	r1, r3, r2
 8005078:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800507a:	4319      	orrs	r1, r3
 800507c:	d110      	bne.n	80050a0 <_dtoa_r+0xa20>
 800507e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8005082:	d029      	beq.n	80050d8 <_dtoa_r+0xa58>
 8005084:	9b08      	ldr	r3, [sp, #32]
 8005086:	2b00      	cmp	r3, #0
 8005088:	dd02      	ble.n	8005090 <_dtoa_r+0xa10>
 800508a:	9b02      	ldr	r3, [sp, #8]
 800508c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8005090:	9b00      	ldr	r3, [sp, #0]
 8005092:	f883 8000 	strb.w	r8, [r3]
 8005096:	e63f      	b.n	8004d18 <_dtoa_r+0x698>
 8005098:	4628      	mov	r0, r5
 800509a:	e7bb      	b.n	8005014 <_dtoa_r+0x994>
 800509c:	2201      	movs	r2, #1
 800509e:	e7e1      	b.n	8005064 <_dtoa_r+0x9e4>
 80050a0:	9b08      	ldr	r3, [sp, #32]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	db04      	blt.n	80050b0 <_dtoa_r+0xa30>
 80050a6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80050a8:	430b      	orrs	r3, r1
 80050aa:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80050ac:	430b      	orrs	r3, r1
 80050ae:	d120      	bne.n	80050f2 <_dtoa_r+0xa72>
 80050b0:	2a00      	cmp	r2, #0
 80050b2:	dded      	ble.n	8005090 <_dtoa_r+0xa10>
 80050b4:	4649      	mov	r1, r9
 80050b6:	2201      	movs	r2, #1
 80050b8:	4658      	mov	r0, fp
 80050ba:	f000 fbb3 	bl	8005824 <__lshift>
 80050be:	4621      	mov	r1, r4
 80050c0:	4681      	mov	r9, r0
 80050c2:	f000 fc1b 	bl	80058fc <__mcmp>
 80050c6:	2800      	cmp	r0, #0
 80050c8:	dc03      	bgt.n	80050d2 <_dtoa_r+0xa52>
 80050ca:	d1e1      	bne.n	8005090 <_dtoa_r+0xa10>
 80050cc:	f018 0f01 	tst.w	r8, #1
 80050d0:	d0de      	beq.n	8005090 <_dtoa_r+0xa10>
 80050d2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80050d6:	d1d8      	bne.n	800508a <_dtoa_r+0xa0a>
 80050d8:	9a00      	ldr	r2, [sp, #0]
 80050da:	2339      	movs	r3, #57	@ 0x39
 80050dc:	7013      	strb	r3, [r2, #0]
 80050de:	4633      	mov	r3, r6
 80050e0:	461e      	mov	r6, r3
 80050e2:	3b01      	subs	r3, #1
 80050e4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80050e8:	2a39      	cmp	r2, #57	@ 0x39
 80050ea:	d052      	beq.n	8005192 <_dtoa_r+0xb12>
 80050ec:	3201      	adds	r2, #1
 80050ee:	701a      	strb	r2, [r3, #0]
 80050f0:	e612      	b.n	8004d18 <_dtoa_r+0x698>
 80050f2:	2a00      	cmp	r2, #0
 80050f4:	dd07      	ble.n	8005106 <_dtoa_r+0xa86>
 80050f6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80050fa:	d0ed      	beq.n	80050d8 <_dtoa_r+0xa58>
 80050fc:	9a00      	ldr	r2, [sp, #0]
 80050fe:	f108 0301 	add.w	r3, r8, #1
 8005102:	7013      	strb	r3, [r2, #0]
 8005104:	e608      	b.n	8004d18 <_dtoa_r+0x698>
 8005106:	9b07      	ldr	r3, [sp, #28]
 8005108:	9a07      	ldr	r2, [sp, #28]
 800510a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800510e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005110:	4293      	cmp	r3, r2
 8005112:	d028      	beq.n	8005166 <_dtoa_r+0xae6>
 8005114:	4649      	mov	r1, r9
 8005116:	2300      	movs	r3, #0
 8005118:	220a      	movs	r2, #10
 800511a:	4658      	mov	r0, fp
 800511c:	f000 f9d6 	bl	80054cc <__multadd>
 8005120:	42af      	cmp	r7, r5
 8005122:	4681      	mov	r9, r0
 8005124:	f04f 0300 	mov.w	r3, #0
 8005128:	f04f 020a 	mov.w	r2, #10
 800512c:	4639      	mov	r1, r7
 800512e:	4658      	mov	r0, fp
 8005130:	d107      	bne.n	8005142 <_dtoa_r+0xac2>
 8005132:	f000 f9cb 	bl	80054cc <__multadd>
 8005136:	4607      	mov	r7, r0
 8005138:	4605      	mov	r5, r0
 800513a:	9b07      	ldr	r3, [sp, #28]
 800513c:	3301      	adds	r3, #1
 800513e:	9307      	str	r3, [sp, #28]
 8005140:	e774      	b.n	800502c <_dtoa_r+0x9ac>
 8005142:	f000 f9c3 	bl	80054cc <__multadd>
 8005146:	4629      	mov	r1, r5
 8005148:	4607      	mov	r7, r0
 800514a:	2300      	movs	r3, #0
 800514c:	220a      	movs	r2, #10
 800514e:	4658      	mov	r0, fp
 8005150:	f000 f9bc 	bl	80054cc <__multadd>
 8005154:	4605      	mov	r5, r0
 8005156:	e7f0      	b.n	800513a <_dtoa_r+0xaba>
 8005158:	9b00      	ldr	r3, [sp, #0]
 800515a:	2b00      	cmp	r3, #0
 800515c:	bfcc      	ite	gt
 800515e:	461e      	movgt	r6, r3
 8005160:	2601      	movle	r6, #1
 8005162:	4456      	add	r6, sl
 8005164:	2700      	movs	r7, #0
 8005166:	4649      	mov	r1, r9
 8005168:	2201      	movs	r2, #1
 800516a:	4658      	mov	r0, fp
 800516c:	f000 fb5a 	bl	8005824 <__lshift>
 8005170:	4621      	mov	r1, r4
 8005172:	4681      	mov	r9, r0
 8005174:	f000 fbc2 	bl	80058fc <__mcmp>
 8005178:	2800      	cmp	r0, #0
 800517a:	dcb0      	bgt.n	80050de <_dtoa_r+0xa5e>
 800517c:	d102      	bne.n	8005184 <_dtoa_r+0xb04>
 800517e:	f018 0f01 	tst.w	r8, #1
 8005182:	d1ac      	bne.n	80050de <_dtoa_r+0xa5e>
 8005184:	4633      	mov	r3, r6
 8005186:	461e      	mov	r6, r3
 8005188:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800518c:	2a30      	cmp	r2, #48	@ 0x30
 800518e:	d0fa      	beq.n	8005186 <_dtoa_r+0xb06>
 8005190:	e5c2      	b.n	8004d18 <_dtoa_r+0x698>
 8005192:	459a      	cmp	sl, r3
 8005194:	d1a4      	bne.n	80050e0 <_dtoa_r+0xa60>
 8005196:	9b04      	ldr	r3, [sp, #16]
 8005198:	3301      	adds	r3, #1
 800519a:	9304      	str	r3, [sp, #16]
 800519c:	2331      	movs	r3, #49	@ 0x31
 800519e:	f88a 3000 	strb.w	r3, [sl]
 80051a2:	e5b9      	b.n	8004d18 <_dtoa_r+0x698>
 80051a4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80051a6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8005204 <_dtoa_r+0xb84>
 80051aa:	b11b      	cbz	r3, 80051b4 <_dtoa_r+0xb34>
 80051ac:	f10a 0308 	add.w	r3, sl, #8
 80051b0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80051b2:	6013      	str	r3, [r2, #0]
 80051b4:	4650      	mov	r0, sl
 80051b6:	b019      	add	sp, #100	@ 0x64
 80051b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80051be:	2b01      	cmp	r3, #1
 80051c0:	f77f ae37 	ble.w	8004e32 <_dtoa_r+0x7b2>
 80051c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80051c6:	930a      	str	r3, [sp, #40]	@ 0x28
 80051c8:	2001      	movs	r0, #1
 80051ca:	e655      	b.n	8004e78 <_dtoa_r+0x7f8>
 80051cc:	9b00      	ldr	r3, [sp, #0]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	f77f aed6 	ble.w	8004f80 <_dtoa_r+0x900>
 80051d4:	4656      	mov	r6, sl
 80051d6:	4621      	mov	r1, r4
 80051d8:	4648      	mov	r0, r9
 80051da:	f7ff f9c8 	bl	800456e <quorem>
 80051de:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80051e2:	f806 8b01 	strb.w	r8, [r6], #1
 80051e6:	9b00      	ldr	r3, [sp, #0]
 80051e8:	eba6 020a 	sub.w	r2, r6, sl
 80051ec:	4293      	cmp	r3, r2
 80051ee:	ddb3      	ble.n	8005158 <_dtoa_r+0xad8>
 80051f0:	4649      	mov	r1, r9
 80051f2:	2300      	movs	r3, #0
 80051f4:	220a      	movs	r2, #10
 80051f6:	4658      	mov	r0, fp
 80051f8:	f000 f968 	bl	80054cc <__multadd>
 80051fc:	4681      	mov	r9, r0
 80051fe:	e7ea      	b.n	80051d6 <_dtoa_r+0xb56>
 8005200:	080063fc 	.word	0x080063fc
 8005204:	08006380 	.word	0x08006380

08005208 <_free_r>:
 8005208:	b538      	push	{r3, r4, r5, lr}
 800520a:	4605      	mov	r5, r0
 800520c:	2900      	cmp	r1, #0
 800520e:	d041      	beq.n	8005294 <_free_r+0x8c>
 8005210:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005214:	1f0c      	subs	r4, r1, #4
 8005216:	2b00      	cmp	r3, #0
 8005218:	bfb8      	it	lt
 800521a:	18e4      	addlt	r4, r4, r3
 800521c:	f000 f8e8 	bl	80053f0 <__malloc_lock>
 8005220:	4a1d      	ldr	r2, [pc, #116]	@ (8005298 <_free_r+0x90>)
 8005222:	6813      	ldr	r3, [r2, #0]
 8005224:	b933      	cbnz	r3, 8005234 <_free_r+0x2c>
 8005226:	6063      	str	r3, [r4, #4]
 8005228:	6014      	str	r4, [r2, #0]
 800522a:	4628      	mov	r0, r5
 800522c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005230:	f000 b8e4 	b.w	80053fc <__malloc_unlock>
 8005234:	42a3      	cmp	r3, r4
 8005236:	d908      	bls.n	800524a <_free_r+0x42>
 8005238:	6820      	ldr	r0, [r4, #0]
 800523a:	1821      	adds	r1, r4, r0
 800523c:	428b      	cmp	r3, r1
 800523e:	bf01      	itttt	eq
 8005240:	6819      	ldreq	r1, [r3, #0]
 8005242:	685b      	ldreq	r3, [r3, #4]
 8005244:	1809      	addeq	r1, r1, r0
 8005246:	6021      	streq	r1, [r4, #0]
 8005248:	e7ed      	b.n	8005226 <_free_r+0x1e>
 800524a:	461a      	mov	r2, r3
 800524c:	685b      	ldr	r3, [r3, #4]
 800524e:	b10b      	cbz	r3, 8005254 <_free_r+0x4c>
 8005250:	42a3      	cmp	r3, r4
 8005252:	d9fa      	bls.n	800524a <_free_r+0x42>
 8005254:	6811      	ldr	r1, [r2, #0]
 8005256:	1850      	adds	r0, r2, r1
 8005258:	42a0      	cmp	r0, r4
 800525a:	d10b      	bne.n	8005274 <_free_r+0x6c>
 800525c:	6820      	ldr	r0, [r4, #0]
 800525e:	4401      	add	r1, r0
 8005260:	1850      	adds	r0, r2, r1
 8005262:	4283      	cmp	r3, r0
 8005264:	6011      	str	r1, [r2, #0]
 8005266:	d1e0      	bne.n	800522a <_free_r+0x22>
 8005268:	6818      	ldr	r0, [r3, #0]
 800526a:	685b      	ldr	r3, [r3, #4]
 800526c:	6053      	str	r3, [r2, #4]
 800526e:	4408      	add	r0, r1
 8005270:	6010      	str	r0, [r2, #0]
 8005272:	e7da      	b.n	800522a <_free_r+0x22>
 8005274:	d902      	bls.n	800527c <_free_r+0x74>
 8005276:	230c      	movs	r3, #12
 8005278:	602b      	str	r3, [r5, #0]
 800527a:	e7d6      	b.n	800522a <_free_r+0x22>
 800527c:	6820      	ldr	r0, [r4, #0]
 800527e:	1821      	adds	r1, r4, r0
 8005280:	428b      	cmp	r3, r1
 8005282:	bf04      	itt	eq
 8005284:	6819      	ldreq	r1, [r3, #0]
 8005286:	685b      	ldreq	r3, [r3, #4]
 8005288:	6063      	str	r3, [r4, #4]
 800528a:	bf04      	itt	eq
 800528c:	1809      	addeq	r1, r1, r0
 800528e:	6021      	streq	r1, [r4, #0]
 8005290:	6054      	str	r4, [r2, #4]
 8005292:	e7ca      	b.n	800522a <_free_r+0x22>
 8005294:	bd38      	pop	{r3, r4, r5, pc}
 8005296:	bf00      	nop
 8005298:	200003c8 	.word	0x200003c8

0800529c <malloc>:
 800529c:	4b02      	ldr	r3, [pc, #8]	@ (80052a8 <malloc+0xc>)
 800529e:	4601      	mov	r1, r0
 80052a0:	6818      	ldr	r0, [r3, #0]
 80052a2:	f000 b825 	b.w	80052f0 <_malloc_r>
 80052a6:	bf00      	nop
 80052a8:	20000018 	.word	0x20000018

080052ac <sbrk_aligned>:
 80052ac:	b570      	push	{r4, r5, r6, lr}
 80052ae:	4e0f      	ldr	r6, [pc, #60]	@ (80052ec <sbrk_aligned+0x40>)
 80052b0:	460c      	mov	r4, r1
 80052b2:	6831      	ldr	r1, [r6, #0]
 80052b4:	4605      	mov	r5, r0
 80052b6:	b911      	cbnz	r1, 80052be <sbrk_aligned+0x12>
 80052b8:	f000 feaa 	bl	8006010 <_sbrk_r>
 80052bc:	6030      	str	r0, [r6, #0]
 80052be:	4621      	mov	r1, r4
 80052c0:	4628      	mov	r0, r5
 80052c2:	f000 fea5 	bl	8006010 <_sbrk_r>
 80052c6:	1c43      	adds	r3, r0, #1
 80052c8:	d103      	bne.n	80052d2 <sbrk_aligned+0x26>
 80052ca:	f04f 34ff 	mov.w	r4, #4294967295
 80052ce:	4620      	mov	r0, r4
 80052d0:	bd70      	pop	{r4, r5, r6, pc}
 80052d2:	1cc4      	adds	r4, r0, #3
 80052d4:	f024 0403 	bic.w	r4, r4, #3
 80052d8:	42a0      	cmp	r0, r4
 80052da:	d0f8      	beq.n	80052ce <sbrk_aligned+0x22>
 80052dc:	1a21      	subs	r1, r4, r0
 80052de:	4628      	mov	r0, r5
 80052e0:	f000 fe96 	bl	8006010 <_sbrk_r>
 80052e4:	3001      	adds	r0, #1
 80052e6:	d1f2      	bne.n	80052ce <sbrk_aligned+0x22>
 80052e8:	e7ef      	b.n	80052ca <sbrk_aligned+0x1e>
 80052ea:	bf00      	nop
 80052ec:	200003c4 	.word	0x200003c4

080052f0 <_malloc_r>:
 80052f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80052f4:	1ccd      	adds	r5, r1, #3
 80052f6:	f025 0503 	bic.w	r5, r5, #3
 80052fa:	3508      	adds	r5, #8
 80052fc:	2d0c      	cmp	r5, #12
 80052fe:	bf38      	it	cc
 8005300:	250c      	movcc	r5, #12
 8005302:	2d00      	cmp	r5, #0
 8005304:	4606      	mov	r6, r0
 8005306:	db01      	blt.n	800530c <_malloc_r+0x1c>
 8005308:	42a9      	cmp	r1, r5
 800530a:	d904      	bls.n	8005316 <_malloc_r+0x26>
 800530c:	230c      	movs	r3, #12
 800530e:	6033      	str	r3, [r6, #0]
 8005310:	2000      	movs	r0, #0
 8005312:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005316:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80053ec <_malloc_r+0xfc>
 800531a:	f000 f869 	bl	80053f0 <__malloc_lock>
 800531e:	f8d8 3000 	ldr.w	r3, [r8]
 8005322:	461c      	mov	r4, r3
 8005324:	bb44      	cbnz	r4, 8005378 <_malloc_r+0x88>
 8005326:	4629      	mov	r1, r5
 8005328:	4630      	mov	r0, r6
 800532a:	f7ff ffbf 	bl	80052ac <sbrk_aligned>
 800532e:	1c43      	adds	r3, r0, #1
 8005330:	4604      	mov	r4, r0
 8005332:	d158      	bne.n	80053e6 <_malloc_r+0xf6>
 8005334:	f8d8 4000 	ldr.w	r4, [r8]
 8005338:	4627      	mov	r7, r4
 800533a:	2f00      	cmp	r7, #0
 800533c:	d143      	bne.n	80053c6 <_malloc_r+0xd6>
 800533e:	2c00      	cmp	r4, #0
 8005340:	d04b      	beq.n	80053da <_malloc_r+0xea>
 8005342:	6823      	ldr	r3, [r4, #0]
 8005344:	4639      	mov	r1, r7
 8005346:	4630      	mov	r0, r6
 8005348:	eb04 0903 	add.w	r9, r4, r3
 800534c:	f000 fe60 	bl	8006010 <_sbrk_r>
 8005350:	4581      	cmp	r9, r0
 8005352:	d142      	bne.n	80053da <_malloc_r+0xea>
 8005354:	6821      	ldr	r1, [r4, #0]
 8005356:	1a6d      	subs	r5, r5, r1
 8005358:	4629      	mov	r1, r5
 800535a:	4630      	mov	r0, r6
 800535c:	f7ff ffa6 	bl	80052ac <sbrk_aligned>
 8005360:	3001      	adds	r0, #1
 8005362:	d03a      	beq.n	80053da <_malloc_r+0xea>
 8005364:	6823      	ldr	r3, [r4, #0]
 8005366:	442b      	add	r3, r5
 8005368:	6023      	str	r3, [r4, #0]
 800536a:	f8d8 3000 	ldr.w	r3, [r8]
 800536e:	685a      	ldr	r2, [r3, #4]
 8005370:	bb62      	cbnz	r2, 80053cc <_malloc_r+0xdc>
 8005372:	f8c8 7000 	str.w	r7, [r8]
 8005376:	e00f      	b.n	8005398 <_malloc_r+0xa8>
 8005378:	6822      	ldr	r2, [r4, #0]
 800537a:	1b52      	subs	r2, r2, r5
 800537c:	d420      	bmi.n	80053c0 <_malloc_r+0xd0>
 800537e:	2a0b      	cmp	r2, #11
 8005380:	d917      	bls.n	80053b2 <_malloc_r+0xc2>
 8005382:	1961      	adds	r1, r4, r5
 8005384:	42a3      	cmp	r3, r4
 8005386:	6025      	str	r5, [r4, #0]
 8005388:	bf18      	it	ne
 800538a:	6059      	strne	r1, [r3, #4]
 800538c:	6863      	ldr	r3, [r4, #4]
 800538e:	bf08      	it	eq
 8005390:	f8c8 1000 	streq.w	r1, [r8]
 8005394:	5162      	str	r2, [r4, r5]
 8005396:	604b      	str	r3, [r1, #4]
 8005398:	4630      	mov	r0, r6
 800539a:	f000 f82f 	bl	80053fc <__malloc_unlock>
 800539e:	f104 000b 	add.w	r0, r4, #11
 80053a2:	1d23      	adds	r3, r4, #4
 80053a4:	f020 0007 	bic.w	r0, r0, #7
 80053a8:	1ac2      	subs	r2, r0, r3
 80053aa:	bf1c      	itt	ne
 80053ac:	1a1b      	subne	r3, r3, r0
 80053ae:	50a3      	strne	r3, [r4, r2]
 80053b0:	e7af      	b.n	8005312 <_malloc_r+0x22>
 80053b2:	6862      	ldr	r2, [r4, #4]
 80053b4:	42a3      	cmp	r3, r4
 80053b6:	bf0c      	ite	eq
 80053b8:	f8c8 2000 	streq.w	r2, [r8]
 80053bc:	605a      	strne	r2, [r3, #4]
 80053be:	e7eb      	b.n	8005398 <_malloc_r+0xa8>
 80053c0:	4623      	mov	r3, r4
 80053c2:	6864      	ldr	r4, [r4, #4]
 80053c4:	e7ae      	b.n	8005324 <_malloc_r+0x34>
 80053c6:	463c      	mov	r4, r7
 80053c8:	687f      	ldr	r7, [r7, #4]
 80053ca:	e7b6      	b.n	800533a <_malloc_r+0x4a>
 80053cc:	461a      	mov	r2, r3
 80053ce:	685b      	ldr	r3, [r3, #4]
 80053d0:	42a3      	cmp	r3, r4
 80053d2:	d1fb      	bne.n	80053cc <_malloc_r+0xdc>
 80053d4:	2300      	movs	r3, #0
 80053d6:	6053      	str	r3, [r2, #4]
 80053d8:	e7de      	b.n	8005398 <_malloc_r+0xa8>
 80053da:	230c      	movs	r3, #12
 80053dc:	6033      	str	r3, [r6, #0]
 80053de:	4630      	mov	r0, r6
 80053e0:	f000 f80c 	bl	80053fc <__malloc_unlock>
 80053e4:	e794      	b.n	8005310 <_malloc_r+0x20>
 80053e6:	6005      	str	r5, [r0, #0]
 80053e8:	e7d6      	b.n	8005398 <_malloc_r+0xa8>
 80053ea:	bf00      	nop
 80053ec:	200003c8 	.word	0x200003c8

080053f0 <__malloc_lock>:
 80053f0:	4801      	ldr	r0, [pc, #4]	@ (80053f8 <__malloc_lock+0x8>)
 80053f2:	f7ff b8ba 	b.w	800456a <__retarget_lock_acquire_recursive>
 80053f6:	bf00      	nop
 80053f8:	200003c0 	.word	0x200003c0

080053fc <__malloc_unlock>:
 80053fc:	4801      	ldr	r0, [pc, #4]	@ (8005404 <__malloc_unlock+0x8>)
 80053fe:	f7ff b8b5 	b.w	800456c <__retarget_lock_release_recursive>
 8005402:	bf00      	nop
 8005404:	200003c0 	.word	0x200003c0

08005408 <_Balloc>:
 8005408:	b570      	push	{r4, r5, r6, lr}
 800540a:	69c6      	ldr	r6, [r0, #28]
 800540c:	4604      	mov	r4, r0
 800540e:	460d      	mov	r5, r1
 8005410:	b976      	cbnz	r6, 8005430 <_Balloc+0x28>
 8005412:	2010      	movs	r0, #16
 8005414:	f7ff ff42 	bl	800529c <malloc>
 8005418:	4602      	mov	r2, r0
 800541a:	61e0      	str	r0, [r4, #28]
 800541c:	b920      	cbnz	r0, 8005428 <_Balloc+0x20>
 800541e:	4b18      	ldr	r3, [pc, #96]	@ (8005480 <_Balloc+0x78>)
 8005420:	4818      	ldr	r0, [pc, #96]	@ (8005484 <_Balloc+0x7c>)
 8005422:	216b      	movs	r1, #107	@ 0x6b
 8005424:	f000 fe12 	bl	800604c <__assert_func>
 8005428:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800542c:	6006      	str	r6, [r0, #0]
 800542e:	60c6      	str	r6, [r0, #12]
 8005430:	69e6      	ldr	r6, [r4, #28]
 8005432:	68f3      	ldr	r3, [r6, #12]
 8005434:	b183      	cbz	r3, 8005458 <_Balloc+0x50>
 8005436:	69e3      	ldr	r3, [r4, #28]
 8005438:	68db      	ldr	r3, [r3, #12]
 800543a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800543e:	b9b8      	cbnz	r0, 8005470 <_Balloc+0x68>
 8005440:	2101      	movs	r1, #1
 8005442:	fa01 f605 	lsl.w	r6, r1, r5
 8005446:	1d72      	adds	r2, r6, #5
 8005448:	0092      	lsls	r2, r2, #2
 800544a:	4620      	mov	r0, r4
 800544c:	f000 fe1c 	bl	8006088 <_calloc_r>
 8005450:	b160      	cbz	r0, 800546c <_Balloc+0x64>
 8005452:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005456:	e00e      	b.n	8005476 <_Balloc+0x6e>
 8005458:	2221      	movs	r2, #33	@ 0x21
 800545a:	2104      	movs	r1, #4
 800545c:	4620      	mov	r0, r4
 800545e:	f000 fe13 	bl	8006088 <_calloc_r>
 8005462:	69e3      	ldr	r3, [r4, #28]
 8005464:	60f0      	str	r0, [r6, #12]
 8005466:	68db      	ldr	r3, [r3, #12]
 8005468:	2b00      	cmp	r3, #0
 800546a:	d1e4      	bne.n	8005436 <_Balloc+0x2e>
 800546c:	2000      	movs	r0, #0
 800546e:	bd70      	pop	{r4, r5, r6, pc}
 8005470:	6802      	ldr	r2, [r0, #0]
 8005472:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005476:	2300      	movs	r3, #0
 8005478:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800547c:	e7f7      	b.n	800546e <_Balloc+0x66>
 800547e:	bf00      	nop
 8005480:	0800638d 	.word	0x0800638d
 8005484:	0800640d 	.word	0x0800640d

08005488 <_Bfree>:
 8005488:	b570      	push	{r4, r5, r6, lr}
 800548a:	69c6      	ldr	r6, [r0, #28]
 800548c:	4605      	mov	r5, r0
 800548e:	460c      	mov	r4, r1
 8005490:	b976      	cbnz	r6, 80054b0 <_Bfree+0x28>
 8005492:	2010      	movs	r0, #16
 8005494:	f7ff ff02 	bl	800529c <malloc>
 8005498:	4602      	mov	r2, r0
 800549a:	61e8      	str	r0, [r5, #28]
 800549c:	b920      	cbnz	r0, 80054a8 <_Bfree+0x20>
 800549e:	4b09      	ldr	r3, [pc, #36]	@ (80054c4 <_Bfree+0x3c>)
 80054a0:	4809      	ldr	r0, [pc, #36]	@ (80054c8 <_Bfree+0x40>)
 80054a2:	218f      	movs	r1, #143	@ 0x8f
 80054a4:	f000 fdd2 	bl	800604c <__assert_func>
 80054a8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80054ac:	6006      	str	r6, [r0, #0]
 80054ae:	60c6      	str	r6, [r0, #12]
 80054b0:	b13c      	cbz	r4, 80054c2 <_Bfree+0x3a>
 80054b2:	69eb      	ldr	r3, [r5, #28]
 80054b4:	6862      	ldr	r2, [r4, #4]
 80054b6:	68db      	ldr	r3, [r3, #12]
 80054b8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80054bc:	6021      	str	r1, [r4, #0]
 80054be:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80054c2:	bd70      	pop	{r4, r5, r6, pc}
 80054c4:	0800638d 	.word	0x0800638d
 80054c8:	0800640d 	.word	0x0800640d

080054cc <__multadd>:
 80054cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80054d0:	690d      	ldr	r5, [r1, #16]
 80054d2:	4607      	mov	r7, r0
 80054d4:	460c      	mov	r4, r1
 80054d6:	461e      	mov	r6, r3
 80054d8:	f101 0c14 	add.w	ip, r1, #20
 80054dc:	2000      	movs	r0, #0
 80054de:	f8dc 3000 	ldr.w	r3, [ip]
 80054e2:	b299      	uxth	r1, r3
 80054e4:	fb02 6101 	mla	r1, r2, r1, r6
 80054e8:	0c1e      	lsrs	r6, r3, #16
 80054ea:	0c0b      	lsrs	r3, r1, #16
 80054ec:	fb02 3306 	mla	r3, r2, r6, r3
 80054f0:	b289      	uxth	r1, r1
 80054f2:	3001      	adds	r0, #1
 80054f4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80054f8:	4285      	cmp	r5, r0
 80054fa:	f84c 1b04 	str.w	r1, [ip], #4
 80054fe:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005502:	dcec      	bgt.n	80054de <__multadd+0x12>
 8005504:	b30e      	cbz	r6, 800554a <__multadd+0x7e>
 8005506:	68a3      	ldr	r3, [r4, #8]
 8005508:	42ab      	cmp	r3, r5
 800550a:	dc19      	bgt.n	8005540 <__multadd+0x74>
 800550c:	6861      	ldr	r1, [r4, #4]
 800550e:	4638      	mov	r0, r7
 8005510:	3101      	adds	r1, #1
 8005512:	f7ff ff79 	bl	8005408 <_Balloc>
 8005516:	4680      	mov	r8, r0
 8005518:	b928      	cbnz	r0, 8005526 <__multadd+0x5a>
 800551a:	4602      	mov	r2, r0
 800551c:	4b0c      	ldr	r3, [pc, #48]	@ (8005550 <__multadd+0x84>)
 800551e:	480d      	ldr	r0, [pc, #52]	@ (8005554 <__multadd+0x88>)
 8005520:	21ba      	movs	r1, #186	@ 0xba
 8005522:	f000 fd93 	bl	800604c <__assert_func>
 8005526:	6922      	ldr	r2, [r4, #16]
 8005528:	3202      	adds	r2, #2
 800552a:	f104 010c 	add.w	r1, r4, #12
 800552e:	0092      	lsls	r2, r2, #2
 8005530:	300c      	adds	r0, #12
 8005532:	f000 fd7d 	bl	8006030 <memcpy>
 8005536:	4621      	mov	r1, r4
 8005538:	4638      	mov	r0, r7
 800553a:	f7ff ffa5 	bl	8005488 <_Bfree>
 800553e:	4644      	mov	r4, r8
 8005540:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005544:	3501      	adds	r5, #1
 8005546:	615e      	str	r6, [r3, #20]
 8005548:	6125      	str	r5, [r4, #16]
 800554a:	4620      	mov	r0, r4
 800554c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005550:	080063fc 	.word	0x080063fc
 8005554:	0800640d 	.word	0x0800640d

08005558 <__hi0bits>:
 8005558:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800555c:	4603      	mov	r3, r0
 800555e:	bf36      	itet	cc
 8005560:	0403      	lslcc	r3, r0, #16
 8005562:	2000      	movcs	r0, #0
 8005564:	2010      	movcc	r0, #16
 8005566:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800556a:	bf3c      	itt	cc
 800556c:	021b      	lslcc	r3, r3, #8
 800556e:	3008      	addcc	r0, #8
 8005570:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005574:	bf3c      	itt	cc
 8005576:	011b      	lslcc	r3, r3, #4
 8005578:	3004      	addcc	r0, #4
 800557a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800557e:	bf3c      	itt	cc
 8005580:	009b      	lslcc	r3, r3, #2
 8005582:	3002      	addcc	r0, #2
 8005584:	2b00      	cmp	r3, #0
 8005586:	db05      	blt.n	8005594 <__hi0bits+0x3c>
 8005588:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800558c:	f100 0001 	add.w	r0, r0, #1
 8005590:	bf08      	it	eq
 8005592:	2020      	moveq	r0, #32
 8005594:	4770      	bx	lr

08005596 <__lo0bits>:
 8005596:	6803      	ldr	r3, [r0, #0]
 8005598:	4602      	mov	r2, r0
 800559a:	f013 0007 	ands.w	r0, r3, #7
 800559e:	d00b      	beq.n	80055b8 <__lo0bits+0x22>
 80055a0:	07d9      	lsls	r1, r3, #31
 80055a2:	d421      	bmi.n	80055e8 <__lo0bits+0x52>
 80055a4:	0798      	lsls	r0, r3, #30
 80055a6:	bf49      	itett	mi
 80055a8:	085b      	lsrmi	r3, r3, #1
 80055aa:	089b      	lsrpl	r3, r3, #2
 80055ac:	2001      	movmi	r0, #1
 80055ae:	6013      	strmi	r3, [r2, #0]
 80055b0:	bf5c      	itt	pl
 80055b2:	6013      	strpl	r3, [r2, #0]
 80055b4:	2002      	movpl	r0, #2
 80055b6:	4770      	bx	lr
 80055b8:	b299      	uxth	r1, r3
 80055ba:	b909      	cbnz	r1, 80055c0 <__lo0bits+0x2a>
 80055bc:	0c1b      	lsrs	r3, r3, #16
 80055be:	2010      	movs	r0, #16
 80055c0:	b2d9      	uxtb	r1, r3
 80055c2:	b909      	cbnz	r1, 80055c8 <__lo0bits+0x32>
 80055c4:	3008      	adds	r0, #8
 80055c6:	0a1b      	lsrs	r3, r3, #8
 80055c8:	0719      	lsls	r1, r3, #28
 80055ca:	bf04      	itt	eq
 80055cc:	091b      	lsreq	r3, r3, #4
 80055ce:	3004      	addeq	r0, #4
 80055d0:	0799      	lsls	r1, r3, #30
 80055d2:	bf04      	itt	eq
 80055d4:	089b      	lsreq	r3, r3, #2
 80055d6:	3002      	addeq	r0, #2
 80055d8:	07d9      	lsls	r1, r3, #31
 80055da:	d403      	bmi.n	80055e4 <__lo0bits+0x4e>
 80055dc:	085b      	lsrs	r3, r3, #1
 80055de:	f100 0001 	add.w	r0, r0, #1
 80055e2:	d003      	beq.n	80055ec <__lo0bits+0x56>
 80055e4:	6013      	str	r3, [r2, #0]
 80055e6:	4770      	bx	lr
 80055e8:	2000      	movs	r0, #0
 80055ea:	4770      	bx	lr
 80055ec:	2020      	movs	r0, #32
 80055ee:	4770      	bx	lr

080055f0 <__i2b>:
 80055f0:	b510      	push	{r4, lr}
 80055f2:	460c      	mov	r4, r1
 80055f4:	2101      	movs	r1, #1
 80055f6:	f7ff ff07 	bl	8005408 <_Balloc>
 80055fa:	4602      	mov	r2, r0
 80055fc:	b928      	cbnz	r0, 800560a <__i2b+0x1a>
 80055fe:	4b05      	ldr	r3, [pc, #20]	@ (8005614 <__i2b+0x24>)
 8005600:	4805      	ldr	r0, [pc, #20]	@ (8005618 <__i2b+0x28>)
 8005602:	f240 1145 	movw	r1, #325	@ 0x145
 8005606:	f000 fd21 	bl	800604c <__assert_func>
 800560a:	2301      	movs	r3, #1
 800560c:	6144      	str	r4, [r0, #20]
 800560e:	6103      	str	r3, [r0, #16]
 8005610:	bd10      	pop	{r4, pc}
 8005612:	bf00      	nop
 8005614:	080063fc 	.word	0x080063fc
 8005618:	0800640d 	.word	0x0800640d

0800561c <__multiply>:
 800561c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005620:	4614      	mov	r4, r2
 8005622:	690a      	ldr	r2, [r1, #16]
 8005624:	6923      	ldr	r3, [r4, #16]
 8005626:	429a      	cmp	r2, r3
 8005628:	bfa8      	it	ge
 800562a:	4623      	movge	r3, r4
 800562c:	460f      	mov	r7, r1
 800562e:	bfa4      	itt	ge
 8005630:	460c      	movge	r4, r1
 8005632:	461f      	movge	r7, r3
 8005634:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8005638:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800563c:	68a3      	ldr	r3, [r4, #8]
 800563e:	6861      	ldr	r1, [r4, #4]
 8005640:	eb0a 0609 	add.w	r6, sl, r9
 8005644:	42b3      	cmp	r3, r6
 8005646:	b085      	sub	sp, #20
 8005648:	bfb8      	it	lt
 800564a:	3101      	addlt	r1, #1
 800564c:	f7ff fedc 	bl	8005408 <_Balloc>
 8005650:	b930      	cbnz	r0, 8005660 <__multiply+0x44>
 8005652:	4602      	mov	r2, r0
 8005654:	4b44      	ldr	r3, [pc, #272]	@ (8005768 <__multiply+0x14c>)
 8005656:	4845      	ldr	r0, [pc, #276]	@ (800576c <__multiply+0x150>)
 8005658:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800565c:	f000 fcf6 	bl	800604c <__assert_func>
 8005660:	f100 0514 	add.w	r5, r0, #20
 8005664:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005668:	462b      	mov	r3, r5
 800566a:	2200      	movs	r2, #0
 800566c:	4543      	cmp	r3, r8
 800566e:	d321      	bcc.n	80056b4 <__multiply+0x98>
 8005670:	f107 0114 	add.w	r1, r7, #20
 8005674:	f104 0214 	add.w	r2, r4, #20
 8005678:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800567c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8005680:	9302      	str	r3, [sp, #8]
 8005682:	1b13      	subs	r3, r2, r4
 8005684:	3b15      	subs	r3, #21
 8005686:	f023 0303 	bic.w	r3, r3, #3
 800568a:	3304      	adds	r3, #4
 800568c:	f104 0715 	add.w	r7, r4, #21
 8005690:	42ba      	cmp	r2, r7
 8005692:	bf38      	it	cc
 8005694:	2304      	movcc	r3, #4
 8005696:	9301      	str	r3, [sp, #4]
 8005698:	9b02      	ldr	r3, [sp, #8]
 800569a:	9103      	str	r1, [sp, #12]
 800569c:	428b      	cmp	r3, r1
 800569e:	d80c      	bhi.n	80056ba <__multiply+0x9e>
 80056a0:	2e00      	cmp	r6, #0
 80056a2:	dd03      	ble.n	80056ac <__multiply+0x90>
 80056a4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d05b      	beq.n	8005764 <__multiply+0x148>
 80056ac:	6106      	str	r6, [r0, #16]
 80056ae:	b005      	add	sp, #20
 80056b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056b4:	f843 2b04 	str.w	r2, [r3], #4
 80056b8:	e7d8      	b.n	800566c <__multiply+0x50>
 80056ba:	f8b1 a000 	ldrh.w	sl, [r1]
 80056be:	f1ba 0f00 	cmp.w	sl, #0
 80056c2:	d024      	beq.n	800570e <__multiply+0xf2>
 80056c4:	f104 0e14 	add.w	lr, r4, #20
 80056c8:	46a9      	mov	r9, r5
 80056ca:	f04f 0c00 	mov.w	ip, #0
 80056ce:	f85e 7b04 	ldr.w	r7, [lr], #4
 80056d2:	f8d9 3000 	ldr.w	r3, [r9]
 80056d6:	fa1f fb87 	uxth.w	fp, r7
 80056da:	b29b      	uxth	r3, r3
 80056dc:	fb0a 330b 	mla	r3, sl, fp, r3
 80056e0:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80056e4:	f8d9 7000 	ldr.w	r7, [r9]
 80056e8:	4463      	add	r3, ip
 80056ea:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80056ee:	fb0a c70b 	mla	r7, sl, fp, ip
 80056f2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80056f6:	b29b      	uxth	r3, r3
 80056f8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80056fc:	4572      	cmp	r2, lr
 80056fe:	f849 3b04 	str.w	r3, [r9], #4
 8005702:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8005706:	d8e2      	bhi.n	80056ce <__multiply+0xb2>
 8005708:	9b01      	ldr	r3, [sp, #4]
 800570a:	f845 c003 	str.w	ip, [r5, r3]
 800570e:	9b03      	ldr	r3, [sp, #12]
 8005710:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8005714:	3104      	adds	r1, #4
 8005716:	f1b9 0f00 	cmp.w	r9, #0
 800571a:	d021      	beq.n	8005760 <__multiply+0x144>
 800571c:	682b      	ldr	r3, [r5, #0]
 800571e:	f104 0c14 	add.w	ip, r4, #20
 8005722:	46ae      	mov	lr, r5
 8005724:	f04f 0a00 	mov.w	sl, #0
 8005728:	f8bc b000 	ldrh.w	fp, [ip]
 800572c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8005730:	fb09 770b 	mla	r7, r9, fp, r7
 8005734:	4457      	add	r7, sl
 8005736:	b29b      	uxth	r3, r3
 8005738:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800573c:	f84e 3b04 	str.w	r3, [lr], #4
 8005740:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005744:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005748:	f8be 3000 	ldrh.w	r3, [lr]
 800574c:	fb09 330a 	mla	r3, r9, sl, r3
 8005750:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8005754:	4562      	cmp	r2, ip
 8005756:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800575a:	d8e5      	bhi.n	8005728 <__multiply+0x10c>
 800575c:	9f01      	ldr	r7, [sp, #4]
 800575e:	51eb      	str	r3, [r5, r7]
 8005760:	3504      	adds	r5, #4
 8005762:	e799      	b.n	8005698 <__multiply+0x7c>
 8005764:	3e01      	subs	r6, #1
 8005766:	e79b      	b.n	80056a0 <__multiply+0x84>
 8005768:	080063fc 	.word	0x080063fc
 800576c:	0800640d 	.word	0x0800640d

08005770 <__pow5mult>:
 8005770:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005774:	4615      	mov	r5, r2
 8005776:	f012 0203 	ands.w	r2, r2, #3
 800577a:	4607      	mov	r7, r0
 800577c:	460e      	mov	r6, r1
 800577e:	d007      	beq.n	8005790 <__pow5mult+0x20>
 8005780:	4c25      	ldr	r4, [pc, #148]	@ (8005818 <__pow5mult+0xa8>)
 8005782:	3a01      	subs	r2, #1
 8005784:	2300      	movs	r3, #0
 8005786:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800578a:	f7ff fe9f 	bl	80054cc <__multadd>
 800578e:	4606      	mov	r6, r0
 8005790:	10ad      	asrs	r5, r5, #2
 8005792:	d03d      	beq.n	8005810 <__pow5mult+0xa0>
 8005794:	69fc      	ldr	r4, [r7, #28]
 8005796:	b97c      	cbnz	r4, 80057b8 <__pow5mult+0x48>
 8005798:	2010      	movs	r0, #16
 800579a:	f7ff fd7f 	bl	800529c <malloc>
 800579e:	4602      	mov	r2, r0
 80057a0:	61f8      	str	r0, [r7, #28]
 80057a2:	b928      	cbnz	r0, 80057b0 <__pow5mult+0x40>
 80057a4:	4b1d      	ldr	r3, [pc, #116]	@ (800581c <__pow5mult+0xac>)
 80057a6:	481e      	ldr	r0, [pc, #120]	@ (8005820 <__pow5mult+0xb0>)
 80057a8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80057ac:	f000 fc4e 	bl	800604c <__assert_func>
 80057b0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80057b4:	6004      	str	r4, [r0, #0]
 80057b6:	60c4      	str	r4, [r0, #12]
 80057b8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80057bc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80057c0:	b94c      	cbnz	r4, 80057d6 <__pow5mult+0x66>
 80057c2:	f240 2171 	movw	r1, #625	@ 0x271
 80057c6:	4638      	mov	r0, r7
 80057c8:	f7ff ff12 	bl	80055f0 <__i2b>
 80057cc:	2300      	movs	r3, #0
 80057ce:	f8c8 0008 	str.w	r0, [r8, #8]
 80057d2:	4604      	mov	r4, r0
 80057d4:	6003      	str	r3, [r0, #0]
 80057d6:	f04f 0900 	mov.w	r9, #0
 80057da:	07eb      	lsls	r3, r5, #31
 80057dc:	d50a      	bpl.n	80057f4 <__pow5mult+0x84>
 80057de:	4631      	mov	r1, r6
 80057e0:	4622      	mov	r2, r4
 80057e2:	4638      	mov	r0, r7
 80057e4:	f7ff ff1a 	bl	800561c <__multiply>
 80057e8:	4631      	mov	r1, r6
 80057ea:	4680      	mov	r8, r0
 80057ec:	4638      	mov	r0, r7
 80057ee:	f7ff fe4b 	bl	8005488 <_Bfree>
 80057f2:	4646      	mov	r6, r8
 80057f4:	106d      	asrs	r5, r5, #1
 80057f6:	d00b      	beq.n	8005810 <__pow5mult+0xa0>
 80057f8:	6820      	ldr	r0, [r4, #0]
 80057fa:	b938      	cbnz	r0, 800580c <__pow5mult+0x9c>
 80057fc:	4622      	mov	r2, r4
 80057fe:	4621      	mov	r1, r4
 8005800:	4638      	mov	r0, r7
 8005802:	f7ff ff0b 	bl	800561c <__multiply>
 8005806:	6020      	str	r0, [r4, #0]
 8005808:	f8c0 9000 	str.w	r9, [r0]
 800580c:	4604      	mov	r4, r0
 800580e:	e7e4      	b.n	80057da <__pow5mult+0x6a>
 8005810:	4630      	mov	r0, r6
 8005812:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005816:	bf00      	nop
 8005818:	08006468 	.word	0x08006468
 800581c:	0800638d 	.word	0x0800638d
 8005820:	0800640d 	.word	0x0800640d

08005824 <__lshift>:
 8005824:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005828:	460c      	mov	r4, r1
 800582a:	6849      	ldr	r1, [r1, #4]
 800582c:	6923      	ldr	r3, [r4, #16]
 800582e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005832:	68a3      	ldr	r3, [r4, #8]
 8005834:	4607      	mov	r7, r0
 8005836:	4691      	mov	r9, r2
 8005838:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800583c:	f108 0601 	add.w	r6, r8, #1
 8005840:	42b3      	cmp	r3, r6
 8005842:	db0b      	blt.n	800585c <__lshift+0x38>
 8005844:	4638      	mov	r0, r7
 8005846:	f7ff fddf 	bl	8005408 <_Balloc>
 800584a:	4605      	mov	r5, r0
 800584c:	b948      	cbnz	r0, 8005862 <__lshift+0x3e>
 800584e:	4602      	mov	r2, r0
 8005850:	4b28      	ldr	r3, [pc, #160]	@ (80058f4 <__lshift+0xd0>)
 8005852:	4829      	ldr	r0, [pc, #164]	@ (80058f8 <__lshift+0xd4>)
 8005854:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8005858:	f000 fbf8 	bl	800604c <__assert_func>
 800585c:	3101      	adds	r1, #1
 800585e:	005b      	lsls	r3, r3, #1
 8005860:	e7ee      	b.n	8005840 <__lshift+0x1c>
 8005862:	2300      	movs	r3, #0
 8005864:	f100 0114 	add.w	r1, r0, #20
 8005868:	f100 0210 	add.w	r2, r0, #16
 800586c:	4618      	mov	r0, r3
 800586e:	4553      	cmp	r3, sl
 8005870:	db33      	blt.n	80058da <__lshift+0xb6>
 8005872:	6920      	ldr	r0, [r4, #16]
 8005874:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005878:	f104 0314 	add.w	r3, r4, #20
 800587c:	f019 091f 	ands.w	r9, r9, #31
 8005880:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005884:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005888:	d02b      	beq.n	80058e2 <__lshift+0xbe>
 800588a:	f1c9 0e20 	rsb	lr, r9, #32
 800588e:	468a      	mov	sl, r1
 8005890:	2200      	movs	r2, #0
 8005892:	6818      	ldr	r0, [r3, #0]
 8005894:	fa00 f009 	lsl.w	r0, r0, r9
 8005898:	4310      	orrs	r0, r2
 800589a:	f84a 0b04 	str.w	r0, [sl], #4
 800589e:	f853 2b04 	ldr.w	r2, [r3], #4
 80058a2:	459c      	cmp	ip, r3
 80058a4:	fa22 f20e 	lsr.w	r2, r2, lr
 80058a8:	d8f3      	bhi.n	8005892 <__lshift+0x6e>
 80058aa:	ebac 0304 	sub.w	r3, ip, r4
 80058ae:	3b15      	subs	r3, #21
 80058b0:	f023 0303 	bic.w	r3, r3, #3
 80058b4:	3304      	adds	r3, #4
 80058b6:	f104 0015 	add.w	r0, r4, #21
 80058ba:	4584      	cmp	ip, r0
 80058bc:	bf38      	it	cc
 80058be:	2304      	movcc	r3, #4
 80058c0:	50ca      	str	r2, [r1, r3]
 80058c2:	b10a      	cbz	r2, 80058c8 <__lshift+0xa4>
 80058c4:	f108 0602 	add.w	r6, r8, #2
 80058c8:	3e01      	subs	r6, #1
 80058ca:	4638      	mov	r0, r7
 80058cc:	612e      	str	r6, [r5, #16]
 80058ce:	4621      	mov	r1, r4
 80058d0:	f7ff fdda 	bl	8005488 <_Bfree>
 80058d4:	4628      	mov	r0, r5
 80058d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058da:	f842 0f04 	str.w	r0, [r2, #4]!
 80058de:	3301      	adds	r3, #1
 80058e0:	e7c5      	b.n	800586e <__lshift+0x4a>
 80058e2:	3904      	subs	r1, #4
 80058e4:	f853 2b04 	ldr.w	r2, [r3], #4
 80058e8:	f841 2f04 	str.w	r2, [r1, #4]!
 80058ec:	459c      	cmp	ip, r3
 80058ee:	d8f9      	bhi.n	80058e4 <__lshift+0xc0>
 80058f0:	e7ea      	b.n	80058c8 <__lshift+0xa4>
 80058f2:	bf00      	nop
 80058f4:	080063fc 	.word	0x080063fc
 80058f8:	0800640d 	.word	0x0800640d

080058fc <__mcmp>:
 80058fc:	690a      	ldr	r2, [r1, #16]
 80058fe:	4603      	mov	r3, r0
 8005900:	6900      	ldr	r0, [r0, #16]
 8005902:	1a80      	subs	r0, r0, r2
 8005904:	b530      	push	{r4, r5, lr}
 8005906:	d10e      	bne.n	8005926 <__mcmp+0x2a>
 8005908:	3314      	adds	r3, #20
 800590a:	3114      	adds	r1, #20
 800590c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8005910:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8005914:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005918:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800591c:	4295      	cmp	r5, r2
 800591e:	d003      	beq.n	8005928 <__mcmp+0x2c>
 8005920:	d205      	bcs.n	800592e <__mcmp+0x32>
 8005922:	f04f 30ff 	mov.w	r0, #4294967295
 8005926:	bd30      	pop	{r4, r5, pc}
 8005928:	42a3      	cmp	r3, r4
 800592a:	d3f3      	bcc.n	8005914 <__mcmp+0x18>
 800592c:	e7fb      	b.n	8005926 <__mcmp+0x2a>
 800592e:	2001      	movs	r0, #1
 8005930:	e7f9      	b.n	8005926 <__mcmp+0x2a>
	...

08005934 <__mdiff>:
 8005934:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005938:	4689      	mov	r9, r1
 800593a:	4606      	mov	r6, r0
 800593c:	4611      	mov	r1, r2
 800593e:	4648      	mov	r0, r9
 8005940:	4614      	mov	r4, r2
 8005942:	f7ff ffdb 	bl	80058fc <__mcmp>
 8005946:	1e05      	subs	r5, r0, #0
 8005948:	d112      	bne.n	8005970 <__mdiff+0x3c>
 800594a:	4629      	mov	r1, r5
 800594c:	4630      	mov	r0, r6
 800594e:	f7ff fd5b 	bl	8005408 <_Balloc>
 8005952:	4602      	mov	r2, r0
 8005954:	b928      	cbnz	r0, 8005962 <__mdiff+0x2e>
 8005956:	4b3f      	ldr	r3, [pc, #252]	@ (8005a54 <__mdiff+0x120>)
 8005958:	f240 2137 	movw	r1, #567	@ 0x237
 800595c:	483e      	ldr	r0, [pc, #248]	@ (8005a58 <__mdiff+0x124>)
 800595e:	f000 fb75 	bl	800604c <__assert_func>
 8005962:	2301      	movs	r3, #1
 8005964:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005968:	4610      	mov	r0, r2
 800596a:	b003      	add	sp, #12
 800596c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005970:	bfbc      	itt	lt
 8005972:	464b      	movlt	r3, r9
 8005974:	46a1      	movlt	r9, r4
 8005976:	4630      	mov	r0, r6
 8005978:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800597c:	bfba      	itte	lt
 800597e:	461c      	movlt	r4, r3
 8005980:	2501      	movlt	r5, #1
 8005982:	2500      	movge	r5, #0
 8005984:	f7ff fd40 	bl	8005408 <_Balloc>
 8005988:	4602      	mov	r2, r0
 800598a:	b918      	cbnz	r0, 8005994 <__mdiff+0x60>
 800598c:	4b31      	ldr	r3, [pc, #196]	@ (8005a54 <__mdiff+0x120>)
 800598e:	f240 2145 	movw	r1, #581	@ 0x245
 8005992:	e7e3      	b.n	800595c <__mdiff+0x28>
 8005994:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8005998:	6926      	ldr	r6, [r4, #16]
 800599a:	60c5      	str	r5, [r0, #12]
 800599c:	f109 0310 	add.w	r3, r9, #16
 80059a0:	f109 0514 	add.w	r5, r9, #20
 80059a4:	f104 0e14 	add.w	lr, r4, #20
 80059a8:	f100 0b14 	add.w	fp, r0, #20
 80059ac:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80059b0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80059b4:	9301      	str	r3, [sp, #4]
 80059b6:	46d9      	mov	r9, fp
 80059b8:	f04f 0c00 	mov.w	ip, #0
 80059bc:	9b01      	ldr	r3, [sp, #4]
 80059be:	f85e 0b04 	ldr.w	r0, [lr], #4
 80059c2:	f853 af04 	ldr.w	sl, [r3, #4]!
 80059c6:	9301      	str	r3, [sp, #4]
 80059c8:	fa1f f38a 	uxth.w	r3, sl
 80059cc:	4619      	mov	r1, r3
 80059ce:	b283      	uxth	r3, r0
 80059d0:	1acb      	subs	r3, r1, r3
 80059d2:	0c00      	lsrs	r0, r0, #16
 80059d4:	4463      	add	r3, ip
 80059d6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80059da:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80059de:	b29b      	uxth	r3, r3
 80059e0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80059e4:	4576      	cmp	r6, lr
 80059e6:	f849 3b04 	str.w	r3, [r9], #4
 80059ea:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80059ee:	d8e5      	bhi.n	80059bc <__mdiff+0x88>
 80059f0:	1b33      	subs	r3, r6, r4
 80059f2:	3b15      	subs	r3, #21
 80059f4:	f023 0303 	bic.w	r3, r3, #3
 80059f8:	3415      	adds	r4, #21
 80059fa:	3304      	adds	r3, #4
 80059fc:	42a6      	cmp	r6, r4
 80059fe:	bf38      	it	cc
 8005a00:	2304      	movcc	r3, #4
 8005a02:	441d      	add	r5, r3
 8005a04:	445b      	add	r3, fp
 8005a06:	461e      	mov	r6, r3
 8005a08:	462c      	mov	r4, r5
 8005a0a:	4544      	cmp	r4, r8
 8005a0c:	d30e      	bcc.n	8005a2c <__mdiff+0xf8>
 8005a0e:	f108 0103 	add.w	r1, r8, #3
 8005a12:	1b49      	subs	r1, r1, r5
 8005a14:	f021 0103 	bic.w	r1, r1, #3
 8005a18:	3d03      	subs	r5, #3
 8005a1a:	45a8      	cmp	r8, r5
 8005a1c:	bf38      	it	cc
 8005a1e:	2100      	movcc	r1, #0
 8005a20:	440b      	add	r3, r1
 8005a22:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8005a26:	b191      	cbz	r1, 8005a4e <__mdiff+0x11a>
 8005a28:	6117      	str	r7, [r2, #16]
 8005a2a:	e79d      	b.n	8005968 <__mdiff+0x34>
 8005a2c:	f854 1b04 	ldr.w	r1, [r4], #4
 8005a30:	46e6      	mov	lr, ip
 8005a32:	0c08      	lsrs	r0, r1, #16
 8005a34:	fa1c fc81 	uxtah	ip, ip, r1
 8005a38:	4471      	add	r1, lr
 8005a3a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8005a3e:	b289      	uxth	r1, r1
 8005a40:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8005a44:	f846 1b04 	str.w	r1, [r6], #4
 8005a48:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005a4c:	e7dd      	b.n	8005a0a <__mdiff+0xd6>
 8005a4e:	3f01      	subs	r7, #1
 8005a50:	e7e7      	b.n	8005a22 <__mdiff+0xee>
 8005a52:	bf00      	nop
 8005a54:	080063fc 	.word	0x080063fc
 8005a58:	0800640d 	.word	0x0800640d

08005a5c <__d2b>:
 8005a5c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005a60:	460f      	mov	r7, r1
 8005a62:	2101      	movs	r1, #1
 8005a64:	ec59 8b10 	vmov	r8, r9, d0
 8005a68:	4616      	mov	r6, r2
 8005a6a:	f7ff fccd 	bl	8005408 <_Balloc>
 8005a6e:	4604      	mov	r4, r0
 8005a70:	b930      	cbnz	r0, 8005a80 <__d2b+0x24>
 8005a72:	4602      	mov	r2, r0
 8005a74:	4b23      	ldr	r3, [pc, #140]	@ (8005b04 <__d2b+0xa8>)
 8005a76:	4824      	ldr	r0, [pc, #144]	@ (8005b08 <__d2b+0xac>)
 8005a78:	f240 310f 	movw	r1, #783	@ 0x30f
 8005a7c:	f000 fae6 	bl	800604c <__assert_func>
 8005a80:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8005a84:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005a88:	b10d      	cbz	r5, 8005a8e <__d2b+0x32>
 8005a8a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005a8e:	9301      	str	r3, [sp, #4]
 8005a90:	f1b8 0300 	subs.w	r3, r8, #0
 8005a94:	d023      	beq.n	8005ade <__d2b+0x82>
 8005a96:	4668      	mov	r0, sp
 8005a98:	9300      	str	r3, [sp, #0]
 8005a9a:	f7ff fd7c 	bl	8005596 <__lo0bits>
 8005a9e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8005aa2:	b1d0      	cbz	r0, 8005ada <__d2b+0x7e>
 8005aa4:	f1c0 0320 	rsb	r3, r0, #32
 8005aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8005aac:	430b      	orrs	r3, r1
 8005aae:	40c2      	lsrs	r2, r0
 8005ab0:	6163      	str	r3, [r4, #20]
 8005ab2:	9201      	str	r2, [sp, #4]
 8005ab4:	9b01      	ldr	r3, [sp, #4]
 8005ab6:	61a3      	str	r3, [r4, #24]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	bf0c      	ite	eq
 8005abc:	2201      	moveq	r2, #1
 8005abe:	2202      	movne	r2, #2
 8005ac0:	6122      	str	r2, [r4, #16]
 8005ac2:	b1a5      	cbz	r5, 8005aee <__d2b+0x92>
 8005ac4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8005ac8:	4405      	add	r5, r0
 8005aca:	603d      	str	r5, [r7, #0]
 8005acc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8005ad0:	6030      	str	r0, [r6, #0]
 8005ad2:	4620      	mov	r0, r4
 8005ad4:	b003      	add	sp, #12
 8005ad6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005ada:	6161      	str	r1, [r4, #20]
 8005adc:	e7ea      	b.n	8005ab4 <__d2b+0x58>
 8005ade:	a801      	add	r0, sp, #4
 8005ae0:	f7ff fd59 	bl	8005596 <__lo0bits>
 8005ae4:	9b01      	ldr	r3, [sp, #4]
 8005ae6:	6163      	str	r3, [r4, #20]
 8005ae8:	3020      	adds	r0, #32
 8005aea:	2201      	movs	r2, #1
 8005aec:	e7e8      	b.n	8005ac0 <__d2b+0x64>
 8005aee:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005af2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8005af6:	6038      	str	r0, [r7, #0]
 8005af8:	6918      	ldr	r0, [r3, #16]
 8005afa:	f7ff fd2d 	bl	8005558 <__hi0bits>
 8005afe:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8005b02:	e7e5      	b.n	8005ad0 <__d2b+0x74>
 8005b04:	080063fc 	.word	0x080063fc
 8005b08:	0800640d 	.word	0x0800640d

08005b0c <__sfputc_r>:
 8005b0c:	6893      	ldr	r3, [r2, #8]
 8005b0e:	3b01      	subs	r3, #1
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	b410      	push	{r4}
 8005b14:	6093      	str	r3, [r2, #8]
 8005b16:	da08      	bge.n	8005b2a <__sfputc_r+0x1e>
 8005b18:	6994      	ldr	r4, [r2, #24]
 8005b1a:	42a3      	cmp	r3, r4
 8005b1c:	db01      	blt.n	8005b22 <__sfputc_r+0x16>
 8005b1e:	290a      	cmp	r1, #10
 8005b20:	d103      	bne.n	8005b2a <__sfputc_r+0x1e>
 8005b22:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005b26:	f000 b9df 	b.w	8005ee8 <__swbuf_r>
 8005b2a:	6813      	ldr	r3, [r2, #0]
 8005b2c:	1c58      	adds	r0, r3, #1
 8005b2e:	6010      	str	r0, [r2, #0]
 8005b30:	7019      	strb	r1, [r3, #0]
 8005b32:	4608      	mov	r0, r1
 8005b34:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005b38:	4770      	bx	lr

08005b3a <__sfputs_r>:
 8005b3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b3c:	4606      	mov	r6, r0
 8005b3e:	460f      	mov	r7, r1
 8005b40:	4614      	mov	r4, r2
 8005b42:	18d5      	adds	r5, r2, r3
 8005b44:	42ac      	cmp	r4, r5
 8005b46:	d101      	bne.n	8005b4c <__sfputs_r+0x12>
 8005b48:	2000      	movs	r0, #0
 8005b4a:	e007      	b.n	8005b5c <__sfputs_r+0x22>
 8005b4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b50:	463a      	mov	r2, r7
 8005b52:	4630      	mov	r0, r6
 8005b54:	f7ff ffda 	bl	8005b0c <__sfputc_r>
 8005b58:	1c43      	adds	r3, r0, #1
 8005b5a:	d1f3      	bne.n	8005b44 <__sfputs_r+0xa>
 8005b5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005b60 <_vfiprintf_r>:
 8005b60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b64:	460d      	mov	r5, r1
 8005b66:	b09d      	sub	sp, #116	@ 0x74
 8005b68:	4614      	mov	r4, r2
 8005b6a:	4698      	mov	r8, r3
 8005b6c:	4606      	mov	r6, r0
 8005b6e:	b118      	cbz	r0, 8005b78 <_vfiprintf_r+0x18>
 8005b70:	6a03      	ldr	r3, [r0, #32]
 8005b72:	b90b      	cbnz	r3, 8005b78 <_vfiprintf_r+0x18>
 8005b74:	f7fe fbf0 	bl	8004358 <__sinit>
 8005b78:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005b7a:	07d9      	lsls	r1, r3, #31
 8005b7c:	d405      	bmi.n	8005b8a <_vfiprintf_r+0x2a>
 8005b7e:	89ab      	ldrh	r3, [r5, #12]
 8005b80:	059a      	lsls	r2, r3, #22
 8005b82:	d402      	bmi.n	8005b8a <_vfiprintf_r+0x2a>
 8005b84:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005b86:	f7fe fcf0 	bl	800456a <__retarget_lock_acquire_recursive>
 8005b8a:	89ab      	ldrh	r3, [r5, #12]
 8005b8c:	071b      	lsls	r3, r3, #28
 8005b8e:	d501      	bpl.n	8005b94 <_vfiprintf_r+0x34>
 8005b90:	692b      	ldr	r3, [r5, #16]
 8005b92:	b99b      	cbnz	r3, 8005bbc <_vfiprintf_r+0x5c>
 8005b94:	4629      	mov	r1, r5
 8005b96:	4630      	mov	r0, r6
 8005b98:	f000 f9e4 	bl	8005f64 <__swsetup_r>
 8005b9c:	b170      	cbz	r0, 8005bbc <_vfiprintf_r+0x5c>
 8005b9e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005ba0:	07dc      	lsls	r4, r3, #31
 8005ba2:	d504      	bpl.n	8005bae <_vfiprintf_r+0x4e>
 8005ba4:	f04f 30ff 	mov.w	r0, #4294967295
 8005ba8:	b01d      	add	sp, #116	@ 0x74
 8005baa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005bae:	89ab      	ldrh	r3, [r5, #12]
 8005bb0:	0598      	lsls	r0, r3, #22
 8005bb2:	d4f7      	bmi.n	8005ba4 <_vfiprintf_r+0x44>
 8005bb4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005bb6:	f7fe fcd9 	bl	800456c <__retarget_lock_release_recursive>
 8005bba:	e7f3      	b.n	8005ba4 <_vfiprintf_r+0x44>
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	9309      	str	r3, [sp, #36]	@ 0x24
 8005bc0:	2320      	movs	r3, #32
 8005bc2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005bc6:	f8cd 800c 	str.w	r8, [sp, #12]
 8005bca:	2330      	movs	r3, #48	@ 0x30
 8005bcc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8005d7c <_vfiprintf_r+0x21c>
 8005bd0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005bd4:	f04f 0901 	mov.w	r9, #1
 8005bd8:	4623      	mov	r3, r4
 8005bda:	469a      	mov	sl, r3
 8005bdc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005be0:	b10a      	cbz	r2, 8005be6 <_vfiprintf_r+0x86>
 8005be2:	2a25      	cmp	r2, #37	@ 0x25
 8005be4:	d1f9      	bne.n	8005bda <_vfiprintf_r+0x7a>
 8005be6:	ebba 0b04 	subs.w	fp, sl, r4
 8005bea:	d00b      	beq.n	8005c04 <_vfiprintf_r+0xa4>
 8005bec:	465b      	mov	r3, fp
 8005bee:	4622      	mov	r2, r4
 8005bf0:	4629      	mov	r1, r5
 8005bf2:	4630      	mov	r0, r6
 8005bf4:	f7ff ffa1 	bl	8005b3a <__sfputs_r>
 8005bf8:	3001      	adds	r0, #1
 8005bfa:	f000 80a7 	beq.w	8005d4c <_vfiprintf_r+0x1ec>
 8005bfe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005c00:	445a      	add	r2, fp
 8005c02:	9209      	str	r2, [sp, #36]	@ 0x24
 8005c04:	f89a 3000 	ldrb.w	r3, [sl]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	f000 809f 	beq.w	8005d4c <_vfiprintf_r+0x1ec>
 8005c0e:	2300      	movs	r3, #0
 8005c10:	f04f 32ff 	mov.w	r2, #4294967295
 8005c14:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005c18:	f10a 0a01 	add.w	sl, sl, #1
 8005c1c:	9304      	str	r3, [sp, #16]
 8005c1e:	9307      	str	r3, [sp, #28]
 8005c20:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005c24:	931a      	str	r3, [sp, #104]	@ 0x68
 8005c26:	4654      	mov	r4, sl
 8005c28:	2205      	movs	r2, #5
 8005c2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c2e:	4853      	ldr	r0, [pc, #332]	@ (8005d7c <_vfiprintf_r+0x21c>)
 8005c30:	f7fa fad6 	bl	80001e0 <memchr>
 8005c34:	9a04      	ldr	r2, [sp, #16]
 8005c36:	b9d8      	cbnz	r0, 8005c70 <_vfiprintf_r+0x110>
 8005c38:	06d1      	lsls	r1, r2, #27
 8005c3a:	bf44      	itt	mi
 8005c3c:	2320      	movmi	r3, #32
 8005c3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005c42:	0713      	lsls	r3, r2, #28
 8005c44:	bf44      	itt	mi
 8005c46:	232b      	movmi	r3, #43	@ 0x2b
 8005c48:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005c4c:	f89a 3000 	ldrb.w	r3, [sl]
 8005c50:	2b2a      	cmp	r3, #42	@ 0x2a
 8005c52:	d015      	beq.n	8005c80 <_vfiprintf_r+0x120>
 8005c54:	9a07      	ldr	r2, [sp, #28]
 8005c56:	4654      	mov	r4, sl
 8005c58:	2000      	movs	r0, #0
 8005c5a:	f04f 0c0a 	mov.w	ip, #10
 8005c5e:	4621      	mov	r1, r4
 8005c60:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005c64:	3b30      	subs	r3, #48	@ 0x30
 8005c66:	2b09      	cmp	r3, #9
 8005c68:	d94b      	bls.n	8005d02 <_vfiprintf_r+0x1a2>
 8005c6a:	b1b0      	cbz	r0, 8005c9a <_vfiprintf_r+0x13a>
 8005c6c:	9207      	str	r2, [sp, #28]
 8005c6e:	e014      	b.n	8005c9a <_vfiprintf_r+0x13a>
 8005c70:	eba0 0308 	sub.w	r3, r0, r8
 8005c74:	fa09 f303 	lsl.w	r3, r9, r3
 8005c78:	4313      	orrs	r3, r2
 8005c7a:	9304      	str	r3, [sp, #16]
 8005c7c:	46a2      	mov	sl, r4
 8005c7e:	e7d2      	b.n	8005c26 <_vfiprintf_r+0xc6>
 8005c80:	9b03      	ldr	r3, [sp, #12]
 8005c82:	1d19      	adds	r1, r3, #4
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	9103      	str	r1, [sp, #12]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	bfbb      	ittet	lt
 8005c8c:	425b      	neglt	r3, r3
 8005c8e:	f042 0202 	orrlt.w	r2, r2, #2
 8005c92:	9307      	strge	r3, [sp, #28]
 8005c94:	9307      	strlt	r3, [sp, #28]
 8005c96:	bfb8      	it	lt
 8005c98:	9204      	strlt	r2, [sp, #16]
 8005c9a:	7823      	ldrb	r3, [r4, #0]
 8005c9c:	2b2e      	cmp	r3, #46	@ 0x2e
 8005c9e:	d10a      	bne.n	8005cb6 <_vfiprintf_r+0x156>
 8005ca0:	7863      	ldrb	r3, [r4, #1]
 8005ca2:	2b2a      	cmp	r3, #42	@ 0x2a
 8005ca4:	d132      	bne.n	8005d0c <_vfiprintf_r+0x1ac>
 8005ca6:	9b03      	ldr	r3, [sp, #12]
 8005ca8:	1d1a      	adds	r2, r3, #4
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	9203      	str	r2, [sp, #12]
 8005cae:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005cb2:	3402      	adds	r4, #2
 8005cb4:	9305      	str	r3, [sp, #20]
 8005cb6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8005d8c <_vfiprintf_r+0x22c>
 8005cba:	7821      	ldrb	r1, [r4, #0]
 8005cbc:	2203      	movs	r2, #3
 8005cbe:	4650      	mov	r0, sl
 8005cc0:	f7fa fa8e 	bl	80001e0 <memchr>
 8005cc4:	b138      	cbz	r0, 8005cd6 <_vfiprintf_r+0x176>
 8005cc6:	9b04      	ldr	r3, [sp, #16]
 8005cc8:	eba0 000a 	sub.w	r0, r0, sl
 8005ccc:	2240      	movs	r2, #64	@ 0x40
 8005cce:	4082      	lsls	r2, r0
 8005cd0:	4313      	orrs	r3, r2
 8005cd2:	3401      	adds	r4, #1
 8005cd4:	9304      	str	r3, [sp, #16]
 8005cd6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005cda:	4829      	ldr	r0, [pc, #164]	@ (8005d80 <_vfiprintf_r+0x220>)
 8005cdc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005ce0:	2206      	movs	r2, #6
 8005ce2:	f7fa fa7d 	bl	80001e0 <memchr>
 8005ce6:	2800      	cmp	r0, #0
 8005ce8:	d03f      	beq.n	8005d6a <_vfiprintf_r+0x20a>
 8005cea:	4b26      	ldr	r3, [pc, #152]	@ (8005d84 <_vfiprintf_r+0x224>)
 8005cec:	bb1b      	cbnz	r3, 8005d36 <_vfiprintf_r+0x1d6>
 8005cee:	9b03      	ldr	r3, [sp, #12]
 8005cf0:	3307      	adds	r3, #7
 8005cf2:	f023 0307 	bic.w	r3, r3, #7
 8005cf6:	3308      	adds	r3, #8
 8005cf8:	9303      	str	r3, [sp, #12]
 8005cfa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005cfc:	443b      	add	r3, r7
 8005cfe:	9309      	str	r3, [sp, #36]	@ 0x24
 8005d00:	e76a      	b.n	8005bd8 <_vfiprintf_r+0x78>
 8005d02:	fb0c 3202 	mla	r2, ip, r2, r3
 8005d06:	460c      	mov	r4, r1
 8005d08:	2001      	movs	r0, #1
 8005d0a:	e7a8      	b.n	8005c5e <_vfiprintf_r+0xfe>
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	3401      	adds	r4, #1
 8005d10:	9305      	str	r3, [sp, #20]
 8005d12:	4619      	mov	r1, r3
 8005d14:	f04f 0c0a 	mov.w	ip, #10
 8005d18:	4620      	mov	r0, r4
 8005d1a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005d1e:	3a30      	subs	r2, #48	@ 0x30
 8005d20:	2a09      	cmp	r2, #9
 8005d22:	d903      	bls.n	8005d2c <_vfiprintf_r+0x1cc>
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d0c6      	beq.n	8005cb6 <_vfiprintf_r+0x156>
 8005d28:	9105      	str	r1, [sp, #20]
 8005d2a:	e7c4      	b.n	8005cb6 <_vfiprintf_r+0x156>
 8005d2c:	fb0c 2101 	mla	r1, ip, r1, r2
 8005d30:	4604      	mov	r4, r0
 8005d32:	2301      	movs	r3, #1
 8005d34:	e7f0      	b.n	8005d18 <_vfiprintf_r+0x1b8>
 8005d36:	ab03      	add	r3, sp, #12
 8005d38:	9300      	str	r3, [sp, #0]
 8005d3a:	462a      	mov	r2, r5
 8005d3c:	4b12      	ldr	r3, [pc, #72]	@ (8005d88 <_vfiprintf_r+0x228>)
 8005d3e:	a904      	add	r1, sp, #16
 8005d40:	4630      	mov	r0, r6
 8005d42:	f7fd fec5 	bl	8003ad0 <_printf_float>
 8005d46:	4607      	mov	r7, r0
 8005d48:	1c78      	adds	r0, r7, #1
 8005d4a:	d1d6      	bne.n	8005cfa <_vfiprintf_r+0x19a>
 8005d4c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005d4e:	07d9      	lsls	r1, r3, #31
 8005d50:	d405      	bmi.n	8005d5e <_vfiprintf_r+0x1fe>
 8005d52:	89ab      	ldrh	r3, [r5, #12]
 8005d54:	059a      	lsls	r2, r3, #22
 8005d56:	d402      	bmi.n	8005d5e <_vfiprintf_r+0x1fe>
 8005d58:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005d5a:	f7fe fc07 	bl	800456c <__retarget_lock_release_recursive>
 8005d5e:	89ab      	ldrh	r3, [r5, #12]
 8005d60:	065b      	lsls	r3, r3, #25
 8005d62:	f53f af1f 	bmi.w	8005ba4 <_vfiprintf_r+0x44>
 8005d66:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005d68:	e71e      	b.n	8005ba8 <_vfiprintf_r+0x48>
 8005d6a:	ab03      	add	r3, sp, #12
 8005d6c:	9300      	str	r3, [sp, #0]
 8005d6e:	462a      	mov	r2, r5
 8005d70:	4b05      	ldr	r3, [pc, #20]	@ (8005d88 <_vfiprintf_r+0x228>)
 8005d72:	a904      	add	r1, sp, #16
 8005d74:	4630      	mov	r0, r6
 8005d76:	f7fe f943 	bl	8004000 <_printf_i>
 8005d7a:	e7e4      	b.n	8005d46 <_vfiprintf_r+0x1e6>
 8005d7c:	08006568 	.word	0x08006568
 8005d80:	08006572 	.word	0x08006572
 8005d84:	08003ad1 	.word	0x08003ad1
 8005d88:	08005b3b 	.word	0x08005b3b
 8005d8c:	0800656e 	.word	0x0800656e

08005d90 <__sflush_r>:
 8005d90:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005d94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d98:	0716      	lsls	r6, r2, #28
 8005d9a:	4605      	mov	r5, r0
 8005d9c:	460c      	mov	r4, r1
 8005d9e:	d454      	bmi.n	8005e4a <__sflush_r+0xba>
 8005da0:	684b      	ldr	r3, [r1, #4]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	dc02      	bgt.n	8005dac <__sflush_r+0x1c>
 8005da6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	dd48      	ble.n	8005e3e <__sflush_r+0xae>
 8005dac:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005dae:	2e00      	cmp	r6, #0
 8005db0:	d045      	beq.n	8005e3e <__sflush_r+0xae>
 8005db2:	2300      	movs	r3, #0
 8005db4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005db8:	682f      	ldr	r7, [r5, #0]
 8005dba:	6a21      	ldr	r1, [r4, #32]
 8005dbc:	602b      	str	r3, [r5, #0]
 8005dbe:	d030      	beq.n	8005e22 <__sflush_r+0x92>
 8005dc0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005dc2:	89a3      	ldrh	r3, [r4, #12]
 8005dc4:	0759      	lsls	r1, r3, #29
 8005dc6:	d505      	bpl.n	8005dd4 <__sflush_r+0x44>
 8005dc8:	6863      	ldr	r3, [r4, #4]
 8005dca:	1ad2      	subs	r2, r2, r3
 8005dcc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005dce:	b10b      	cbz	r3, 8005dd4 <__sflush_r+0x44>
 8005dd0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005dd2:	1ad2      	subs	r2, r2, r3
 8005dd4:	2300      	movs	r3, #0
 8005dd6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005dd8:	6a21      	ldr	r1, [r4, #32]
 8005dda:	4628      	mov	r0, r5
 8005ddc:	47b0      	blx	r6
 8005dde:	1c43      	adds	r3, r0, #1
 8005de0:	89a3      	ldrh	r3, [r4, #12]
 8005de2:	d106      	bne.n	8005df2 <__sflush_r+0x62>
 8005de4:	6829      	ldr	r1, [r5, #0]
 8005de6:	291d      	cmp	r1, #29
 8005de8:	d82b      	bhi.n	8005e42 <__sflush_r+0xb2>
 8005dea:	4a2a      	ldr	r2, [pc, #168]	@ (8005e94 <__sflush_r+0x104>)
 8005dec:	410a      	asrs	r2, r1
 8005dee:	07d6      	lsls	r6, r2, #31
 8005df0:	d427      	bmi.n	8005e42 <__sflush_r+0xb2>
 8005df2:	2200      	movs	r2, #0
 8005df4:	6062      	str	r2, [r4, #4]
 8005df6:	04d9      	lsls	r1, r3, #19
 8005df8:	6922      	ldr	r2, [r4, #16]
 8005dfa:	6022      	str	r2, [r4, #0]
 8005dfc:	d504      	bpl.n	8005e08 <__sflush_r+0x78>
 8005dfe:	1c42      	adds	r2, r0, #1
 8005e00:	d101      	bne.n	8005e06 <__sflush_r+0x76>
 8005e02:	682b      	ldr	r3, [r5, #0]
 8005e04:	b903      	cbnz	r3, 8005e08 <__sflush_r+0x78>
 8005e06:	6560      	str	r0, [r4, #84]	@ 0x54
 8005e08:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005e0a:	602f      	str	r7, [r5, #0]
 8005e0c:	b1b9      	cbz	r1, 8005e3e <__sflush_r+0xae>
 8005e0e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005e12:	4299      	cmp	r1, r3
 8005e14:	d002      	beq.n	8005e1c <__sflush_r+0x8c>
 8005e16:	4628      	mov	r0, r5
 8005e18:	f7ff f9f6 	bl	8005208 <_free_r>
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	6363      	str	r3, [r4, #52]	@ 0x34
 8005e20:	e00d      	b.n	8005e3e <__sflush_r+0xae>
 8005e22:	2301      	movs	r3, #1
 8005e24:	4628      	mov	r0, r5
 8005e26:	47b0      	blx	r6
 8005e28:	4602      	mov	r2, r0
 8005e2a:	1c50      	adds	r0, r2, #1
 8005e2c:	d1c9      	bne.n	8005dc2 <__sflush_r+0x32>
 8005e2e:	682b      	ldr	r3, [r5, #0]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d0c6      	beq.n	8005dc2 <__sflush_r+0x32>
 8005e34:	2b1d      	cmp	r3, #29
 8005e36:	d001      	beq.n	8005e3c <__sflush_r+0xac>
 8005e38:	2b16      	cmp	r3, #22
 8005e3a:	d11e      	bne.n	8005e7a <__sflush_r+0xea>
 8005e3c:	602f      	str	r7, [r5, #0]
 8005e3e:	2000      	movs	r0, #0
 8005e40:	e022      	b.n	8005e88 <__sflush_r+0xf8>
 8005e42:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005e46:	b21b      	sxth	r3, r3
 8005e48:	e01b      	b.n	8005e82 <__sflush_r+0xf2>
 8005e4a:	690f      	ldr	r7, [r1, #16]
 8005e4c:	2f00      	cmp	r7, #0
 8005e4e:	d0f6      	beq.n	8005e3e <__sflush_r+0xae>
 8005e50:	0793      	lsls	r3, r2, #30
 8005e52:	680e      	ldr	r6, [r1, #0]
 8005e54:	bf08      	it	eq
 8005e56:	694b      	ldreq	r3, [r1, #20]
 8005e58:	600f      	str	r7, [r1, #0]
 8005e5a:	bf18      	it	ne
 8005e5c:	2300      	movne	r3, #0
 8005e5e:	eba6 0807 	sub.w	r8, r6, r7
 8005e62:	608b      	str	r3, [r1, #8]
 8005e64:	f1b8 0f00 	cmp.w	r8, #0
 8005e68:	dde9      	ble.n	8005e3e <__sflush_r+0xae>
 8005e6a:	6a21      	ldr	r1, [r4, #32]
 8005e6c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8005e6e:	4643      	mov	r3, r8
 8005e70:	463a      	mov	r2, r7
 8005e72:	4628      	mov	r0, r5
 8005e74:	47b0      	blx	r6
 8005e76:	2800      	cmp	r0, #0
 8005e78:	dc08      	bgt.n	8005e8c <__sflush_r+0xfc>
 8005e7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005e7e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005e82:	81a3      	strh	r3, [r4, #12]
 8005e84:	f04f 30ff 	mov.w	r0, #4294967295
 8005e88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005e8c:	4407      	add	r7, r0
 8005e8e:	eba8 0800 	sub.w	r8, r8, r0
 8005e92:	e7e7      	b.n	8005e64 <__sflush_r+0xd4>
 8005e94:	dfbffffe 	.word	0xdfbffffe

08005e98 <_fflush_r>:
 8005e98:	b538      	push	{r3, r4, r5, lr}
 8005e9a:	690b      	ldr	r3, [r1, #16]
 8005e9c:	4605      	mov	r5, r0
 8005e9e:	460c      	mov	r4, r1
 8005ea0:	b913      	cbnz	r3, 8005ea8 <_fflush_r+0x10>
 8005ea2:	2500      	movs	r5, #0
 8005ea4:	4628      	mov	r0, r5
 8005ea6:	bd38      	pop	{r3, r4, r5, pc}
 8005ea8:	b118      	cbz	r0, 8005eb2 <_fflush_r+0x1a>
 8005eaa:	6a03      	ldr	r3, [r0, #32]
 8005eac:	b90b      	cbnz	r3, 8005eb2 <_fflush_r+0x1a>
 8005eae:	f7fe fa53 	bl	8004358 <__sinit>
 8005eb2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d0f3      	beq.n	8005ea2 <_fflush_r+0xa>
 8005eba:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005ebc:	07d0      	lsls	r0, r2, #31
 8005ebe:	d404      	bmi.n	8005eca <_fflush_r+0x32>
 8005ec0:	0599      	lsls	r1, r3, #22
 8005ec2:	d402      	bmi.n	8005eca <_fflush_r+0x32>
 8005ec4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005ec6:	f7fe fb50 	bl	800456a <__retarget_lock_acquire_recursive>
 8005eca:	4628      	mov	r0, r5
 8005ecc:	4621      	mov	r1, r4
 8005ece:	f7ff ff5f 	bl	8005d90 <__sflush_r>
 8005ed2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005ed4:	07da      	lsls	r2, r3, #31
 8005ed6:	4605      	mov	r5, r0
 8005ed8:	d4e4      	bmi.n	8005ea4 <_fflush_r+0xc>
 8005eda:	89a3      	ldrh	r3, [r4, #12]
 8005edc:	059b      	lsls	r3, r3, #22
 8005ede:	d4e1      	bmi.n	8005ea4 <_fflush_r+0xc>
 8005ee0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005ee2:	f7fe fb43 	bl	800456c <__retarget_lock_release_recursive>
 8005ee6:	e7dd      	b.n	8005ea4 <_fflush_r+0xc>

08005ee8 <__swbuf_r>:
 8005ee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005eea:	460e      	mov	r6, r1
 8005eec:	4614      	mov	r4, r2
 8005eee:	4605      	mov	r5, r0
 8005ef0:	b118      	cbz	r0, 8005efa <__swbuf_r+0x12>
 8005ef2:	6a03      	ldr	r3, [r0, #32]
 8005ef4:	b90b      	cbnz	r3, 8005efa <__swbuf_r+0x12>
 8005ef6:	f7fe fa2f 	bl	8004358 <__sinit>
 8005efa:	69a3      	ldr	r3, [r4, #24]
 8005efc:	60a3      	str	r3, [r4, #8]
 8005efe:	89a3      	ldrh	r3, [r4, #12]
 8005f00:	071a      	lsls	r2, r3, #28
 8005f02:	d501      	bpl.n	8005f08 <__swbuf_r+0x20>
 8005f04:	6923      	ldr	r3, [r4, #16]
 8005f06:	b943      	cbnz	r3, 8005f1a <__swbuf_r+0x32>
 8005f08:	4621      	mov	r1, r4
 8005f0a:	4628      	mov	r0, r5
 8005f0c:	f000 f82a 	bl	8005f64 <__swsetup_r>
 8005f10:	b118      	cbz	r0, 8005f1a <__swbuf_r+0x32>
 8005f12:	f04f 37ff 	mov.w	r7, #4294967295
 8005f16:	4638      	mov	r0, r7
 8005f18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005f1a:	6823      	ldr	r3, [r4, #0]
 8005f1c:	6922      	ldr	r2, [r4, #16]
 8005f1e:	1a98      	subs	r0, r3, r2
 8005f20:	6963      	ldr	r3, [r4, #20]
 8005f22:	b2f6      	uxtb	r6, r6
 8005f24:	4283      	cmp	r3, r0
 8005f26:	4637      	mov	r7, r6
 8005f28:	dc05      	bgt.n	8005f36 <__swbuf_r+0x4e>
 8005f2a:	4621      	mov	r1, r4
 8005f2c:	4628      	mov	r0, r5
 8005f2e:	f7ff ffb3 	bl	8005e98 <_fflush_r>
 8005f32:	2800      	cmp	r0, #0
 8005f34:	d1ed      	bne.n	8005f12 <__swbuf_r+0x2a>
 8005f36:	68a3      	ldr	r3, [r4, #8]
 8005f38:	3b01      	subs	r3, #1
 8005f3a:	60a3      	str	r3, [r4, #8]
 8005f3c:	6823      	ldr	r3, [r4, #0]
 8005f3e:	1c5a      	adds	r2, r3, #1
 8005f40:	6022      	str	r2, [r4, #0]
 8005f42:	701e      	strb	r6, [r3, #0]
 8005f44:	6962      	ldr	r2, [r4, #20]
 8005f46:	1c43      	adds	r3, r0, #1
 8005f48:	429a      	cmp	r2, r3
 8005f4a:	d004      	beq.n	8005f56 <__swbuf_r+0x6e>
 8005f4c:	89a3      	ldrh	r3, [r4, #12]
 8005f4e:	07db      	lsls	r3, r3, #31
 8005f50:	d5e1      	bpl.n	8005f16 <__swbuf_r+0x2e>
 8005f52:	2e0a      	cmp	r6, #10
 8005f54:	d1df      	bne.n	8005f16 <__swbuf_r+0x2e>
 8005f56:	4621      	mov	r1, r4
 8005f58:	4628      	mov	r0, r5
 8005f5a:	f7ff ff9d 	bl	8005e98 <_fflush_r>
 8005f5e:	2800      	cmp	r0, #0
 8005f60:	d0d9      	beq.n	8005f16 <__swbuf_r+0x2e>
 8005f62:	e7d6      	b.n	8005f12 <__swbuf_r+0x2a>

08005f64 <__swsetup_r>:
 8005f64:	b538      	push	{r3, r4, r5, lr}
 8005f66:	4b29      	ldr	r3, [pc, #164]	@ (800600c <__swsetup_r+0xa8>)
 8005f68:	4605      	mov	r5, r0
 8005f6a:	6818      	ldr	r0, [r3, #0]
 8005f6c:	460c      	mov	r4, r1
 8005f6e:	b118      	cbz	r0, 8005f78 <__swsetup_r+0x14>
 8005f70:	6a03      	ldr	r3, [r0, #32]
 8005f72:	b90b      	cbnz	r3, 8005f78 <__swsetup_r+0x14>
 8005f74:	f7fe f9f0 	bl	8004358 <__sinit>
 8005f78:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005f7c:	0719      	lsls	r1, r3, #28
 8005f7e:	d422      	bmi.n	8005fc6 <__swsetup_r+0x62>
 8005f80:	06da      	lsls	r2, r3, #27
 8005f82:	d407      	bmi.n	8005f94 <__swsetup_r+0x30>
 8005f84:	2209      	movs	r2, #9
 8005f86:	602a      	str	r2, [r5, #0]
 8005f88:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005f8c:	81a3      	strh	r3, [r4, #12]
 8005f8e:	f04f 30ff 	mov.w	r0, #4294967295
 8005f92:	e033      	b.n	8005ffc <__swsetup_r+0x98>
 8005f94:	0758      	lsls	r0, r3, #29
 8005f96:	d512      	bpl.n	8005fbe <__swsetup_r+0x5a>
 8005f98:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005f9a:	b141      	cbz	r1, 8005fae <__swsetup_r+0x4a>
 8005f9c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005fa0:	4299      	cmp	r1, r3
 8005fa2:	d002      	beq.n	8005faa <__swsetup_r+0x46>
 8005fa4:	4628      	mov	r0, r5
 8005fa6:	f7ff f92f 	bl	8005208 <_free_r>
 8005faa:	2300      	movs	r3, #0
 8005fac:	6363      	str	r3, [r4, #52]	@ 0x34
 8005fae:	89a3      	ldrh	r3, [r4, #12]
 8005fb0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005fb4:	81a3      	strh	r3, [r4, #12]
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	6063      	str	r3, [r4, #4]
 8005fba:	6923      	ldr	r3, [r4, #16]
 8005fbc:	6023      	str	r3, [r4, #0]
 8005fbe:	89a3      	ldrh	r3, [r4, #12]
 8005fc0:	f043 0308 	orr.w	r3, r3, #8
 8005fc4:	81a3      	strh	r3, [r4, #12]
 8005fc6:	6923      	ldr	r3, [r4, #16]
 8005fc8:	b94b      	cbnz	r3, 8005fde <__swsetup_r+0x7a>
 8005fca:	89a3      	ldrh	r3, [r4, #12]
 8005fcc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005fd0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005fd4:	d003      	beq.n	8005fde <__swsetup_r+0x7a>
 8005fd6:	4621      	mov	r1, r4
 8005fd8:	4628      	mov	r0, r5
 8005fda:	f000 f8c1 	bl	8006160 <__smakebuf_r>
 8005fde:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005fe2:	f013 0201 	ands.w	r2, r3, #1
 8005fe6:	d00a      	beq.n	8005ffe <__swsetup_r+0x9a>
 8005fe8:	2200      	movs	r2, #0
 8005fea:	60a2      	str	r2, [r4, #8]
 8005fec:	6962      	ldr	r2, [r4, #20]
 8005fee:	4252      	negs	r2, r2
 8005ff0:	61a2      	str	r2, [r4, #24]
 8005ff2:	6922      	ldr	r2, [r4, #16]
 8005ff4:	b942      	cbnz	r2, 8006008 <__swsetup_r+0xa4>
 8005ff6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005ffa:	d1c5      	bne.n	8005f88 <__swsetup_r+0x24>
 8005ffc:	bd38      	pop	{r3, r4, r5, pc}
 8005ffe:	0799      	lsls	r1, r3, #30
 8006000:	bf58      	it	pl
 8006002:	6962      	ldrpl	r2, [r4, #20]
 8006004:	60a2      	str	r2, [r4, #8]
 8006006:	e7f4      	b.n	8005ff2 <__swsetup_r+0x8e>
 8006008:	2000      	movs	r0, #0
 800600a:	e7f7      	b.n	8005ffc <__swsetup_r+0x98>
 800600c:	20000018 	.word	0x20000018

08006010 <_sbrk_r>:
 8006010:	b538      	push	{r3, r4, r5, lr}
 8006012:	4d06      	ldr	r5, [pc, #24]	@ (800602c <_sbrk_r+0x1c>)
 8006014:	2300      	movs	r3, #0
 8006016:	4604      	mov	r4, r0
 8006018:	4608      	mov	r0, r1
 800601a:	602b      	str	r3, [r5, #0]
 800601c:	f7fb f818 	bl	8001050 <_sbrk>
 8006020:	1c43      	adds	r3, r0, #1
 8006022:	d102      	bne.n	800602a <_sbrk_r+0x1a>
 8006024:	682b      	ldr	r3, [r5, #0]
 8006026:	b103      	cbz	r3, 800602a <_sbrk_r+0x1a>
 8006028:	6023      	str	r3, [r4, #0]
 800602a:	bd38      	pop	{r3, r4, r5, pc}
 800602c:	200003bc 	.word	0x200003bc

08006030 <memcpy>:
 8006030:	440a      	add	r2, r1
 8006032:	4291      	cmp	r1, r2
 8006034:	f100 33ff 	add.w	r3, r0, #4294967295
 8006038:	d100      	bne.n	800603c <memcpy+0xc>
 800603a:	4770      	bx	lr
 800603c:	b510      	push	{r4, lr}
 800603e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006042:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006046:	4291      	cmp	r1, r2
 8006048:	d1f9      	bne.n	800603e <memcpy+0xe>
 800604a:	bd10      	pop	{r4, pc}

0800604c <__assert_func>:
 800604c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800604e:	4614      	mov	r4, r2
 8006050:	461a      	mov	r2, r3
 8006052:	4b09      	ldr	r3, [pc, #36]	@ (8006078 <__assert_func+0x2c>)
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	4605      	mov	r5, r0
 8006058:	68d8      	ldr	r0, [r3, #12]
 800605a:	b954      	cbnz	r4, 8006072 <__assert_func+0x26>
 800605c:	4b07      	ldr	r3, [pc, #28]	@ (800607c <__assert_func+0x30>)
 800605e:	461c      	mov	r4, r3
 8006060:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006064:	9100      	str	r1, [sp, #0]
 8006066:	462b      	mov	r3, r5
 8006068:	4905      	ldr	r1, [pc, #20]	@ (8006080 <__assert_func+0x34>)
 800606a:	f000 f841 	bl	80060f0 <fiprintf>
 800606e:	f000 f8d5 	bl	800621c <abort>
 8006072:	4b04      	ldr	r3, [pc, #16]	@ (8006084 <__assert_func+0x38>)
 8006074:	e7f4      	b.n	8006060 <__assert_func+0x14>
 8006076:	bf00      	nop
 8006078:	20000018 	.word	0x20000018
 800607c:	080065be 	.word	0x080065be
 8006080:	08006590 	.word	0x08006590
 8006084:	08006583 	.word	0x08006583

08006088 <_calloc_r>:
 8006088:	b570      	push	{r4, r5, r6, lr}
 800608a:	fba1 5402 	umull	r5, r4, r1, r2
 800608e:	b93c      	cbnz	r4, 80060a0 <_calloc_r+0x18>
 8006090:	4629      	mov	r1, r5
 8006092:	f7ff f92d 	bl	80052f0 <_malloc_r>
 8006096:	4606      	mov	r6, r0
 8006098:	b928      	cbnz	r0, 80060a6 <_calloc_r+0x1e>
 800609a:	2600      	movs	r6, #0
 800609c:	4630      	mov	r0, r6
 800609e:	bd70      	pop	{r4, r5, r6, pc}
 80060a0:	220c      	movs	r2, #12
 80060a2:	6002      	str	r2, [r0, #0]
 80060a4:	e7f9      	b.n	800609a <_calloc_r+0x12>
 80060a6:	462a      	mov	r2, r5
 80060a8:	4621      	mov	r1, r4
 80060aa:	f7fe f9e0 	bl	800446e <memset>
 80060ae:	e7f5      	b.n	800609c <_calloc_r+0x14>

080060b0 <__ascii_mbtowc>:
 80060b0:	b082      	sub	sp, #8
 80060b2:	b901      	cbnz	r1, 80060b6 <__ascii_mbtowc+0x6>
 80060b4:	a901      	add	r1, sp, #4
 80060b6:	b142      	cbz	r2, 80060ca <__ascii_mbtowc+0x1a>
 80060b8:	b14b      	cbz	r3, 80060ce <__ascii_mbtowc+0x1e>
 80060ba:	7813      	ldrb	r3, [r2, #0]
 80060bc:	600b      	str	r3, [r1, #0]
 80060be:	7812      	ldrb	r2, [r2, #0]
 80060c0:	1e10      	subs	r0, r2, #0
 80060c2:	bf18      	it	ne
 80060c4:	2001      	movne	r0, #1
 80060c6:	b002      	add	sp, #8
 80060c8:	4770      	bx	lr
 80060ca:	4610      	mov	r0, r2
 80060cc:	e7fb      	b.n	80060c6 <__ascii_mbtowc+0x16>
 80060ce:	f06f 0001 	mvn.w	r0, #1
 80060d2:	e7f8      	b.n	80060c6 <__ascii_mbtowc+0x16>

080060d4 <__ascii_wctomb>:
 80060d4:	4603      	mov	r3, r0
 80060d6:	4608      	mov	r0, r1
 80060d8:	b141      	cbz	r1, 80060ec <__ascii_wctomb+0x18>
 80060da:	2aff      	cmp	r2, #255	@ 0xff
 80060dc:	d904      	bls.n	80060e8 <__ascii_wctomb+0x14>
 80060de:	228a      	movs	r2, #138	@ 0x8a
 80060e0:	601a      	str	r2, [r3, #0]
 80060e2:	f04f 30ff 	mov.w	r0, #4294967295
 80060e6:	4770      	bx	lr
 80060e8:	700a      	strb	r2, [r1, #0]
 80060ea:	2001      	movs	r0, #1
 80060ec:	4770      	bx	lr
	...

080060f0 <fiprintf>:
 80060f0:	b40e      	push	{r1, r2, r3}
 80060f2:	b503      	push	{r0, r1, lr}
 80060f4:	4601      	mov	r1, r0
 80060f6:	ab03      	add	r3, sp, #12
 80060f8:	4805      	ldr	r0, [pc, #20]	@ (8006110 <fiprintf+0x20>)
 80060fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80060fe:	6800      	ldr	r0, [r0, #0]
 8006100:	9301      	str	r3, [sp, #4]
 8006102:	f7ff fd2d 	bl	8005b60 <_vfiprintf_r>
 8006106:	b002      	add	sp, #8
 8006108:	f85d eb04 	ldr.w	lr, [sp], #4
 800610c:	b003      	add	sp, #12
 800610e:	4770      	bx	lr
 8006110:	20000018 	.word	0x20000018

08006114 <__swhatbuf_r>:
 8006114:	b570      	push	{r4, r5, r6, lr}
 8006116:	460c      	mov	r4, r1
 8006118:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800611c:	2900      	cmp	r1, #0
 800611e:	b096      	sub	sp, #88	@ 0x58
 8006120:	4615      	mov	r5, r2
 8006122:	461e      	mov	r6, r3
 8006124:	da0d      	bge.n	8006142 <__swhatbuf_r+0x2e>
 8006126:	89a3      	ldrh	r3, [r4, #12]
 8006128:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800612c:	f04f 0100 	mov.w	r1, #0
 8006130:	bf14      	ite	ne
 8006132:	2340      	movne	r3, #64	@ 0x40
 8006134:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006138:	2000      	movs	r0, #0
 800613a:	6031      	str	r1, [r6, #0]
 800613c:	602b      	str	r3, [r5, #0]
 800613e:	b016      	add	sp, #88	@ 0x58
 8006140:	bd70      	pop	{r4, r5, r6, pc}
 8006142:	466a      	mov	r2, sp
 8006144:	f000 f848 	bl	80061d8 <_fstat_r>
 8006148:	2800      	cmp	r0, #0
 800614a:	dbec      	blt.n	8006126 <__swhatbuf_r+0x12>
 800614c:	9901      	ldr	r1, [sp, #4]
 800614e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006152:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006156:	4259      	negs	r1, r3
 8006158:	4159      	adcs	r1, r3
 800615a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800615e:	e7eb      	b.n	8006138 <__swhatbuf_r+0x24>

08006160 <__smakebuf_r>:
 8006160:	898b      	ldrh	r3, [r1, #12]
 8006162:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006164:	079d      	lsls	r5, r3, #30
 8006166:	4606      	mov	r6, r0
 8006168:	460c      	mov	r4, r1
 800616a:	d507      	bpl.n	800617c <__smakebuf_r+0x1c>
 800616c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006170:	6023      	str	r3, [r4, #0]
 8006172:	6123      	str	r3, [r4, #16]
 8006174:	2301      	movs	r3, #1
 8006176:	6163      	str	r3, [r4, #20]
 8006178:	b003      	add	sp, #12
 800617a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800617c:	ab01      	add	r3, sp, #4
 800617e:	466a      	mov	r2, sp
 8006180:	f7ff ffc8 	bl	8006114 <__swhatbuf_r>
 8006184:	9f00      	ldr	r7, [sp, #0]
 8006186:	4605      	mov	r5, r0
 8006188:	4639      	mov	r1, r7
 800618a:	4630      	mov	r0, r6
 800618c:	f7ff f8b0 	bl	80052f0 <_malloc_r>
 8006190:	b948      	cbnz	r0, 80061a6 <__smakebuf_r+0x46>
 8006192:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006196:	059a      	lsls	r2, r3, #22
 8006198:	d4ee      	bmi.n	8006178 <__smakebuf_r+0x18>
 800619a:	f023 0303 	bic.w	r3, r3, #3
 800619e:	f043 0302 	orr.w	r3, r3, #2
 80061a2:	81a3      	strh	r3, [r4, #12]
 80061a4:	e7e2      	b.n	800616c <__smakebuf_r+0xc>
 80061a6:	89a3      	ldrh	r3, [r4, #12]
 80061a8:	6020      	str	r0, [r4, #0]
 80061aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80061ae:	81a3      	strh	r3, [r4, #12]
 80061b0:	9b01      	ldr	r3, [sp, #4]
 80061b2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80061b6:	b15b      	cbz	r3, 80061d0 <__smakebuf_r+0x70>
 80061b8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80061bc:	4630      	mov	r0, r6
 80061be:	f000 f81d 	bl	80061fc <_isatty_r>
 80061c2:	b128      	cbz	r0, 80061d0 <__smakebuf_r+0x70>
 80061c4:	89a3      	ldrh	r3, [r4, #12]
 80061c6:	f023 0303 	bic.w	r3, r3, #3
 80061ca:	f043 0301 	orr.w	r3, r3, #1
 80061ce:	81a3      	strh	r3, [r4, #12]
 80061d0:	89a3      	ldrh	r3, [r4, #12]
 80061d2:	431d      	orrs	r5, r3
 80061d4:	81a5      	strh	r5, [r4, #12]
 80061d6:	e7cf      	b.n	8006178 <__smakebuf_r+0x18>

080061d8 <_fstat_r>:
 80061d8:	b538      	push	{r3, r4, r5, lr}
 80061da:	4d07      	ldr	r5, [pc, #28]	@ (80061f8 <_fstat_r+0x20>)
 80061dc:	2300      	movs	r3, #0
 80061de:	4604      	mov	r4, r0
 80061e0:	4608      	mov	r0, r1
 80061e2:	4611      	mov	r1, r2
 80061e4:	602b      	str	r3, [r5, #0]
 80061e6:	f7fa ff0a 	bl	8000ffe <_fstat>
 80061ea:	1c43      	adds	r3, r0, #1
 80061ec:	d102      	bne.n	80061f4 <_fstat_r+0x1c>
 80061ee:	682b      	ldr	r3, [r5, #0]
 80061f0:	b103      	cbz	r3, 80061f4 <_fstat_r+0x1c>
 80061f2:	6023      	str	r3, [r4, #0]
 80061f4:	bd38      	pop	{r3, r4, r5, pc}
 80061f6:	bf00      	nop
 80061f8:	200003bc 	.word	0x200003bc

080061fc <_isatty_r>:
 80061fc:	b538      	push	{r3, r4, r5, lr}
 80061fe:	4d06      	ldr	r5, [pc, #24]	@ (8006218 <_isatty_r+0x1c>)
 8006200:	2300      	movs	r3, #0
 8006202:	4604      	mov	r4, r0
 8006204:	4608      	mov	r0, r1
 8006206:	602b      	str	r3, [r5, #0]
 8006208:	f7fa ff09 	bl	800101e <_isatty>
 800620c:	1c43      	adds	r3, r0, #1
 800620e:	d102      	bne.n	8006216 <_isatty_r+0x1a>
 8006210:	682b      	ldr	r3, [r5, #0]
 8006212:	b103      	cbz	r3, 8006216 <_isatty_r+0x1a>
 8006214:	6023      	str	r3, [r4, #0]
 8006216:	bd38      	pop	{r3, r4, r5, pc}
 8006218:	200003bc 	.word	0x200003bc

0800621c <abort>:
 800621c:	b508      	push	{r3, lr}
 800621e:	2006      	movs	r0, #6
 8006220:	f000 f82c 	bl	800627c <raise>
 8006224:	2001      	movs	r0, #1
 8006226:	f7fa fe9a 	bl	8000f5e <_exit>

0800622a <_raise_r>:
 800622a:	291f      	cmp	r1, #31
 800622c:	b538      	push	{r3, r4, r5, lr}
 800622e:	4605      	mov	r5, r0
 8006230:	460c      	mov	r4, r1
 8006232:	d904      	bls.n	800623e <_raise_r+0x14>
 8006234:	2316      	movs	r3, #22
 8006236:	6003      	str	r3, [r0, #0]
 8006238:	f04f 30ff 	mov.w	r0, #4294967295
 800623c:	bd38      	pop	{r3, r4, r5, pc}
 800623e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8006240:	b112      	cbz	r2, 8006248 <_raise_r+0x1e>
 8006242:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006246:	b94b      	cbnz	r3, 800625c <_raise_r+0x32>
 8006248:	4628      	mov	r0, r5
 800624a:	f000 f831 	bl	80062b0 <_getpid_r>
 800624e:	4622      	mov	r2, r4
 8006250:	4601      	mov	r1, r0
 8006252:	4628      	mov	r0, r5
 8006254:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006258:	f000 b818 	b.w	800628c <_kill_r>
 800625c:	2b01      	cmp	r3, #1
 800625e:	d00a      	beq.n	8006276 <_raise_r+0x4c>
 8006260:	1c59      	adds	r1, r3, #1
 8006262:	d103      	bne.n	800626c <_raise_r+0x42>
 8006264:	2316      	movs	r3, #22
 8006266:	6003      	str	r3, [r0, #0]
 8006268:	2001      	movs	r0, #1
 800626a:	e7e7      	b.n	800623c <_raise_r+0x12>
 800626c:	2100      	movs	r1, #0
 800626e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8006272:	4620      	mov	r0, r4
 8006274:	4798      	blx	r3
 8006276:	2000      	movs	r0, #0
 8006278:	e7e0      	b.n	800623c <_raise_r+0x12>
	...

0800627c <raise>:
 800627c:	4b02      	ldr	r3, [pc, #8]	@ (8006288 <raise+0xc>)
 800627e:	4601      	mov	r1, r0
 8006280:	6818      	ldr	r0, [r3, #0]
 8006282:	f7ff bfd2 	b.w	800622a <_raise_r>
 8006286:	bf00      	nop
 8006288:	20000018 	.word	0x20000018

0800628c <_kill_r>:
 800628c:	b538      	push	{r3, r4, r5, lr}
 800628e:	4d07      	ldr	r5, [pc, #28]	@ (80062ac <_kill_r+0x20>)
 8006290:	2300      	movs	r3, #0
 8006292:	4604      	mov	r4, r0
 8006294:	4608      	mov	r0, r1
 8006296:	4611      	mov	r1, r2
 8006298:	602b      	str	r3, [r5, #0]
 800629a:	f7fa fe50 	bl	8000f3e <_kill>
 800629e:	1c43      	adds	r3, r0, #1
 80062a0:	d102      	bne.n	80062a8 <_kill_r+0x1c>
 80062a2:	682b      	ldr	r3, [r5, #0]
 80062a4:	b103      	cbz	r3, 80062a8 <_kill_r+0x1c>
 80062a6:	6023      	str	r3, [r4, #0]
 80062a8:	bd38      	pop	{r3, r4, r5, pc}
 80062aa:	bf00      	nop
 80062ac:	200003bc 	.word	0x200003bc

080062b0 <_getpid_r>:
 80062b0:	f7fa be3d 	b.w	8000f2e <_getpid>

080062b4 <_init>:
 80062b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062b6:	bf00      	nop
 80062b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062ba:	bc08      	pop	{r3}
 80062bc:	469e      	mov	lr, r3
 80062be:	4770      	bx	lr

080062c0 <_fini>:
 80062c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062c2:	bf00      	nop
 80062c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062c6:	bc08      	pop	{r3}
 80062c8:	469e      	mov	lr, r3
 80062ca:	4770      	bx	lr
