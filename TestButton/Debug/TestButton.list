
TestButton.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001d84  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08001f18  08001f18  00002f18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001f48  08001f48  0000300c  2**0
                  CONTENTS
  4 .ARM          00000000  08001f48  08001f48  0000300c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001f48  08001f48  0000300c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001f48  08001f48  00002f48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001f4c  08001f4c  00002f4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08001f50  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000300c  2**0
                  CONTENTS
 10 .bss          00000020  2000000c  2000000c  0000300c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000002c  2000002c  0000300c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000300c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00003caf  00000000  00000000  0000303c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000e6b  00000000  00000000  00006ceb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000003f0  00000000  00000000  00007b58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000002d1  00000000  00000000  00007f48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001e2ba  00000000  00000000  00008219  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00005407  00000000  00000000  000264d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b7050  00000000  00000000  0002b8da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000e292a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000de8  00000000  00000000  000e2970  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007e  00000000  00000000  000e3758  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08001f00 	.word	0x08001f00

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08001f00 	.word	0x08001f00

080001d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001d8:	f000 f93c 	bl	8000454 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001dc:	f000 f81a 	bl	8000214 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001e0:	f000 f854 	bl	800028c <MX_GPIO_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	if (HAL_GPIO_ReadPin(B1_USER_GPIO_Port, B1_USER_Pin) == PRESSED){
 80001e4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80001e8:	4809      	ldr	r0, [pc, #36]	@ (8000210 <main+0x3c>)
 80001ea:	f000 fc09 	bl	8000a00 <HAL_GPIO_ReadPin>
 80001ee:	4603      	mov	r3, r0
 80001f0:	2b00      	cmp	r3, #0
 80001f2:	d106      	bne.n	8000202 <main+0x2e>
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, SET);
 80001f4:	2201      	movs	r2, #1
 80001f6:	2120      	movs	r1, #32
 80001f8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80001fc:	f000 fc18 	bl	8000a30 <HAL_GPIO_WritePin>
 8000200:	e7f0      	b.n	80001e4 <main+0x10>
	}
	else{
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, RESET);
 8000202:	2200      	movs	r2, #0
 8000204:	2120      	movs	r1, #32
 8000206:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800020a:	f000 fc11 	bl	8000a30 <HAL_GPIO_WritePin>
	if (HAL_GPIO_ReadPin(B1_USER_GPIO_Port, B1_USER_Pin) == PRESSED){
 800020e:	e7e9      	b.n	80001e4 <main+0x10>
 8000210:	48000800 	.word	0x48000800

08000214 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000214:	b580      	push	{r7, lr}
 8000216:	b090      	sub	sp, #64	@ 0x40
 8000218:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800021a:	f107 0318 	add.w	r3, r7, #24
 800021e:	2228      	movs	r2, #40	@ 0x28
 8000220:	2100      	movs	r1, #0
 8000222:	4618      	mov	r0, r3
 8000224:	f001 fe40 	bl	8001ea8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000228:	1d3b      	adds	r3, r7, #4
 800022a:	2200      	movs	r2, #0
 800022c:	601a      	str	r2, [r3, #0]
 800022e:	605a      	str	r2, [r3, #4]
 8000230:	609a      	str	r2, [r3, #8]
 8000232:	60da      	str	r2, [r3, #12]
 8000234:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000236:	2302      	movs	r3, #2
 8000238:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800023a:	2301      	movs	r3, #1
 800023c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800023e:	2310      	movs	r3, #16
 8000240:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000242:	2300      	movs	r3, #0
 8000244:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000246:	f107 0318 	add.w	r3, r7, #24
 800024a:	4618      	mov	r0, r3
 800024c:	f000 fc08 	bl	8000a60 <HAL_RCC_OscConfig>
 8000250:	4603      	mov	r3, r0
 8000252:	2b00      	cmp	r3, #0
 8000254:	d001      	beq.n	800025a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000256:	f000 f867 	bl	8000328 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800025a:	230f      	movs	r3, #15
 800025c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800025e:	2300      	movs	r3, #0
 8000260:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000262:	2300      	movs	r3, #0
 8000264:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000266:	2300      	movs	r3, #0
 8000268:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800026a:	2300      	movs	r3, #0
 800026c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800026e:	1d3b      	adds	r3, r7, #4
 8000270:	2100      	movs	r1, #0
 8000272:	4618      	mov	r0, r3
 8000274:	f001 fc48 	bl	8001b08 <HAL_RCC_ClockConfig>
 8000278:	4603      	mov	r3, r0
 800027a:	2b00      	cmp	r3, #0
 800027c:	d001      	beq.n	8000282 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800027e:	f000 f853 	bl	8000328 <Error_Handler>
  }
}
 8000282:	bf00      	nop
 8000284:	3740      	adds	r7, #64	@ 0x40
 8000286:	46bd      	mov	sp, r7
 8000288:	bd80      	pop	{r7, pc}
	...

0800028c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800028c:	b580      	push	{r7, lr}
 800028e:	b088      	sub	sp, #32
 8000290:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000292:	f107 030c 	add.w	r3, r7, #12
 8000296:	2200      	movs	r2, #0
 8000298:	601a      	str	r2, [r3, #0]
 800029a:	605a      	str	r2, [r3, #4]
 800029c:	609a      	str	r2, [r3, #8]
 800029e:	60da      	str	r2, [r3, #12]
 80002a0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002a2:	4b1f      	ldr	r3, [pc, #124]	@ (8000320 <MX_GPIO_Init+0x94>)
 80002a4:	695b      	ldr	r3, [r3, #20]
 80002a6:	4a1e      	ldr	r2, [pc, #120]	@ (8000320 <MX_GPIO_Init+0x94>)
 80002a8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80002ac:	6153      	str	r3, [r2, #20]
 80002ae:	4b1c      	ldr	r3, [pc, #112]	@ (8000320 <MX_GPIO_Init+0x94>)
 80002b0:	695b      	ldr	r3, [r3, #20]
 80002b2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80002b6:	60bb      	str	r3, [r7, #8]
 80002b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002ba:	4b19      	ldr	r3, [pc, #100]	@ (8000320 <MX_GPIO_Init+0x94>)
 80002bc:	695b      	ldr	r3, [r3, #20]
 80002be:	4a18      	ldr	r2, [pc, #96]	@ (8000320 <MX_GPIO_Init+0x94>)
 80002c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80002c4:	6153      	str	r3, [r2, #20]
 80002c6:	4b16      	ldr	r3, [pc, #88]	@ (8000320 <MX_GPIO_Init+0x94>)
 80002c8:	695b      	ldr	r3, [r3, #20]
 80002ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80002ce:	607b      	str	r3, [r7, #4]
 80002d0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80002d2:	2200      	movs	r2, #0
 80002d4:	2120      	movs	r1, #32
 80002d6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80002da:	f000 fba9 	bl	8000a30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_USER_Pin */
  GPIO_InitStruct.Pin = B1_USER_Pin;
 80002de:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80002e2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80002e4:	2300      	movs	r3, #0
 80002e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002e8:	2300      	movs	r3, #0
 80002ea:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(B1_USER_GPIO_Port, &GPIO_InitStruct);
 80002ec:	f107 030c 	add.w	r3, r7, #12
 80002f0:	4619      	mov	r1, r3
 80002f2:	480c      	ldr	r0, [pc, #48]	@ (8000324 <MX_GPIO_Init+0x98>)
 80002f4:	f000 f9fa 	bl	80006ec <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80002f8:	2320      	movs	r3, #32
 80002fa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002fc:	2301      	movs	r3, #1
 80002fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000300:	2300      	movs	r3, #0
 8000302:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000304:	2300      	movs	r3, #0
 8000306:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000308:	f107 030c 	add.w	r3, r7, #12
 800030c:	4619      	mov	r1, r3
 800030e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000312:	f000 f9eb 	bl	80006ec <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000316:	bf00      	nop
 8000318:	3720      	adds	r7, #32
 800031a:	46bd      	mov	sp, r7
 800031c:	bd80      	pop	{r7, pc}
 800031e:	bf00      	nop
 8000320:	40021000 	.word	0x40021000
 8000324:	48000800 	.word	0x48000800

08000328 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000328:	b480      	push	{r7}
 800032a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800032c:	b672      	cpsid	i
}
 800032e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000330:	bf00      	nop
 8000332:	e7fd      	b.n	8000330 <Error_Handler+0x8>

08000334 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000334:	b480      	push	{r7}
 8000336:	b083      	sub	sp, #12
 8000338:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800033a:	4b0f      	ldr	r3, [pc, #60]	@ (8000378 <HAL_MspInit+0x44>)
 800033c:	699b      	ldr	r3, [r3, #24]
 800033e:	4a0e      	ldr	r2, [pc, #56]	@ (8000378 <HAL_MspInit+0x44>)
 8000340:	f043 0301 	orr.w	r3, r3, #1
 8000344:	6193      	str	r3, [r2, #24]
 8000346:	4b0c      	ldr	r3, [pc, #48]	@ (8000378 <HAL_MspInit+0x44>)
 8000348:	699b      	ldr	r3, [r3, #24]
 800034a:	f003 0301 	and.w	r3, r3, #1
 800034e:	607b      	str	r3, [r7, #4]
 8000350:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000352:	4b09      	ldr	r3, [pc, #36]	@ (8000378 <HAL_MspInit+0x44>)
 8000354:	69db      	ldr	r3, [r3, #28]
 8000356:	4a08      	ldr	r2, [pc, #32]	@ (8000378 <HAL_MspInit+0x44>)
 8000358:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800035c:	61d3      	str	r3, [r2, #28]
 800035e:	4b06      	ldr	r3, [pc, #24]	@ (8000378 <HAL_MspInit+0x44>)
 8000360:	69db      	ldr	r3, [r3, #28]
 8000362:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000366:	603b      	str	r3, [r7, #0]
 8000368:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800036a:	bf00      	nop
 800036c:	370c      	adds	r7, #12
 800036e:	46bd      	mov	sp, r7
 8000370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000374:	4770      	bx	lr
 8000376:	bf00      	nop
 8000378:	40021000 	.word	0x40021000

0800037c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800037c:	b480      	push	{r7}
 800037e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000380:	bf00      	nop
 8000382:	e7fd      	b.n	8000380 <NMI_Handler+0x4>

08000384 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000384:	b480      	push	{r7}
 8000386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000388:	bf00      	nop
 800038a:	e7fd      	b.n	8000388 <HardFault_Handler+0x4>

0800038c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800038c:	b480      	push	{r7}
 800038e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000390:	bf00      	nop
 8000392:	e7fd      	b.n	8000390 <MemManage_Handler+0x4>

08000394 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000394:	b480      	push	{r7}
 8000396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000398:	bf00      	nop
 800039a:	e7fd      	b.n	8000398 <BusFault_Handler+0x4>

0800039c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800039c:	b480      	push	{r7}
 800039e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80003a0:	bf00      	nop
 80003a2:	e7fd      	b.n	80003a0 <UsageFault_Handler+0x4>

080003a4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80003a4:	b480      	push	{r7}
 80003a6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80003a8:	bf00      	nop
 80003aa:	46bd      	mov	sp, r7
 80003ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b0:	4770      	bx	lr

080003b2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80003b2:	b480      	push	{r7}
 80003b4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80003b6:	bf00      	nop
 80003b8:	46bd      	mov	sp, r7
 80003ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003be:	4770      	bx	lr

080003c0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80003c0:	b480      	push	{r7}
 80003c2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80003c4:	bf00      	nop
 80003c6:	46bd      	mov	sp, r7
 80003c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003cc:	4770      	bx	lr

080003ce <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80003ce:	b580      	push	{r7, lr}
 80003d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80003d2:	f000 f885 	bl	80004e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80003d6:	bf00      	nop
 80003d8:	bd80      	pop	{r7, pc}
	...

080003dc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80003dc:	b480      	push	{r7}
 80003de:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80003e0:	4b06      	ldr	r3, [pc, #24]	@ (80003fc <SystemInit+0x20>)
 80003e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80003e6:	4a05      	ldr	r2, [pc, #20]	@ (80003fc <SystemInit+0x20>)
 80003e8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80003ec:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80003f0:	bf00      	nop
 80003f2:	46bd      	mov	sp, r7
 80003f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f8:	4770      	bx	lr
 80003fa:	bf00      	nop
 80003fc:	e000ed00 	.word	0xe000ed00

08000400 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000400:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000438 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000404:	f7ff ffea 	bl	80003dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000408:	480c      	ldr	r0, [pc, #48]	@ (800043c <LoopForever+0x6>)
  ldr r1, =_edata
 800040a:	490d      	ldr	r1, [pc, #52]	@ (8000440 <LoopForever+0xa>)
  ldr r2, =_sidata
 800040c:	4a0d      	ldr	r2, [pc, #52]	@ (8000444 <LoopForever+0xe>)
  movs r3, #0
 800040e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000410:	e002      	b.n	8000418 <LoopCopyDataInit>

08000412 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000412:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000414:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000416:	3304      	adds	r3, #4

08000418 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000418:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800041a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800041c:	d3f9      	bcc.n	8000412 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800041e:	4a0a      	ldr	r2, [pc, #40]	@ (8000448 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000420:	4c0a      	ldr	r4, [pc, #40]	@ (800044c <LoopForever+0x16>)
  movs r3, #0
 8000422:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000424:	e001      	b.n	800042a <LoopFillZerobss>

08000426 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000426:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000428:	3204      	adds	r2, #4

0800042a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800042a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800042c:	d3fb      	bcc.n	8000426 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800042e:	f001 fd43 	bl	8001eb8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000432:	f7ff fecf 	bl	80001d4 <main>

08000436 <LoopForever>:

LoopForever:
    b LoopForever
 8000436:	e7fe      	b.n	8000436 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000438:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800043c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000440:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000444:	08001f50 	.word	0x08001f50
  ldr r2, =_sbss
 8000448:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800044c:	2000002c 	.word	0x2000002c

08000450 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000450:	e7fe      	b.n	8000450 <ADC1_2_IRQHandler>
	...

08000454 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000458:	4b08      	ldr	r3, [pc, #32]	@ (800047c <HAL_Init+0x28>)
 800045a:	681b      	ldr	r3, [r3, #0]
 800045c:	4a07      	ldr	r2, [pc, #28]	@ (800047c <HAL_Init+0x28>)
 800045e:	f043 0310 	orr.w	r3, r3, #16
 8000462:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000464:	2003      	movs	r0, #3
 8000466:	f000 f90d 	bl	8000684 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800046a:	200f      	movs	r0, #15
 800046c:	f000 f808 	bl	8000480 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000470:	f7ff ff60 	bl	8000334 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000474:	2300      	movs	r3, #0
}
 8000476:	4618      	mov	r0, r3
 8000478:	bd80      	pop	{r7, pc}
 800047a:	bf00      	nop
 800047c:	40022000 	.word	0x40022000

08000480 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000480:	b580      	push	{r7, lr}
 8000482:	b082      	sub	sp, #8
 8000484:	af00      	add	r7, sp, #0
 8000486:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000488:	4b12      	ldr	r3, [pc, #72]	@ (80004d4 <HAL_InitTick+0x54>)
 800048a:	681a      	ldr	r2, [r3, #0]
 800048c:	4b12      	ldr	r3, [pc, #72]	@ (80004d8 <HAL_InitTick+0x58>)
 800048e:	781b      	ldrb	r3, [r3, #0]
 8000490:	4619      	mov	r1, r3
 8000492:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000496:	fbb3 f3f1 	udiv	r3, r3, r1
 800049a:	fbb2 f3f3 	udiv	r3, r2, r3
 800049e:	4618      	mov	r0, r3
 80004a0:	f000 f917 	bl	80006d2 <HAL_SYSTICK_Config>
 80004a4:	4603      	mov	r3, r0
 80004a6:	2b00      	cmp	r3, #0
 80004a8:	d001      	beq.n	80004ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80004aa:	2301      	movs	r3, #1
 80004ac:	e00e      	b.n	80004cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	2b0f      	cmp	r3, #15
 80004b2:	d80a      	bhi.n	80004ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80004b4:	2200      	movs	r2, #0
 80004b6:	6879      	ldr	r1, [r7, #4]
 80004b8:	f04f 30ff 	mov.w	r0, #4294967295
 80004bc:	f000 f8ed 	bl	800069a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80004c0:	4a06      	ldr	r2, [pc, #24]	@ (80004dc <HAL_InitTick+0x5c>)
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80004c6:	2300      	movs	r3, #0
 80004c8:	e000      	b.n	80004cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80004ca:	2301      	movs	r3, #1
}
 80004cc:	4618      	mov	r0, r3
 80004ce:	3708      	adds	r7, #8
 80004d0:	46bd      	mov	sp, r7
 80004d2:	bd80      	pop	{r7, pc}
 80004d4:	20000000 	.word	0x20000000
 80004d8:	20000008 	.word	0x20000008
 80004dc:	20000004 	.word	0x20000004

080004e0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80004e0:	b480      	push	{r7}
 80004e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80004e4:	4b06      	ldr	r3, [pc, #24]	@ (8000500 <HAL_IncTick+0x20>)
 80004e6:	781b      	ldrb	r3, [r3, #0]
 80004e8:	461a      	mov	r2, r3
 80004ea:	4b06      	ldr	r3, [pc, #24]	@ (8000504 <HAL_IncTick+0x24>)
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	4413      	add	r3, r2
 80004f0:	4a04      	ldr	r2, [pc, #16]	@ (8000504 <HAL_IncTick+0x24>)
 80004f2:	6013      	str	r3, [r2, #0]
}
 80004f4:	bf00      	nop
 80004f6:	46bd      	mov	sp, r7
 80004f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop
 8000500:	20000008 	.word	0x20000008
 8000504:	20000028 	.word	0x20000028

08000508 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000508:	b480      	push	{r7}
 800050a:	af00      	add	r7, sp, #0
  return uwTick;  
 800050c:	4b03      	ldr	r3, [pc, #12]	@ (800051c <HAL_GetTick+0x14>)
 800050e:	681b      	ldr	r3, [r3, #0]
}
 8000510:	4618      	mov	r0, r3
 8000512:	46bd      	mov	sp, r7
 8000514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop
 800051c:	20000028 	.word	0x20000028

08000520 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000520:	b480      	push	{r7}
 8000522:	b085      	sub	sp, #20
 8000524:	af00      	add	r7, sp, #0
 8000526:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	f003 0307 	and.w	r3, r3, #7
 800052e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000530:	4b0c      	ldr	r3, [pc, #48]	@ (8000564 <__NVIC_SetPriorityGrouping+0x44>)
 8000532:	68db      	ldr	r3, [r3, #12]
 8000534:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000536:	68ba      	ldr	r2, [r7, #8]
 8000538:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800053c:	4013      	ands	r3, r2
 800053e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000540:	68fb      	ldr	r3, [r7, #12]
 8000542:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000544:	68bb      	ldr	r3, [r7, #8]
 8000546:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000548:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800054c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000550:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000552:	4a04      	ldr	r2, [pc, #16]	@ (8000564 <__NVIC_SetPriorityGrouping+0x44>)
 8000554:	68bb      	ldr	r3, [r7, #8]
 8000556:	60d3      	str	r3, [r2, #12]
}
 8000558:	bf00      	nop
 800055a:	3714      	adds	r7, #20
 800055c:	46bd      	mov	sp, r7
 800055e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000562:	4770      	bx	lr
 8000564:	e000ed00 	.word	0xe000ed00

08000568 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000568:	b480      	push	{r7}
 800056a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800056c:	4b04      	ldr	r3, [pc, #16]	@ (8000580 <__NVIC_GetPriorityGrouping+0x18>)
 800056e:	68db      	ldr	r3, [r3, #12]
 8000570:	0a1b      	lsrs	r3, r3, #8
 8000572:	f003 0307 	and.w	r3, r3, #7
}
 8000576:	4618      	mov	r0, r3
 8000578:	46bd      	mov	sp, r7
 800057a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057e:	4770      	bx	lr
 8000580:	e000ed00 	.word	0xe000ed00

08000584 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000584:	b480      	push	{r7}
 8000586:	b083      	sub	sp, #12
 8000588:	af00      	add	r7, sp, #0
 800058a:	4603      	mov	r3, r0
 800058c:	6039      	str	r1, [r7, #0]
 800058e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000590:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000594:	2b00      	cmp	r3, #0
 8000596:	db0a      	blt.n	80005ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000598:	683b      	ldr	r3, [r7, #0]
 800059a:	b2da      	uxtb	r2, r3
 800059c:	490c      	ldr	r1, [pc, #48]	@ (80005d0 <__NVIC_SetPriority+0x4c>)
 800059e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005a2:	0112      	lsls	r2, r2, #4
 80005a4:	b2d2      	uxtb	r2, r2
 80005a6:	440b      	add	r3, r1
 80005a8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80005ac:	e00a      	b.n	80005c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005ae:	683b      	ldr	r3, [r7, #0]
 80005b0:	b2da      	uxtb	r2, r3
 80005b2:	4908      	ldr	r1, [pc, #32]	@ (80005d4 <__NVIC_SetPriority+0x50>)
 80005b4:	79fb      	ldrb	r3, [r7, #7]
 80005b6:	f003 030f 	and.w	r3, r3, #15
 80005ba:	3b04      	subs	r3, #4
 80005bc:	0112      	lsls	r2, r2, #4
 80005be:	b2d2      	uxtb	r2, r2
 80005c0:	440b      	add	r3, r1
 80005c2:	761a      	strb	r2, [r3, #24]
}
 80005c4:	bf00      	nop
 80005c6:	370c      	adds	r7, #12
 80005c8:	46bd      	mov	sp, r7
 80005ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ce:	4770      	bx	lr
 80005d0:	e000e100 	.word	0xe000e100
 80005d4:	e000ed00 	.word	0xe000ed00

080005d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80005d8:	b480      	push	{r7}
 80005da:	b089      	sub	sp, #36	@ 0x24
 80005dc:	af00      	add	r7, sp, #0
 80005de:	60f8      	str	r0, [r7, #12]
 80005e0:	60b9      	str	r1, [r7, #8]
 80005e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80005e4:	68fb      	ldr	r3, [r7, #12]
 80005e6:	f003 0307 	and.w	r3, r3, #7
 80005ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005ec:	69fb      	ldr	r3, [r7, #28]
 80005ee:	f1c3 0307 	rsb	r3, r3, #7
 80005f2:	2b04      	cmp	r3, #4
 80005f4:	bf28      	it	cs
 80005f6:	2304      	movcs	r3, #4
 80005f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005fa:	69fb      	ldr	r3, [r7, #28]
 80005fc:	3304      	adds	r3, #4
 80005fe:	2b06      	cmp	r3, #6
 8000600:	d902      	bls.n	8000608 <NVIC_EncodePriority+0x30>
 8000602:	69fb      	ldr	r3, [r7, #28]
 8000604:	3b03      	subs	r3, #3
 8000606:	e000      	b.n	800060a <NVIC_EncodePriority+0x32>
 8000608:	2300      	movs	r3, #0
 800060a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800060c:	f04f 32ff 	mov.w	r2, #4294967295
 8000610:	69bb      	ldr	r3, [r7, #24]
 8000612:	fa02 f303 	lsl.w	r3, r2, r3
 8000616:	43da      	mvns	r2, r3
 8000618:	68bb      	ldr	r3, [r7, #8]
 800061a:	401a      	ands	r2, r3
 800061c:	697b      	ldr	r3, [r7, #20]
 800061e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000620:	f04f 31ff 	mov.w	r1, #4294967295
 8000624:	697b      	ldr	r3, [r7, #20]
 8000626:	fa01 f303 	lsl.w	r3, r1, r3
 800062a:	43d9      	mvns	r1, r3
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000630:	4313      	orrs	r3, r2
         );
}
 8000632:	4618      	mov	r0, r3
 8000634:	3724      	adds	r7, #36	@ 0x24
 8000636:	46bd      	mov	sp, r7
 8000638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063c:	4770      	bx	lr
	...

08000640 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b082      	sub	sp, #8
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	3b01      	subs	r3, #1
 800064c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000650:	d301      	bcc.n	8000656 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000652:	2301      	movs	r3, #1
 8000654:	e00f      	b.n	8000676 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000656:	4a0a      	ldr	r2, [pc, #40]	@ (8000680 <SysTick_Config+0x40>)
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	3b01      	subs	r3, #1
 800065c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800065e:	210f      	movs	r1, #15
 8000660:	f04f 30ff 	mov.w	r0, #4294967295
 8000664:	f7ff ff8e 	bl	8000584 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000668:	4b05      	ldr	r3, [pc, #20]	@ (8000680 <SysTick_Config+0x40>)
 800066a:	2200      	movs	r2, #0
 800066c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800066e:	4b04      	ldr	r3, [pc, #16]	@ (8000680 <SysTick_Config+0x40>)
 8000670:	2207      	movs	r2, #7
 8000672:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000674:	2300      	movs	r3, #0
}
 8000676:	4618      	mov	r0, r3
 8000678:	3708      	adds	r7, #8
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	e000e010 	.word	0xe000e010

08000684 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800068c:	6878      	ldr	r0, [r7, #4]
 800068e:	f7ff ff47 	bl	8000520 <__NVIC_SetPriorityGrouping>
}
 8000692:	bf00      	nop
 8000694:	3708      	adds	r7, #8
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}

0800069a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800069a:	b580      	push	{r7, lr}
 800069c:	b086      	sub	sp, #24
 800069e:	af00      	add	r7, sp, #0
 80006a0:	4603      	mov	r3, r0
 80006a2:	60b9      	str	r1, [r7, #8]
 80006a4:	607a      	str	r2, [r7, #4]
 80006a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80006a8:	2300      	movs	r3, #0
 80006aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80006ac:	f7ff ff5c 	bl	8000568 <__NVIC_GetPriorityGrouping>
 80006b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80006b2:	687a      	ldr	r2, [r7, #4]
 80006b4:	68b9      	ldr	r1, [r7, #8]
 80006b6:	6978      	ldr	r0, [r7, #20]
 80006b8:	f7ff ff8e 	bl	80005d8 <NVIC_EncodePriority>
 80006bc:	4602      	mov	r2, r0
 80006be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80006c2:	4611      	mov	r1, r2
 80006c4:	4618      	mov	r0, r3
 80006c6:	f7ff ff5d 	bl	8000584 <__NVIC_SetPriority>
}
 80006ca:	bf00      	nop
 80006cc:	3718      	adds	r7, #24
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}

080006d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80006d2:	b580      	push	{r7, lr}
 80006d4:	b082      	sub	sp, #8
 80006d6:	af00      	add	r7, sp, #0
 80006d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80006da:	6878      	ldr	r0, [r7, #4]
 80006dc:	f7ff ffb0 	bl	8000640 <SysTick_Config>
 80006e0:	4603      	mov	r3, r0
}
 80006e2:	4618      	mov	r0, r3
 80006e4:	3708      	adds	r7, #8
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}
	...

080006ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80006ec:	b480      	push	{r7}
 80006ee:	b087      	sub	sp, #28
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
 80006f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80006f6:	2300      	movs	r3, #0
 80006f8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80006fa:	e160      	b.n	80009be <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80006fc:	683b      	ldr	r3, [r7, #0]
 80006fe:	681a      	ldr	r2, [r3, #0]
 8000700:	2101      	movs	r1, #1
 8000702:	697b      	ldr	r3, [r7, #20]
 8000704:	fa01 f303 	lsl.w	r3, r1, r3
 8000708:	4013      	ands	r3, r2
 800070a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800070c:	68fb      	ldr	r3, [r7, #12]
 800070e:	2b00      	cmp	r3, #0
 8000710:	f000 8152 	beq.w	80009b8 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000714:	683b      	ldr	r3, [r7, #0]
 8000716:	685b      	ldr	r3, [r3, #4]
 8000718:	f003 0303 	and.w	r3, r3, #3
 800071c:	2b01      	cmp	r3, #1
 800071e:	d005      	beq.n	800072c <HAL_GPIO_Init+0x40>
 8000720:	683b      	ldr	r3, [r7, #0]
 8000722:	685b      	ldr	r3, [r3, #4]
 8000724:	f003 0303 	and.w	r3, r3, #3
 8000728:	2b02      	cmp	r3, #2
 800072a:	d130      	bne.n	800078e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	689b      	ldr	r3, [r3, #8]
 8000730:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000732:	697b      	ldr	r3, [r7, #20]
 8000734:	005b      	lsls	r3, r3, #1
 8000736:	2203      	movs	r2, #3
 8000738:	fa02 f303 	lsl.w	r3, r2, r3
 800073c:	43db      	mvns	r3, r3
 800073e:	693a      	ldr	r2, [r7, #16]
 8000740:	4013      	ands	r3, r2
 8000742:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000744:	683b      	ldr	r3, [r7, #0]
 8000746:	68da      	ldr	r2, [r3, #12]
 8000748:	697b      	ldr	r3, [r7, #20]
 800074a:	005b      	lsls	r3, r3, #1
 800074c:	fa02 f303 	lsl.w	r3, r2, r3
 8000750:	693a      	ldr	r2, [r7, #16]
 8000752:	4313      	orrs	r3, r2
 8000754:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	693a      	ldr	r2, [r7, #16]
 800075a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	685b      	ldr	r3, [r3, #4]
 8000760:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000762:	2201      	movs	r2, #1
 8000764:	697b      	ldr	r3, [r7, #20]
 8000766:	fa02 f303 	lsl.w	r3, r2, r3
 800076a:	43db      	mvns	r3, r3
 800076c:	693a      	ldr	r2, [r7, #16]
 800076e:	4013      	ands	r3, r2
 8000770:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000772:	683b      	ldr	r3, [r7, #0]
 8000774:	685b      	ldr	r3, [r3, #4]
 8000776:	091b      	lsrs	r3, r3, #4
 8000778:	f003 0201 	and.w	r2, r3, #1
 800077c:	697b      	ldr	r3, [r7, #20]
 800077e:	fa02 f303 	lsl.w	r3, r2, r3
 8000782:	693a      	ldr	r2, [r7, #16]
 8000784:	4313      	orrs	r3, r2
 8000786:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	693a      	ldr	r2, [r7, #16]
 800078c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800078e:	683b      	ldr	r3, [r7, #0]
 8000790:	685b      	ldr	r3, [r3, #4]
 8000792:	f003 0303 	and.w	r3, r3, #3
 8000796:	2b03      	cmp	r3, #3
 8000798:	d017      	beq.n	80007ca <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	68db      	ldr	r3, [r3, #12]
 800079e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80007a0:	697b      	ldr	r3, [r7, #20]
 80007a2:	005b      	lsls	r3, r3, #1
 80007a4:	2203      	movs	r2, #3
 80007a6:	fa02 f303 	lsl.w	r3, r2, r3
 80007aa:	43db      	mvns	r3, r3
 80007ac:	693a      	ldr	r2, [r7, #16]
 80007ae:	4013      	ands	r3, r2
 80007b0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80007b2:	683b      	ldr	r3, [r7, #0]
 80007b4:	689a      	ldr	r2, [r3, #8]
 80007b6:	697b      	ldr	r3, [r7, #20]
 80007b8:	005b      	lsls	r3, r3, #1
 80007ba:	fa02 f303 	lsl.w	r3, r2, r3
 80007be:	693a      	ldr	r2, [r7, #16]
 80007c0:	4313      	orrs	r3, r2
 80007c2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	693a      	ldr	r2, [r7, #16]
 80007c8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80007ca:	683b      	ldr	r3, [r7, #0]
 80007cc:	685b      	ldr	r3, [r3, #4]
 80007ce:	f003 0303 	and.w	r3, r3, #3
 80007d2:	2b02      	cmp	r3, #2
 80007d4:	d123      	bne.n	800081e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80007d6:	697b      	ldr	r3, [r7, #20]
 80007d8:	08da      	lsrs	r2, r3, #3
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	3208      	adds	r2, #8
 80007de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80007e2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80007e4:	697b      	ldr	r3, [r7, #20]
 80007e6:	f003 0307 	and.w	r3, r3, #7
 80007ea:	009b      	lsls	r3, r3, #2
 80007ec:	220f      	movs	r2, #15
 80007ee:	fa02 f303 	lsl.w	r3, r2, r3
 80007f2:	43db      	mvns	r3, r3
 80007f4:	693a      	ldr	r2, [r7, #16]
 80007f6:	4013      	ands	r3, r2
 80007f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80007fa:	683b      	ldr	r3, [r7, #0]
 80007fc:	691a      	ldr	r2, [r3, #16]
 80007fe:	697b      	ldr	r3, [r7, #20]
 8000800:	f003 0307 	and.w	r3, r3, #7
 8000804:	009b      	lsls	r3, r3, #2
 8000806:	fa02 f303 	lsl.w	r3, r2, r3
 800080a:	693a      	ldr	r2, [r7, #16]
 800080c:	4313      	orrs	r3, r2
 800080e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000810:	697b      	ldr	r3, [r7, #20]
 8000812:	08da      	lsrs	r2, r3, #3
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	3208      	adds	r2, #8
 8000818:	6939      	ldr	r1, [r7, #16]
 800081a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000824:	697b      	ldr	r3, [r7, #20]
 8000826:	005b      	lsls	r3, r3, #1
 8000828:	2203      	movs	r2, #3
 800082a:	fa02 f303 	lsl.w	r3, r2, r3
 800082e:	43db      	mvns	r3, r3
 8000830:	693a      	ldr	r2, [r7, #16]
 8000832:	4013      	ands	r3, r2
 8000834:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000836:	683b      	ldr	r3, [r7, #0]
 8000838:	685b      	ldr	r3, [r3, #4]
 800083a:	f003 0203 	and.w	r2, r3, #3
 800083e:	697b      	ldr	r3, [r7, #20]
 8000840:	005b      	lsls	r3, r3, #1
 8000842:	fa02 f303 	lsl.w	r3, r2, r3
 8000846:	693a      	ldr	r2, [r7, #16]
 8000848:	4313      	orrs	r3, r2
 800084a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	693a      	ldr	r2, [r7, #16]
 8000850:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000852:	683b      	ldr	r3, [r7, #0]
 8000854:	685b      	ldr	r3, [r3, #4]
 8000856:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800085a:	2b00      	cmp	r3, #0
 800085c:	f000 80ac 	beq.w	80009b8 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000860:	4b5e      	ldr	r3, [pc, #376]	@ (80009dc <HAL_GPIO_Init+0x2f0>)
 8000862:	699b      	ldr	r3, [r3, #24]
 8000864:	4a5d      	ldr	r2, [pc, #372]	@ (80009dc <HAL_GPIO_Init+0x2f0>)
 8000866:	f043 0301 	orr.w	r3, r3, #1
 800086a:	6193      	str	r3, [r2, #24]
 800086c:	4b5b      	ldr	r3, [pc, #364]	@ (80009dc <HAL_GPIO_Init+0x2f0>)
 800086e:	699b      	ldr	r3, [r3, #24]
 8000870:	f003 0301 	and.w	r3, r3, #1
 8000874:	60bb      	str	r3, [r7, #8]
 8000876:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000878:	4a59      	ldr	r2, [pc, #356]	@ (80009e0 <HAL_GPIO_Init+0x2f4>)
 800087a:	697b      	ldr	r3, [r7, #20]
 800087c:	089b      	lsrs	r3, r3, #2
 800087e:	3302      	adds	r3, #2
 8000880:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000884:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000886:	697b      	ldr	r3, [r7, #20]
 8000888:	f003 0303 	and.w	r3, r3, #3
 800088c:	009b      	lsls	r3, r3, #2
 800088e:	220f      	movs	r2, #15
 8000890:	fa02 f303 	lsl.w	r3, r2, r3
 8000894:	43db      	mvns	r3, r3
 8000896:	693a      	ldr	r2, [r7, #16]
 8000898:	4013      	ands	r3, r2
 800089a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80008a2:	d025      	beq.n	80008f0 <HAL_GPIO_Init+0x204>
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	4a4f      	ldr	r2, [pc, #316]	@ (80009e4 <HAL_GPIO_Init+0x2f8>)
 80008a8:	4293      	cmp	r3, r2
 80008aa:	d01f      	beq.n	80008ec <HAL_GPIO_Init+0x200>
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	4a4e      	ldr	r2, [pc, #312]	@ (80009e8 <HAL_GPIO_Init+0x2fc>)
 80008b0:	4293      	cmp	r3, r2
 80008b2:	d019      	beq.n	80008e8 <HAL_GPIO_Init+0x1fc>
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	4a4d      	ldr	r2, [pc, #308]	@ (80009ec <HAL_GPIO_Init+0x300>)
 80008b8:	4293      	cmp	r3, r2
 80008ba:	d013      	beq.n	80008e4 <HAL_GPIO_Init+0x1f8>
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	4a4c      	ldr	r2, [pc, #304]	@ (80009f0 <HAL_GPIO_Init+0x304>)
 80008c0:	4293      	cmp	r3, r2
 80008c2:	d00d      	beq.n	80008e0 <HAL_GPIO_Init+0x1f4>
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	4a4b      	ldr	r2, [pc, #300]	@ (80009f4 <HAL_GPIO_Init+0x308>)
 80008c8:	4293      	cmp	r3, r2
 80008ca:	d007      	beq.n	80008dc <HAL_GPIO_Init+0x1f0>
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	4a4a      	ldr	r2, [pc, #296]	@ (80009f8 <HAL_GPIO_Init+0x30c>)
 80008d0:	4293      	cmp	r3, r2
 80008d2:	d101      	bne.n	80008d8 <HAL_GPIO_Init+0x1ec>
 80008d4:	2306      	movs	r3, #6
 80008d6:	e00c      	b.n	80008f2 <HAL_GPIO_Init+0x206>
 80008d8:	2307      	movs	r3, #7
 80008da:	e00a      	b.n	80008f2 <HAL_GPIO_Init+0x206>
 80008dc:	2305      	movs	r3, #5
 80008de:	e008      	b.n	80008f2 <HAL_GPIO_Init+0x206>
 80008e0:	2304      	movs	r3, #4
 80008e2:	e006      	b.n	80008f2 <HAL_GPIO_Init+0x206>
 80008e4:	2303      	movs	r3, #3
 80008e6:	e004      	b.n	80008f2 <HAL_GPIO_Init+0x206>
 80008e8:	2302      	movs	r3, #2
 80008ea:	e002      	b.n	80008f2 <HAL_GPIO_Init+0x206>
 80008ec:	2301      	movs	r3, #1
 80008ee:	e000      	b.n	80008f2 <HAL_GPIO_Init+0x206>
 80008f0:	2300      	movs	r3, #0
 80008f2:	697a      	ldr	r2, [r7, #20]
 80008f4:	f002 0203 	and.w	r2, r2, #3
 80008f8:	0092      	lsls	r2, r2, #2
 80008fa:	4093      	lsls	r3, r2
 80008fc:	693a      	ldr	r2, [r7, #16]
 80008fe:	4313      	orrs	r3, r2
 8000900:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000902:	4937      	ldr	r1, [pc, #220]	@ (80009e0 <HAL_GPIO_Init+0x2f4>)
 8000904:	697b      	ldr	r3, [r7, #20]
 8000906:	089b      	lsrs	r3, r3, #2
 8000908:	3302      	adds	r3, #2
 800090a:	693a      	ldr	r2, [r7, #16]
 800090c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000910:	4b3a      	ldr	r3, [pc, #232]	@ (80009fc <HAL_GPIO_Init+0x310>)
 8000912:	689b      	ldr	r3, [r3, #8]
 8000914:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000916:	68fb      	ldr	r3, [r7, #12]
 8000918:	43db      	mvns	r3, r3
 800091a:	693a      	ldr	r2, [r7, #16]
 800091c:	4013      	ands	r3, r2
 800091e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000920:	683b      	ldr	r3, [r7, #0]
 8000922:	685b      	ldr	r3, [r3, #4]
 8000924:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000928:	2b00      	cmp	r3, #0
 800092a:	d003      	beq.n	8000934 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 800092c:	693a      	ldr	r2, [r7, #16]
 800092e:	68fb      	ldr	r3, [r7, #12]
 8000930:	4313      	orrs	r3, r2
 8000932:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000934:	4a31      	ldr	r2, [pc, #196]	@ (80009fc <HAL_GPIO_Init+0x310>)
 8000936:	693b      	ldr	r3, [r7, #16]
 8000938:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800093a:	4b30      	ldr	r3, [pc, #192]	@ (80009fc <HAL_GPIO_Init+0x310>)
 800093c:	68db      	ldr	r3, [r3, #12]
 800093e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000940:	68fb      	ldr	r3, [r7, #12]
 8000942:	43db      	mvns	r3, r3
 8000944:	693a      	ldr	r2, [r7, #16]
 8000946:	4013      	ands	r3, r2
 8000948:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800094a:	683b      	ldr	r3, [r7, #0]
 800094c:	685b      	ldr	r3, [r3, #4]
 800094e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000952:	2b00      	cmp	r3, #0
 8000954:	d003      	beq.n	800095e <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8000956:	693a      	ldr	r2, [r7, #16]
 8000958:	68fb      	ldr	r3, [r7, #12]
 800095a:	4313      	orrs	r3, r2
 800095c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800095e:	4a27      	ldr	r2, [pc, #156]	@ (80009fc <HAL_GPIO_Init+0x310>)
 8000960:	693b      	ldr	r3, [r7, #16]
 8000962:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000964:	4b25      	ldr	r3, [pc, #148]	@ (80009fc <HAL_GPIO_Init+0x310>)
 8000966:	685b      	ldr	r3, [r3, #4]
 8000968:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800096a:	68fb      	ldr	r3, [r7, #12]
 800096c:	43db      	mvns	r3, r3
 800096e:	693a      	ldr	r2, [r7, #16]
 8000970:	4013      	ands	r3, r2
 8000972:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000974:	683b      	ldr	r3, [r7, #0]
 8000976:	685b      	ldr	r3, [r3, #4]
 8000978:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800097c:	2b00      	cmp	r3, #0
 800097e:	d003      	beq.n	8000988 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8000980:	693a      	ldr	r2, [r7, #16]
 8000982:	68fb      	ldr	r3, [r7, #12]
 8000984:	4313      	orrs	r3, r2
 8000986:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000988:	4a1c      	ldr	r2, [pc, #112]	@ (80009fc <HAL_GPIO_Init+0x310>)
 800098a:	693b      	ldr	r3, [r7, #16]
 800098c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800098e:	4b1b      	ldr	r3, [pc, #108]	@ (80009fc <HAL_GPIO_Init+0x310>)
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000994:	68fb      	ldr	r3, [r7, #12]
 8000996:	43db      	mvns	r3, r3
 8000998:	693a      	ldr	r2, [r7, #16]
 800099a:	4013      	ands	r3, r2
 800099c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800099e:	683b      	ldr	r3, [r7, #0]
 80009a0:	685b      	ldr	r3, [r3, #4]
 80009a2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d003      	beq.n	80009b2 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 80009aa:	693a      	ldr	r2, [r7, #16]
 80009ac:	68fb      	ldr	r3, [r7, #12]
 80009ae:	4313      	orrs	r3, r2
 80009b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80009b2:	4a12      	ldr	r2, [pc, #72]	@ (80009fc <HAL_GPIO_Init+0x310>)
 80009b4:	693b      	ldr	r3, [r7, #16]
 80009b6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80009b8:	697b      	ldr	r3, [r7, #20]
 80009ba:	3301      	adds	r3, #1
 80009bc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80009be:	683b      	ldr	r3, [r7, #0]
 80009c0:	681a      	ldr	r2, [r3, #0]
 80009c2:	697b      	ldr	r3, [r7, #20]
 80009c4:	fa22 f303 	lsr.w	r3, r2, r3
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	f47f ae97 	bne.w	80006fc <HAL_GPIO_Init+0x10>
  }
}
 80009ce:	bf00      	nop
 80009d0:	bf00      	nop
 80009d2:	371c      	adds	r7, #28
 80009d4:	46bd      	mov	sp, r7
 80009d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009da:	4770      	bx	lr
 80009dc:	40021000 	.word	0x40021000
 80009e0:	40010000 	.word	0x40010000
 80009e4:	48000400 	.word	0x48000400
 80009e8:	48000800 	.word	0x48000800
 80009ec:	48000c00 	.word	0x48000c00
 80009f0:	48001000 	.word	0x48001000
 80009f4:	48001400 	.word	0x48001400
 80009f8:	48001800 	.word	0x48001800
 80009fc:	40010400 	.word	0x40010400

08000a00 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000a00:	b480      	push	{r7}
 8000a02:	b085      	sub	sp, #20
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
 8000a08:	460b      	mov	r3, r1
 8000a0a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	691a      	ldr	r2, [r3, #16]
 8000a10:	887b      	ldrh	r3, [r7, #2]
 8000a12:	4013      	ands	r3, r2
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d002      	beq.n	8000a1e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000a18:	2301      	movs	r3, #1
 8000a1a:	73fb      	strb	r3, [r7, #15]
 8000a1c:	e001      	b.n	8000a22 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000a22:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a24:	4618      	mov	r0, r3
 8000a26:	3714      	adds	r7, #20
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2e:	4770      	bx	lr

08000a30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000a30:	b480      	push	{r7}
 8000a32:	b083      	sub	sp, #12
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
 8000a38:	460b      	mov	r3, r1
 8000a3a:	807b      	strh	r3, [r7, #2]
 8000a3c:	4613      	mov	r3, r2
 8000a3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000a40:	787b      	ldrb	r3, [r7, #1]
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d003      	beq.n	8000a4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000a46:	887a      	ldrh	r2, [r7, #2]
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000a4c:	e002      	b.n	8000a54 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000a4e:	887a      	ldrh	r2, [r7, #2]
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000a54:	bf00      	nop
 8000a56:	370c      	adds	r7, #12
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5e:	4770      	bx	lr

08000a60 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 8000a66:	af00      	add	r7, sp, #0
 8000a68:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000a6c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000a70:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000a72:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000a76:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d102      	bne.n	8000a86 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8000a80:	2301      	movs	r3, #1
 8000a82:	f001 b83a 	b.w	8001afa <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000a86:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000a8a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	f003 0301 	and.w	r3, r3, #1
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	f000 816f 	beq.w	8000d7a <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000a9c:	4bb5      	ldr	r3, [pc, #724]	@ (8000d74 <HAL_RCC_OscConfig+0x314>)
 8000a9e:	685b      	ldr	r3, [r3, #4]
 8000aa0:	f003 030c 	and.w	r3, r3, #12
 8000aa4:	2b04      	cmp	r3, #4
 8000aa6:	d00c      	beq.n	8000ac2 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000aa8:	4bb2      	ldr	r3, [pc, #712]	@ (8000d74 <HAL_RCC_OscConfig+0x314>)
 8000aaa:	685b      	ldr	r3, [r3, #4]
 8000aac:	f003 030c 	and.w	r3, r3, #12
 8000ab0:	2b08      	cmp	r3, #8
 8000ab2:	d15c      	bne.n	8000b6e <HAL_RCC_OscConfig+0x10e>
 8000ab4:	4baf      	ldr	r3, [pc, #700]	@ (8000d74 <HAL_RCC_OscConfig+0x314>)
 8000ab6:	685b      	ldr	r3, [r3, #4]
 8000ab8:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8000abc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000ac0:	d155      	bne.n	8000b6e <HAL_RCC_OscConfig+0x10e>
 8000ac2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000ac6:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000aca:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8000ace:	fa93 f3a3 	rbit	r3, r3
 8000ad2:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000ad6:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ada:	fab3 f383 	clz	r3, r3
 8000ade:	b2db      	uxtb	r3, r3
 8000ae0:	095b      	lsrs	r3, r3, #5
 8000ae2:	b2db      	uxtb	r3, r3
 8000ae4:	f043 0301 	orr.w	r3, r3, #1
 8000ae8:	b2db      	uxtb	r3, r3
 8000aea:	2b01      	cmp	r3, #1
 8000aec:	d102      	bne.n	8000af4 <HAL_RCC_OscConfig+0x94>
 8000aee:	4ba1      	ldr	r3, [pc, #644]	@ (8000d74 <HAL_RCC_OscConfig+0x314>)
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	e015      	b.n	8000b20 <HAL_RCC_OscConfig+0xc0>
 8000af4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000af8:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000afc:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 8000b00:	fa93 f3a3 	rbit	r3, r3
 8000b04:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 8000b08:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000b0c:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8000b10:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 8000b14:	fa93 f3a3 	rbit	r3, r3
 8000b18:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8000b1c:	4b95      	ldr	r3, [pc, #596]	@ (8000d74 <HAL_RCC_OscConfig+0x314>)
 8000b1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b20:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000b24:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 8000b28:	f8d7 21dc 	ldr.w	r2, [r7, #476]	@ 0x1dc
 8000b2c:	fa92 f2a2 	rbit	r2, r2
 8000b30:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
  return result;
 8000b34:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8000b38:	fab2 f282 	clz	r2, r2
 8000b3c:	b2d2      	uxtb	r2, r2
 8000b3e:	f042 0220 	orr.w	r2, r2, #32
 8000b42:	b2d2      	uxtb	r2, r2
 8000b44:	f002 021f 	and.w	r2, r2, #31
 8000b48:	2101      	movs	r1, #1
 8000b4a:	fa01 f202 	lsl.w	r2, r1, r2
 8000b4e:	4013      	ands	r3, r2
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	f000 8111 	beq.w	8000d78 <HAL_RCC_OscConfig+0x318>
 8000b56:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000b5a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	685b      	ldr	r3, [r3, #4]
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	f040 8108 	bne.w	8000d78 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8000b68:	2301      	movs	r3, #1
 8000b6a:	f000 bfc6 	b.w	8001afa <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b6e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000b72:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	685b      	ldr	r3, [r3, #4]
 8000b7a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000b7e:	d106      	bne.n	8000b8e <HAL_RCC_OscConfig+0x12e>
 8000b80:	4b7c      	ldr	r3, [pc, #496]	@ (8000d74 <HAL_RCC_OscConfig+0x314>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	4a7b      	ldr	r2, [pc, #492]	@ (8000d74 <HAL_RCC_OscConfig+0x314>)
 8000b86:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000b8a:	6013      	str	r3, [r2, #0]
 8000b8c:	e036      	b.n	8000bfc <HAL_RCC_OscConfig+0x19c>
 8000b8e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000b92:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	685b      	ldr	r3, [r3, #4]
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d10c      	bne.n	8000bb8 <HAL_RCC_OscConfig+0x158>
 8000b9e:	4b75      	ldr	r3, [pc, #468]	@ (8000d74 <HAL_RCC_OscConfig+0x314>)
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	4a74      	ldr	r2, [pc, #464]	@ (8000d74 <HAL_RCC_OscConfig+0x314>)
 8000ba4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000ba8:	6013      	str	r3, [r2, #0]
 8000baa:	4b72      	ldr	r3, [pc, #456]	@ (8000d74 <HAL_RCC_OscConfig+0x314>)
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	4a71      	ldr	r2, [pc, #452]	@ (8000d74 <HAL_RCC_OscConfig+0x314>)
 8000bb0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000bb4:	6013      	str	r3, [r2, #0]
 8000bb6:	e021      	b.n	8000bfc <HAL_RCC_OscConfig+0x19c>
 8000bb8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000bbc:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	685b      	ldr	r3, [r3, #4]
 8000bc4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000bc8:	d10c      	bne.n	8000be4 <HAL_RCC_OscConfig+0x184>
 8000bca:	4b6a      	ldr	r3, [pc, #424]	@ (8000d74 <HAL_RCC_OscConfig+0x314>)
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	4a69      	ldr	r2, [pc, #420]	@ (8000d74 <HAL_RCC_OscConfig+0x314>)
 8000bd0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000bd4:	6013      	str	r3, [r2, #0]
 8000bd6:	4b67      	ldr	r3, [pc, #412]	@ (8000d74 <HAL_RCC_OscConfig+0x314>)
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	4a66      	ldr	r2, [pc, #408]	@ (8000d74 <HAL_RCC_OscConfig+0x314>)
 8000bdc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000be0:	6013      	str	r3, [r2, #0]
 8000be2:	e00b      	b.n	8000bfc <HAL_RCC_OscConfig+0x19c>
 8000be4:	4b63      	ldr	r3, [pc, #396]	@ (8000d74 <HAL_RCC_OscConfig+0x314>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	4a62      	ldr	r2, [pc, #392]	@ (8000d74 <HAL_RCC_OscConfig+0x314>)
 8000bea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000bee:	6013      	str	r3, [r2, #0]
 8000bf0:	4b60      	ldr	r3, [pc, #384]	@ (8000d74 <HAL_RCC_OscConfig+0x314>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	4a5f      	ldr	r2, [pc, #380]	@ (8000d74 <HAL_RCC_OscConfig+0x314>)
 8000bf6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000bfa:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000bfc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000c00:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	685b      	ldr	r3, [r3, #4]
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d059      	beq.n	8000cc0 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c0c:	f7ff fc7c 	bl	8000508 <HAL_GetTick>
 8000c10:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c14:	e00a      	b.n	8000c2c <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000c16:	f7ff fc77 	bl	8000508 <HAL_GetTick>
 8000c1a:	4602      	mov	r2, r0
 8000c1c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8000c20:	1ad3      	subs	r3, r2, r3
 8000c22:	2b64      	cmp	r3, #100	@ 0x64
 8000c24:	d902      	bls.n	8000c2c <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8000c26:	2303      	movs	r3, #3
 8000c28:	f000 bf67 	b.w	8001afa <HAL_RCC_OscConfig+0x109a>
 8000c2c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000c30:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c34:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8000c38:	fa93 f3a3 	rbit	r3, r3
 8000c3c:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
  return result;
 8000c40:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c44:	fab3 f383 	clz	r3, r3
 8000c48:	b2db      	uxtb	r3, r3
 8000c4a:	095b      	lsrs	r3, r3, #5
 8000c4c:	b2db      	uxtb	r3, r3
 8000c4e:	f043 0301 	orr.w	r3, r3, #1
 8000c52:	b2db      	uxtb	r3, r3
 8000c54:	2b01      	cmp	r3, #1
 8000c56:	d102      	bne.n	8000c5e <HAL_RCC_OscConfig+0x1fe>
 8000c58:	4b46      	ldr	r3, [pc, #280]	@ (8000d74 <HAL_RCC_OscConfig+0x314>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	e015      	b.n	8000c8a <HAL_RCC_OscConfig+0x22a>
 8000c5e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000c62:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c66:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8000c6a:	fa93 f3a3 	rbit	r3, r3
 8000c6e:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 8000c72:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000c76:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8000c7a:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8000c7e:	fa93 f3a3 	rbit	r3, r3
 8000c82:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8000c86:	4b3b      	ldr	r3, [pc, #236]	@ (8000d74 <HAL_RCC_OscConfig+0x314>)
 8000c88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c8a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000c8e:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 8000c92:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 8000c96:	fa92 f2a2 	rbit	r2, r2
 8000c9a:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
  return result;
 8000c9e:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8000ca2:	fab2 f282 	clz	r2, r2
 8000ca6:	b2d2      	uxtb	r2, r2
 8000ca8:	f042 0220 	orr.w	r2, r2, #32
 8000cac:	b2d2      	uxtb	r2, r2
 8000cae:	f002 021f 	and.w	r2, r2, #31
 8000cb2:	2101      	movs	r1, #1
 8000cb4:	fa01 f202 	lsl.w	r2, r1, r2
 8000cb8:	4013      	ands	r3, r2
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d0ab      	beq.n	8000c16 <HAL_RCC_OscConfig+0x1b6>
 8000cbe:	e05c      	b.n	8000d7a <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cc0:	f7ff fc22 	bl	8000508 <HAL_GetTick>
 8000cc4:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000cc8:	e00a      	b.n	8000ce0 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000cca:	f7ff fc1d 	bl	8000508 <HAL_GetTick>
 8000cce:	4602      	mov	r2, r0
 8000cd0:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8000cd4:	1ad3      	subs	r3, r2, r3
 8000cd6:	2b64      	cmp	r3, #100	@ 0x64
 8000cd8:	d902      	bls.n	8000ce0 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8000cda:	2303      	movs	r3, #3
 8000cdc:	f000 bf0d 	b.w	8001afa <HAL_RCC_OscConfig+0x109a>
 8000ce0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000ce4:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ce8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8000cec:	fa93 f3a3 	rbit	r3, r3
 8000cf0:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
  return result;
 8000cf4:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000cf8:	fab3 f383 	clz	r3, r3
 8000cfc:	b2db      	uxtb	r3, r3
 8000cfe:	095b      	lsrs	r3, r3, #5
 8000d00:	b2db      	uxtb	r3, r3
 8000d02:	f043 0301 	orr.w	r3, r3, #1
 8000d06:	b2db      	uxtb	r3, r3
 8000d08:	2b01      	cmp	r3, #1
 8000d0a:	d102      	bne.n	8000d12 <HAL_RCC_OscConfig+0x2b2>
 8000d0c:	4b19      	ldr	r3, [pc, #100]	@ (8000d74 <HAL_RCC_OscConfig+0x314>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	e015      	b.n	8000d3e <HAL_RCC_OscConfig+0x2de>
 8000d12:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000d16:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d1a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8000d1e:	fa93 f3a3 	rbit	r3, r3
 8000d22:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 8000d26:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000d2a:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8000d2e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8000d32:	fa93 f3a3 	rbit	r3, r3
 8000d36:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8000d3a:	4b0e      	ldr	r3, [pc, #56]	@ (8000d74 <HAL_RCC_OscConfig+0x314>)
 8000d3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d3e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000d42:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 8000d46:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 8000d4a:	fa92 f2a2 	rbit	r2, r2
 8000d4e:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
  return result;
 8000d52:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8000d56:	fab2 f282 	clz	r2, r2
 8000d5a:	b2d2      	uxtb	r2, r2
 8000d5c:	f042 0220 	orr.w	r2, r2, #32
 8000d60:	b2d2      	uxtb	r2, r2
 8000d62:	f002 021f 	and.w	r2, r2, #31
 8000d66:	2101      	movs	r1, #1
 8000d68:	fa01 f202 	lsl.w	r2, r1, r2
 8000d6c:	4013      	ands	r3, r2
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d1ab      	bne.n	8000cca <HAL_RCC_OscConfig+0x26a>
 8000d72:	e002      	b.n	8000d7a <HAL_RCC_OscConfig+0x31a>
 8000d74:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d7a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000d7e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	f003 0302 	and.w	r3, r3, #2
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	f000 817f 	beq.w	800108e <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000d90:	4ba7      	ldr	r3, [pc, #668]	@ (8001030 <HAL_RCC_OscConfig+0x5d0>)
 8000d92:	685b      	ldr	r3, [r3, #4]
 8000d94:	f003 030c 	and.w	r3, r3, #12
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d00c      	beq.n	8000db6 <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000d9c:	4ba4      	ldr	r3, [pc, #656]	@ (8001030 <HAL_RCC_OscConfig+0x5d0>)
 8000d9e:	685b      	ldr	r3, [r3, #4]
 8000da0:	f003 030c 	and.w	r3, r3, #12
 8000da4:	2b08      	cmp	r3, #8
 8000da6:	d173      	bne.n	8000e90 <HAL_RCC_OscConfig+0x430>
 8000da8:	4ba1      	ldr	r3, [pc, #644]	@ (8001030 <HAL_RCC_OscConfig+0x5d0>)
 8000daa:	685b      	ldr	r3, [r3, #4]
 8000dac:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8000db0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8000db4:	d16c      	bne.n	8000e90 <HAL_RCC_OscConfig+0x430>
 8000db6:	2302      	movs	r3, #2
 8000db8:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000dbc:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8000dc0:	fa93 f3a3 	rbit	r3, r3
 8000dc4:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
  return result;
 8000dc8:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000dcc:	fab3 f383 	clz	r3, r3
 8000dd0:	b2db      	uxtb	r3, r3
 8000dd2:	095b      	lsrs	r3, r3, #5
 8000dd4:	b2db      	uxtb	r3, r3
 8000dd6:	f043 0301 	orr.w	r3, r3, #1
 8000dda:	b2db      	uxtb	r3, r3
 8000ddc:	2b01      	cmp	r3, #1
 8000dde:	d102      	bne.n	8000de6 <HAL_RCC_OscConfig+0x386>
 8000de0:	4b93      	ldr	r3, [pc, #588]	@ (8001030 <HAL_RCC_OscConfig+0x5d0>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	e013      	b.n	8000e0e <HAL_RCC_OscConfig+0x3ae>
 8000de6:	2302      	movs	r3, #2
 8000de8:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000dec:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8000df0:	fa93 f3a3 	rbit	r3, r3
 8000df4:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 8000df8:	2302      	movs	r3, #2
 8000dfa:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8000dfe:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8000e02:	fa93 f3a3 	rbit	r3, r3
 8000e06:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8000e0a:	4b89      	ldr	r3, [pc, #548]	@ (8001030 <HAL_RCC_OscConfig+0x5d0>)
 8000e0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e0e:	2202      	movs	r2, #2
 8000e10:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 8000e14:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 8000e18:	fa92 f2a2 	rbit	r2, r2
 8000e1c:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
  return result;
 8000e20:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8000e24:	fab2 f282 	clz	r2, r2
 8000e28:	b2d2      	uxtb	r2, r2
 8000e2a:	f042 0220 	orr.w	r2, r2, #32
 8000e2e:	b2d2      	uxtb	r2, r2
 8000e30:	f002 021f 	and.w	r2, r2, #31
 8000e34:	2101      	movs	r1, #1
 8000e36:	fa01 f202 	lsl.w	r2, r1, r2
 8000e3a:	4013      	ands	r3, r2
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d00a      	beq.n	8000e56 <HAL_RCC_OscConfig+0x3f6>
 8000e40:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000e44:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	68db      	ldr	r3, [r3, #12]
 8000e4c:	2b01      	cmp	r3, #1
 8000e4e:	d002      	beq.n	8000e56 <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8000e50:	2301      	movs	r3, #1
 8000e52:	f000 be52 	b.w	8001afa <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e56:	4b76      	ldr	r3, [pc, #472]	@ (8001030 <HAL_RCC_OscConfig+0x5d0>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000e5e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000e62:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	691b      	ldr	r3, [r3, #16]
 8000e6a:	21f8      	movs	r1, #248	@ 0xf8
 8000e6c:	f8c7 1174 	str.w	r1, [r7, #372]	@ 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e70:	f8d7 1174 	ldr.w	r1, [r7, #372]	@ 0x174
 8000e74:	fa91 f1a1 	rbit	r1, r1
 8000e78:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
  return result;
 8000e7c:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8000e80:	fab1 f181 	clz	r1, r1
 8000e84:	b2c9      	uxtb	r1, r1
 8000e86:	408b      	lsls	r3, r1
 8000e88:	4969      	ldr	r1, [pc, #420]	@ (8001030 <HAL_RCC_OscConfig+0x5d0>)
 8000e8a:	4313      	orrs	r3, r2
 8000e8c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e8e:	e0fe      	b.n	800108e <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000e90:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000e94:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	68db      	ldr	r3, [r3, #12]
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	f000 8088 	beq.w	8000fb2 <HAL_RCC_OscConfig+0x552>
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ea8:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8000eac:	fa93 f3a3 	rbit	r3, r3
 8000eb0:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
  return result;
 8000eb4:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000eb8:	fab3 f383 	clz	r3, r3
 8000ebc:	b2db      	uxtb	r3, r3
 8000ebe:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8000ec2:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8000ec6:	009b      	lsls	r3, r3, #2
 8000ec8:	461a      	mov	r2, r3
 8000eca:	2301      	movs	r3, #1
 8000ecc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ece:	f7ff fb1b 	bl	8000508 <HAL_GetTick>
 8000ed2:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ed6:	e00a      	b.n	8000eee <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000ed8:	f7ff fb16 	bl	8000508 <HAL_GetTick>
 8000edc:	4602      	mov	r2, r0
 8000ede:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8000ee2:	1ad3      	subs	r3, r2, r3
 8000ee4:	2b02      	cmp	r3, #2
 8000ee6:	d902      	bls.n	8000eee <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8000ee8:	2303      	movs	r3, #3
 8000eea:	f000 be06 	b.w	8001afa <HAL_RCC_OscConfig+0x109a>
 8000eee:	2302      	movs	r3, #2
 8000ef0:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ef4:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8000ef8:	fa93 f3a3 	rbit	r3, r3
 8000efc:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
  return result;
 8000f00:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f04:	fab3 f383 	clz	r3, r3
 8000f08:	b2db      	uxtb	r3, r3
 8000f0a:	095b      	lsrs	r3, r3, #5
 8000f0c:	b2db      	uxtb	r3, r3
 8000f0e:	f043 0301 	orr.w	r3, r3, #1
 8000f12:	b2db      	uxtb	r3, r3
 8000f14:	2b01      	cmp	r3, #1
 8000f16:	d102      	bne.n	8000f1e <HAL_RCC_OscConfig+0x4be>
 8000f18:	4b45      	ldr	r3, [pc, #276]	@ (8001030 <HAL_RCC_OscConfig+0x5d0>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	e013      	b.n	8000f46 <HAL_RCC_OscConfig+0x4e6>
 8000f1e:	2302      	movs	r3, #2
 8000f20:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f24:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8000f28:	fa93 f3a3 	rbit	r3, r3
 8000f2c:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 8000f30:	2302      	movs	r3, #2
 8000f32:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8000f36:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8000f3a:	fa93 f3a3 	rbit	r3, r3
 8000f3e:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8000f42:	4b3b      	ldr	r3, [pc, #236]	@ (8001030 <HAL_RCC_OscConfig+0x5d0>)
 8000f44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f46:	2202      	movs	r2, #2
 8000f48:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 8000f4c:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8000f50:	fa92 f2a2 	rbit	r2, r2
 8000f54:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
  return result;
 8000f58:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8000f5c:	fab2 f282 	clz	r2, r2
 8000f60:	b2d2      	uxtb	r2, r2
 8000f62:	f042 0220 	orr.w	r2, r2, #32
 8000f66:	b2d2      	uxtb	r2, r2
 8000f68:	f002 021f 	and.w	r2, r2, #31
 8000f6c:	2101      	movs	r1, #1
 8000f6e:	fa01 f202 	lsl.w	r2, r1, r2
 8000f72:	4013      	ands	r3, r2
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d0af      	beq.n	8000ed8 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f78:	4b2d      	ldr	r3, [pc, #180]	@ (8001030 <HAL_RCC_OscConfig+0x5d0>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000f80:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000f84:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	691b      	ldr	r3, [r3, #16]
 8000f8c:	21f8      	movs	r1, #248	@ 0xf8
 8000f8e:	f8c7 1144 	str.w	r1, [r7, #324]	@ 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f92:	f8d7 1144 	ldr.w	r1, [r7, #324]	@ 0x144
 8000f96:	fa91 f1a1 	rbit	r1, r1
 8000f9a:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
  return result;
 8000f9e:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8000fa2:	fab1 f181 	clz	r1, r1
 8000fa6:	b2c9      	uxtb	r1, r1
 8000fa8:	408b      	lsls	r3, r1
 8000faa:	4921      	ldr	r1, [pc, #132]	@ (8001030 <HAL_RCC_OscConfig+0x5d0>)
 8000fac:	4313      	orrs	r3, r2
 8000fae:	600b      	str	r3, [r1, #0]
 8000fb0:	e06d      	b.n	800108e <HAL_RCC_OscConfig+0x62e>
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fb8:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8000fbc:	fa93 f3a3 	rbit	r3, r3
 8000fc0:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  return result;
 8000fc4:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000fc8:	fab3 f383 	clz	r3, r3
 8000fcc:	b2db      	uxtb	r3, r3
 8000fce:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8000fd2:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8000fd6:	009b      	lsls	r3, r3, #2
 8000fd8:	461a      	mov	r2, r3
 8000fda:	2300      	movs	r3, #0
 8000fdc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fde:	f7ff fa93 	bl	8000508 <HAL_GetTick>
 8000fe2:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000fe6:	e00a      	b.n	8000ffe <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000fe8:	f7ff fa8e 	bl	8000508 <HAL_GetTick>
 8000fec:	4602      	mov	r2, r0
 8000fee:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8000ff2:	1ad3      	subs	r3, r2, r3
 8000ff4:	2b02      	cmp	r3, #2
 8000ff6:	d902      	bls.n	8000ffe <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8000ff8:	2303      	movs	r3, #3
 8000ffa:	f000 bd7e 	b.w	8001afa <HAL_RCC_OscConfig+0x109a>
 8000ffe:	2302      	movs	r3, #2
 8001000:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001004:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8001008:	fa93 f3a3 	rbit	r3, r3
 800100c:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  return result;
 8001010:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001014:	fab3 f383 	clz	r3, r3
 8001018:	b2db      	uxtb	r3, r3
 800101a:	095b      	lsrs	r3, r3, #5
 800101c:	b2db      	uxtb	r3, r3
 800101e:	f043 0301 	orr.w	r3, r3, #1
 8001022:	b2db      	uxtb	r3, r3
 8001024:	2b01      	cmp	r3, #1
 8001026:	d105      	bne.n	8001034 <HAL_RCC_OscConfig+0x5d4>
 8001028:	4b01      	ldr	r3, [pc, #4]	@ (8001030 <HAL_RCC_OscConfig+0x5d0>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	e016      	b.n	800105c <HAL_RCC_OscConfig+0x5fc>
 800102e:	bf00      	nop
 8001030:	40021000 	.word	0x40021000
 8001034:	2302      	movs	r3, #2
 8001036:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800103a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800103e:	fa93 f3a3 	rbit	r3, r3
 8001042:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8001046:	2302      	movs	r3, #2
 8001048:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 800104c:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8001050:	fa93 f3a3 	rbit	r3, r3
 8001054:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8001058:	4bbf      	ldr	r3, [pc, #764]	@ (8001358 <HAL_RCC_OscConfig+0x8f8>)
 800105a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800105c:	2202      	movs	r2, #2
 800105e:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 8001062:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8001066:	fa92 f2a2 	rbit	r2, r2
 800106a:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
  return result;
 800106e:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8001072:	fab2 f282 	clz	r2, r2
 8001076:	b2d2      	uxtb	r2, r2
 8001078:	f042 0220 	orr.w	r2, r2, #32
 800107c:	b2d2      	uxtb	r2, r2
 800107e:	f002 021f 	and.w	r2, r2, #31
 8001082:	2101      	movs	r1, #1
 8001084:	fa01 f202 	lsl.w	r2, r1, r2
 8001088:	4013      	ands	r3, r2
 800108a:	2b00      	cmp	r3, #0
 800108c:	d1ac      	bne.n	8000fe8 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800108e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001092:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	f003 0308 	and.w	r3, r3, #8
 800109e:	2b00      	cmp	r3, #0
 80010a0:	f000 8113 	beq.w	80012ca <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80010a4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80010a8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	695b      	ldr	r3, [r3, #20]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d07c      	beq.n	80011ae <HAL_RCC_OscConfig+0x74e>
 80010b4:	2301      	movs	r3, #1
 80010b6:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80010be:	fa93 f3a3 	rbit	r3, r3
 80010c2:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  return result;
 80010c6:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80010ca:	fab3 f383 	clz	r3, r3
 80010ce:	b2db      	uxtb	r3, r3
 80010d0:	461a      	mov	r2, r3
 80010d2:	4ba2      	ldr	r3, [pc, #648]	@ (800135c <HAL_RCC_OscConfig+0x8fc>)
 80010d4:	4413      	add	r3, r2
 80010d6:	009b      	lsls	r3, r3, #2
 80010d8:	461a      	mov	r2, r3
 80010da:	2301      	movs	r3, #1
 80010dc:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010de:	f7ff fa13 	bl	8000508 <HAL_GetTick>
 80010e2:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010e6:	e00a      	b.n	80010fe <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80010e8:	f7ff fa0e 	bl	8000508 <HAL_GetTick>
 80010ec:	4602      	mov	r2, r0
 80010ee:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80010f2:	1ad3      	subs	r3, r2, r3
 80010f4:	2b02      	cmp	r3, #2
 80010f6:	d902      	bls.n	80010fe <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 80010f8:	2303      	movs	r3, #3
 80010fa:	f000 bcfe 	b.w	8001afa <HAL_RCC_OscConfig+0x109a>
 80010fe:	2302      	movs	r3, #2
 8001100:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001104:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8001108:	fa93 f2a3 	rbit	r2, r3
 800110c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001110:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001114:	601a      	str	r2, [r3, #0]
 8001116:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800111a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800111e:	2202      	movs	r2, #2
 8001120:	601a      	str	r2, [r3, #0]
 8001122:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001126:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	fa93 f2a3 	rbit	r2, r3
 8001130:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001134:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001138:	601a      	str	r2, [r3, #0]
 800113a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800113e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001142:	2202      	movs	r2, #2
 8001144:	601a      	str	r2, [r3, #0]
 8001146:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800114a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	fa93 f2a3 	rbit	r2, r3
 8001154:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001158:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800115c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800115e:	4b7e      	ldr	r3, [pc, #504]	@ (8001358 <HAL_RCC_OscConfig+0x8f8>)
 8001160:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001162:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001166:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800116a:	2102      	movs	r1, #2
 800116c:	6019      	str	r1, [r3, #0]
 800116e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001172:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	fa93 f1a3 	rbit	r1, r3
 800117c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001180:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001184:	6019      	str	r1, [r3, #0]
  return result;
 8001186:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800118a:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	fab3 f383 	clz	r3, r3
 8001194:	b2db      	uxtb	r3, r3
 8001196:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800119a:	b2db      	uxtb	r3, r3
 800119c:	f003 031f 	and.w	r3, r3, #31
 80011a0:	2101      	movs	r1, #1
 80011a2:	fa01 f303 	lsl.w	r3, r1, r3
 80011a6:	4013      	ands	r3, r2
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d09d      	beq.n	80010e8 <HAL_RCC_OscConfig+0x688>
 80011ac:	e08d      	b.n	80012ca <HAL_RCC_OscConfig+0x86a>
 80011ae:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80011b2:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80011b6:	2201      	movs	r2, #1
 80011b8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011ba:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80011be:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	fa93 f2a3 	rbit	r2, r3
 80011c8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80011cc:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80011d0:	601a      	str	r2, [r3, #0]
  return result;
 80011d2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80011d6:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80011da:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80011dc:	fab3 f383 	clz	r3, r3
 80011e0:	b2db      	uxtb	r3, r3
 80011e2:	461a      	mov	r2, r3
 80011e4:	4b5d      	ldr	r3, [pc, #372]	@ (800135c <HAL_RCC_OscConfig+0x8fc>)
 80011e6:	4413      	add	r3, r2
 80011e8:	009b      	lsls	r3, r3, #2
 80011ea:	461a      	mov	r2, r3
 80011ec:	2300      	movs	r3, #0
 80011ee:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011f0:	f7ff f98a 	bl	8000508 <HAL_GetTick>
 80011f4:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011f8:	e00a      	b.n	8001210 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80011fa:	f7ff f985 	bl	8000508 <HAL_GetTick>
 80011fe:	4602      	mov	r2, r0
 8001200:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001204:	1ad3      	subs	r3, r2, r3
 8001206:	2b02      	cmp	r3, #2
 8001208:	d902      	bls.n	8001210 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 800120a:	2303      	movs	r3, #3
 800120c:	f000 bc75 	b.w	8001afa <HAL_RCC_OscConfig+0x109a>
 8001210:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001214:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001218:	2202      	movs	r2, #2
 800121a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800121c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001220:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	fa93 f2a3 	rbit	r2, r3
 800122a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800122e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001232:	601a      	str	r2, [r3, #0]
 8001234:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001238:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800123c:	2202      	movs	r2, #2
 800123e:	601a      	str	r2, [r3, #0]
 8001240:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001244:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	fa93 f2a3 	rbit	r2, r3
 800124e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001252:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001256:	601a      	str	r2, [r3, #0]
 8001258:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800125c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001260:	2202      	movs	r2, #2
 8001262:	601a      	str	r2, [r3, #0]
 8001264:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001268:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	fa93 f2a3 	rbit	r2, r3
 8001272:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001276:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800127a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800127c:	4b36      	ldr	r3, [pc, #216]	@ (8001358 <HAL_RCC_OscConfig+0x8f8>)
 800127e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001280:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001284:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001288:	2102      	movs	r1, #2
 800128a:	6019      	str	r1, [r3, #0]
 800128c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001290:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	fa93 f1a3 	rbit	r1, r3
 800129a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800129e:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80012a2:	6019      	str	r1, [r3, #0]
  return result;
 80012a4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80012a8:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	fab3 f383 	clz	r3, r3
 80012b2:	b2db      	uxtb	r3, r3
 80012b4:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80012b8:	b2db      	uxtb	r3, r3
 80012ba:	f003 031f 	and.w	r3, r3, #31
 80012be:	2101      	movs	r1, #1
 80012c0:	fa01 f303 	lsl.w	r3, r1, r3
 80012c4:	4013      	ands	r3, r2
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d197      	bne.n	80011fa <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012ca:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80012ce:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f003 0304 	and.w	r3, r3, #4
 80012da:	2b00      	cmp	r3, #0
 80012dc:	f000 81a5 	beq.w	800162a <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80012e0:	2300      	movs	r3, #0
 80012e2:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012e6:	4b1c      	ldr	r3, [pc, #112]	@ (8001358 <HAL_RCC_OscConfig+0x8f8>)
 80012e8:	69db      	ldr	r3, [r3, #28]
 80012ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d116      	bne.n	8001320 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80012f2:	4b19      	ldr	r3, [pc, #100]	@ (8001358 <HAL_RCC_OscConfig+0x8f8>)
 80012f4:	69db      	ldr	r3, [r3, #28]
 80012f6:	4a18      	ldr	r2, [pc, #96]	@ (8001358 <HAL_RCC_OscConfig+0x8f8>)
 80012f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012fc:	61d3      	str	r3, [r2, #28]
 80012fe:	4b16      	ldr	r3, [pc, #88]	@ (8001358 <HAL_RCC_OscConfig+0x8f8>)
 8001300:	69db      	ldr	r3, [r3, #28]
 8001302:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8001306:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800130a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800130e:	601a      	str	r2, [r3, #0]
 8001310:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001314:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001318:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800131a:	2301      	movs	r3, #1
 800131c:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001320:	4b0f      	ldr	r3, [pc, #60]	@ (8001360 <HAL_RCC_OscConfig+0x900>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001328:	2b00      	cmp	r3, #0
 800132a:	d121      	bne.n	8001370 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800132c:	4b0c      	ldr	r3, [pc, #48]	@ (8001360 <HAL_RCC_OscConfig+0x900>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4a0b      	ldr	r2, [pc, #44]	@ (8001360 <HAL_RCC_OscConfig+0x900>)
 8001332:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001336:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001338:	f7ff f8e6 	bl	8000508 <HAL_GetTick>
 800133c:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001340:	e010      	b.n	8001364 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001342:	f7ff f8e1 	bl	8000508 <HAL_GetTick>
 8001346:	4602      	mov	r2, r0
 8001348:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800134c:	1ad3      	subs	r3, r2, r3
 800134e:	2b64      	cmp	r3, #100	@ 0x64
 8001350:	d908      	bls.n	8001364 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 8001352:	2303      	movs	r3, #3
 8001354:	e3d1      	b.n	8001afa <HAL_RCC_OscConfig+0x109a>
 8001356:	bf00      	nop
 8001358:	40021000 	.word	0x40021000
 800135c:	10908120 	.word	0x10908120
 8001360:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001364:	4b8d      	ldr	r3, [pc, #564]	@ (800159c <HAL_RCC_OscConfig+0xb3c>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800136c:	2b00      	cmp	r3, #0
 800136e:	d0e8      	beq.n	8001342 <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001370:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001374:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	689b      	ldr	r3, [r3, #8]
 800137c:	2b01      	cmp	r3, #1
 800137e:	d106      	bne.n	800138e <HAL_RCC_OscConfig+0x92e>
 8001380:	4b87      	ldr	r3, [pc, #540]	@ (80015a0 <HAL_RCC_OscConfig+0xb40>)
 8001382:	6a1b      	ldr	r3, [r3, #32]
 8001384:	4a86      	ldr	r2, [pc, #536]	@ (80015a0 <HAL_RCC_OscConfig+0xb40>)
 8001386:	f043 0301 	orr.w	r3, r3, #1
 800138a:	6213      	str	r3, [r2, #32]
 800138c:	e035      	b.n	80013fa <HAL_RCC_OscConfig+0x99a>
 800138e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001392:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	689b      	ldr	r3, [r3, #8]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d10c      	bne.n	80013b8 <HAL_RCC_OscConfig+0x958>
 800139e:	4b80      	ldr	r3, [pc, #512]	@ (80015a0 <HAL_RCC_OscConfig+0xb40>)
 80013a0:	6a1b      	ldr	r3, [r3, #32]
 80013a2:	4a7f      	ldr	r2, [pc, #508]	@ (80015a0 <HAL_RCC_OscConfig+0xb40>)
 80013a4:	f023 0301 	bic.w	r3, r3, #1
 80013a8:	6213      	str	r3, [r2, #32]
 80013aa:	4b7d      	ldr	r3, [pc, #500]	@ (80015a0 <HAL_RCC_OscConfig+0xb40>)
 80013ac:	6a1b      	ldr	r3, [r3, #32]
 80013ae:	4a7c      	ldr	r2, [pc, #496]	@ (80015a0 <HAL_RCC_OscConfig+0xb40>)
 80013b0:	f023 0304 	bic.w	r3, r3, #4
 80013b4:	6213      	str	r3, [r2, #32]
 80013b6:	e020      	b.n	80013fa <HAL_RCC_OscConfig+0x99a>
 80013b8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80013bc:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	689b      	ldr	r3, [r3, #8]
 80013c4:	2b05      	cmp	r3, #5
 80013c6:	d10c      	bne.n	80013e2 <HAL_RCC_OscConfig+0x982>
 80013c8:	4b75      	ldr	r3, [pc, #468]	@ (80015a0 <HAL_RCC_OscConfig+0xb40>)
 80013ca:	6a1b      	ldr	r3, [r3, #32]
 80013cc:	4a74      	ldr	r2, [pc, #464]	@ (80015a0 <HAL_RCC_OscConfig+0xb40>)
 80013ce:	f043 0304 	orr.w	r3, r3, #4
 80013d2:	6213      	str	r3, [r2, #32]
 80013d4:	4b72      	ldr	r3, [pc, #456]	@ (80015a0 <HAL_RCC_OscConfig+0xb40>)
 80013d6:	6a1b      	ldr	r3, [r3, #32]
 80013d8:	4a71      	ldr	r2, [pc, #452]	@ (80015a0 <HAL_RCC_OscConfig+0xb40>)
 80013da:	f043 0301 	orr.w	r3, r3, #1
 80013de:	6213      	str	r3, [r2, #32]
 80013e0:	e00b      	b.n	80013fa <HAL_RCC_OscConfig+0x99a>
 80013e2:	4b6f      	ldr	r3, [pc, #444]	@ (80015a0 <HAL_RCC_OscConfig+0xb40>)
 80013e4:	6a1b      	ldr	r3, [r3, #32]
 80013e6:	4a6e      	ldr	r2, [pc, #440]	@ (80015a0 <HAL_RCC_OscConfig+0xb40>)
 80013e8:	f023 0301 	bic.w	r3, r3, #1
 80013ec:	6213      	str	r3, [r2, #32]
 80013ee:	4b6c      	ldr	r3, [pc, #432]	@ (80015a0 <HAL_RCC_OscConfig+0xb40>)
 80013f0:	6a1b      	ldr	r3, [r3, #32]
 80013f2:	4a6b      	ldr	r2, [pc, #428]	@ (80015a0 <HAL_RCC_OscConfig+0xb40>)
 80013f4:	f023 0304 	bic.w	r3, r3, #4
 80013f8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80013fa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80013fe:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	689b      	ldr	r3, [r3, #8]
 8001406:	2b00      	cmp	r3, #0
 8001408:	f000 8081 	beq.w	800150e <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800140c:	f7ff f87c 	bl	8000508 <HAL_GetTick>
 8001410:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001414:	e00b      	b.n	800142e <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001416:	f7ff f877 	bl	8000508 <HAL_GetTick>
 800141a:	4602      	mov	r2, r0
 800141c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001420:	1ad3      	subs	r3, r2, r3
 8001422:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001426:	4293      	cmp	r3, r2
 8001428:	d901      	bls.n	800142e <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 800142a:	2303      	movs	r3, #3
 800142c:	e365      	b.n	8001afa <HAL_RCC_OscConfig+0x109a>
 800142e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001432:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8001436:	2202      	movs	r2, #2
 8001438:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800143a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800143e:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	fa93 f2a3 	rbit	r2, r3
 8001448:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800144c:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8001450:	601a      	str	r2, [r3, #0]
 8001452:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001456:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800145a:	2202      	movs	r2, #2
 800145c:	601a      	str	r2, [r3, #0]
 800145e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001462:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	fa93 f2a3 	rbit	r2, r3
 800146c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001470:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001474:	601a      	str	r2, [r3, #0]
  return result;
 8001476:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800147a:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800147e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001480:	fab3 f383 	clz	r3, r3
 8001484:	b2db      	uxtb	r3, r3
 8001486:	095b      	lsrs	r3, r3, #5
 8001488:	b2db      	uxtb	r3, r3
 800148a:	f043 0302 	orr.w	r3, r3, #2
 800148e:	b2db      	uxtb	r3, r3
 8001490:	2b02      	cmp	r3, #2
 8001492:	d102      	bne.n	800149a <HAL_RCC_OscConfig+0xa3a>
 8001494:	4b42      	ldr	r3, [pc, #264]	@ (80015a0 <HAL_RCC_OscConfig+0xb40>)
 8001496:	6a1b      	ldr	r3, [r3, #32]
 8001498:	e013      	b.n	80014c2 <HAL_RCC_OscConfig+0xa62>
 800149a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800149e:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80014a2:	2202      	movs	r2, #2
 80014a4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014a6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80014aa:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	fa93 f2a3 	rbit	r2, r3
 80014b4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80014b8:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 80014bc:	601a      	str	r2, [r3, #0]
 80014be:	4b38      	ldr	r3, [pc, #224]	@ (80015a0 <HAL_RCC_OscConfig+0xb40>)
 80014c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014c2:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80014c6:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80014ca:	2102      	movs	r1, #2
 80014cc:	6011      	str	r1, [r2, #0]
 80014ce:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80014d2:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80014d6:	6812      	ldr	r2, [r2, #0]
 80014d8:	fa92 f1a2 	rbit	r1, r2
 80014dc:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80014e0:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 80014e4:	6011      	str	r1, [r2, #0]
  return result;
 80014e6:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80014ea:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 80014ee:	6812      	ldr	r2, [r2, #0]
 80014f0:	fab2 f282 	clz	r2, r2
 80014f4:	b2d2      	uxtb	r2, r2
 80014f6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80014fa:	b2d2      	uxtb	r2, r2
 80014fc:	f002 021f 	and.w	r2, r2, #31
 8001500:	2101      	movs	r1, #1
 8001502:	fa01 f202 	lsl.w	r2, r1, r2
 8001506:	4013      	ands	r3, r2
 8001508:	2b00      	cmp	r3, #0
 800150a:	d084      	beq.n	8001416 <HAL_RCC_OscConfig+0x9b6>
 800150c:	e083      	b.n	8001616 <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800150e:	f7fe fffb 	bl	8000508 <HAL_GetTick>
 8001512:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001516:	e00b      	b.n	8001530 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001518:	f7fe fff6 	bl	8000508 <HAL_GetTick>
 800151c:	4602      	mov	r2, r0
 800151e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001522:	1ad3      	subs	r3, r2, r3
 8001524:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001528:	4293      	cmp	r3, r2
 800152a:	d901      	bls.n	8001530 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 800152c:	2303      	movs	r3, #3
 800152e:	e2e4      	b.n	8001afa <HAL_RCC_OscConfig+0x109a>
 8001530:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001534:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8001538:	2202      	movs	r2, #2
 800153a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800153c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001540:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	fa93 f2a3 	rbit	r2, r3
 800154a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800154e:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8001552:	601a      	str	r2, [r3, #0]
 8001554:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001558:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800155c:	2202      	movs	r2, #2
 800155e:	601a      	str	r2, [r3, #0]
 8001560:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001564:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	fa93 f2a3 	rbit	r2, r3
 800156e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001572:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001576:	601a      	str	r2, [r3, #0]
  return result;
 8001578:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800157c:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001580:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001582:	fab3 f383 	clz	r3, r3
 8001586:	b2db      	uxtb	r3, r3
 8001588:	095b      	lsrs	r3, r3, #5
 800158a:	b2db      	uxtb	r3, r3
 800158c:	f043 0302 	orr.w	r3, r3, #2
 8001590:	b2db      	uxtb	r3, r3
 8001592:	2b02      	cmp	r3, #2
 8001594:	d106      	bne.n	80015a4 <HAL_RCC_OscConfig+0xb44>
 8001596:	4b02      	ldr	r3, [pc, #8]	@ (80015a0 <HAL_RCC_OscConfig+0xb40>)
 8001598:	6a1b      	ldr	r3, [r3, #32]
 800159a:	e017      	b.n	80015cc <HAL_RCC_OscConfig+0xb6c>
 800159c:	40007000 	.word	0x40007000
 80015a0:	40021000 	.word	0x40021000
 80015a4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80015a8:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80015ac:	2202      	movs	r2, #2
 80015ae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015b0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80015b4:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	fa93 f2a3 	rbit	r2, r3
 80015be:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80015c2:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 80015c6:	601a      	str	r2, [r3, #0]
 80015c8:	4bb3      	ldr	r3, [pc, #716]	@ (8001898 <HAL_RCC_OscConfig+0xe38>)
 80015ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015cc:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80015d0:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80015d4:	2102      	movs	r1, #2
 80015d6:	6011      	str	r1, [r2, #0]
 80015d8:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80015dc:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80015e0:	6812      	ldr	r2, [r2, #0]
 80015e2:	fa92 f1a2 	rbit	r1, r2
 80015e6:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80015ea:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 80015ee:	6011      	str	r1, [r2, #0]
  return result;
 80015f0:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80015f4:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 80015f8:	6812      	ldr	r2, [r2, #0]
 80015fa:	fab2 f282 	clz	r2, r2
 80015fe:	b2d2      	uxtb	r2, r2
 8001600:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001604:	b2d2      	uxtb	r2, r2
 8001606:	f002 021f 	and.w	r2, r2, #31
 800160a:	2101      	movs	r1, #1
 800160c:	fa01 f202 	lsl.w	r2, r1, r2
 8001610:	4013      	ands	r3, r2
 8001612:	2b00      	cmp	r3, #0
 8001614:	d180      	bne.n	8001518 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001616:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 800161a:	2b01      	cmp	r3, #1
 800161c:	d105      	bne.n	800162a <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800161e:	4b9e      	ldr	r3, [pc, #632]	@ (8001898 <HAL_RCC_OscConfig+0xe38>)
 8001620:	69db      	ldr	r3, [r3, #28]
 8001622:	4a9d      	ldr	r2, [pc, #628]	@ (8001898 <HAL_RCC_OscConfig+0xe38>)
 8001624:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001628:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800162a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800162e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	699b      	ldr	r3, [r3, #24]
 8001636:	2b00      	cmp	r3, #0
 8001638:	f000 825e 	beq.w	8001af8 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800163c:	4b96      	ldr	r3, [pc, #600]	@ (8001898 <HAL_RCC_OscConfig+0xe38>)
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	f003 030c 	and.w	r3, r3, #12
 8001644:	2b08      	cmp	r3, #8
 8001646:	f000 821f 	beq.w	8001a88 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800164a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800164e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	699b      	ldr	r3, [r3, #24]
 8001656:	2b02      	cmp	r3, #2
 8001658:	f040 8170 	bne.w	800193c <HAL_RCC_OscConfig+0xedc>
 800165c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001660:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8001664:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001668:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800166a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800166e:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	fa93 f2a3 	rbit	r2, r3
 8001678:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800167c:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8001680:	601a      	str	r2, [r3, #0]
  return result;
 8001682:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001686:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800168a:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800168c:	fab3 f383 	clz	r3, r3
 8001690:	b2db      	uxtb	r3, r3
 8001692:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001696:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800169a:	009b      	lsls	r3, r3, #2
 800169c:	461a      	mov	r2, r3
 800169e:	2300      	movs	r3, #0
 80016a0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016a2:	f7fe ff31 	bl	8000508 <HAL_GetTick>
 80016a6:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016aa:	e009      	b.n	80016c0 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016ac:	f7fe ff2c 	bl	8000508 <HAL_GetTick>
 80016b0:	4602      	mov	r2, r0
 80016b2:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80016b6:	1ad3      	subs	r3, r2, r3
 80016b8:	2b02      	cmp	r3, #2
 80016ba:	d901      	bls.n	80016c0 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 80016bc:	2303      	movs	r3, #3
 80016be:	e21c      	b.n	8001afa <HAL_RCC_OscConfig+0x109a>
 80016c0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80016c4:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80016c8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80016cc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016ce:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80016d2:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	fa93 f2a3 	rbit	r2, r3
 80016dc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80016e0:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80016e4:	601a      	str	r2, [r3, #0]
  return result;
 80016e6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80016ea:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80016ee:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016f0:	fab3 f383 	clz	r3, r3
 80016f4:	b2db      	uxtb	r3, r3
 80016f6:	095b      	lsrs	r3, r3, #5
 80016f8:	b2db      	uxtb	r3, r3
 80016fa:	f043 0301 	orr.w	r3, r3, #1
 80016fe:	b2db      	uxtb	r3, r3
 8001700:	2b01      	cmp	r3, #1
 8001702:	d102      	bne.n	800170a <HAL_RCC_OscConfig+0xcaa>
 8001704:	4b64      	ldr	r3, [pc, #400]	@ (8001898 <HAL_RCC_OscConfig+0xe38>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	e027      	b.n	800175a <HAL_RCC_OscConfig+0xcfa>
 800170a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800170e:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8001712:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001716:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001718:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800171c:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	fa93 f2a3 	rbit	r2, r3
 8001726:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800172a:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 800172e:	601a      	str	r2, [r3, #0]
 8001730:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001734:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8001738:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800173c:	601a      	str	r2, [r3, #0]
 800173e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001742:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	fa93 f2a3 	rbit	r2, r3
 800174c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001750:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 8001754:	601a      	str	r2, [r3, #0]
 8001756:	4b50      	ldr	r3, [pc, #320]	@ (8001898 <HAL_RCC_OscConfig+0xe38>)
 8001758:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800175a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800175e:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8001762:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001766:	6011      	str	r1, [r2, #0]
 8001768:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800176c:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8001770:	6812      	ldr	r2, [r2, #0]
 8001772:	fa92 f1a2 	rbit	r1, r2
 8001776:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800177a:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 800177e:	6011      	str	r1, [r2, #0]
  return result;
 8001780:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001784:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8001788:	6812      	ldr	r2, [r2, #0]
 800178a:	fab2 f282 	clz	r2, r2
 800178e:	b2d2      	uxtb	r2, r2
 8001790:	f042 0220 	orr.w	r2, r2, #32
 8001794:	b2d2      	uxtb	r2, r2
 8001796:	f002 021f 	and.w	r2, r2, #31
 800179a:	2101      	movs	r1, #1
 800179c:	fa01 f202 	lsl.w	r2, r1, r2
 80017a0:	4013      	ands	r3, r2
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d182      	bne.n	80016ac <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017a6:	4b3c      	ldr	r3, [pc, #240]	@ (8001898 <HAL_RCC_OscConfig+0xe38>)
 80017a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017aa:	f023 020f 	bic.w	r2, r3, #15
 80017ae:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80017b2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017ba:	4937      	ldr	r1, [pc, #220]	@ (8001898 <HAL_RCC_OscConfig+0xe38>)
 80017bc:	4313      	orrs	r3, r2
 80017be:	62cb      	str	r3, [r1, #44]	@ 0x2c
 80017c0:	4b35      	ldr	r3, [pc, #212]	@ (8001898 <HAL_RCC_OscConfig+0xe38>)
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	f423 1276 	bic.w	r2, r3, #4030464	@ 0x3d8000
 80017c8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80017cc:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	6a19      	ldr	r1, [r3, #32]
 80017d4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80017d8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	69db      	ldr	r3, [r3, #28]
 80017e0:	430b      	orrs	r3, r1
 80017e2:	492d      	ldr	r1, [pc, #180]	@ (8001898 <HAL_RCC_OscConfig+0xe38>)
 80017e4:	4313      	orrs	r3, r2
 80017e6:	604b      	str	r3, [r1, #4]
 80017e8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80017ec:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80017f0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80017f4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017f6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80017fa:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	fa93 f2a3 	rbit	r2, r3
 8001804:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001808:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 800180c:	601a      	str	r2, [r3, #0]
  return result;
 800180e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001812:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8001816:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001818:	fab3 f383 	clz	r3, r3
 800181c:	b2db      	uxtb	r3, r3
 800181e:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001822:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001826:	009b      	lsls	r3, r3, #2
 8001828:	461a      	mov	r2, r3
 800182a:	2301      	movs	r3, #1
 800182c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800182e:	f7fe fe6b 	bl	8000508 <HAL_GetTick>
 8001832:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001836:	e009      	b.n	800184c <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001838:	f7fe fe66 	bl	8000508 <HAL_GetTick>
 800183c:	4602      	mov	r2, r0
 800183e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001842:	1ad3      	subs	r3, r2, r3
 8001844:	2b02      	cmp	r3, #2
 8001846:	d901      	bls.n	800184c <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8001848:	2303      	movs	r3, #3
 800184a:	e156      	b.n	8001afa <HAL_RCC_OscConfig+0x109a>
 800184c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001850:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8001854:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001858:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800185a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800185e:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	fa93 f2a3 	rbit	r2, r3
 8001868:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800186c:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8001870:	601a      	str	r2, [r3, #0]
  return result;
 8001872:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001876:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 800187a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800187c:	fab3 f383 	clz	r3, r3
 8001880:	b2db      	uxtb	r3, r3
 8001882:	095b      	lsrs	r3, r3, #5
 8001884:	b2db      	uxtb	r3, r3
 8001886:	f043 0301 	orr.w	r3, r3, #1
 800188a:	b2db      	uxtb	r3, r3
 800188c:	2b01      	cmp	r3, #1
 800188e:	d105      	bne.n	800189c <HAL_RCC_OscConfig+0xe3c>
 8001890:	4b01      	ldr	r3, [pc, #4]	@ (8001898 <HAL_RCC_OscConfig+0xe38>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	e02a      	b.n	80018ec <HAL_RCC_OscConfig+0xe8c>
 8001896:	bf00      	nop
 8001898:	40021000 	.word	0x40021000
 800189c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80018a0:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80018a4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80018a8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018aa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80018ae:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	fa93 f2a3 	rbit	r2, r3
 80018b8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80018bc:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80018c0:	601a      	str	r2, [r3, #0]
 80018c2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80018c6:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80018ca:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80018ce:	601a      	str	r2, [r3, #0]
 80018d0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80018d4:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	fa93 f2a3 	rbit	r2, r3
 80018de:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80018e2:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 80018e6:	601a      	str	r2, [r3, #0]
 80018e8:	4b86      	ldr	r3, [pc, #536]	@ (8001b04 <HAL_RCC_OscConfig+0x10a4>)
 80018ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018ec:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80018f0:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80018f4:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80018f8:	6011      	str	r1, [r2, #0]
 80018fa:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80018fe:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8001902:	6812      	ldr	r2, [r2, #0]
 8001904:	fa92 f1a2 	rbit	r1, r2
 8001908:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800190c:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8001910:	6011      	str	r1, [r2, #0]
  return result;
 8001912:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001916:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 800191a:	6812      	ldr	r2, [r2, #0]
 800191c:	fab2 f282 	clz	r2, r2
 8001920:	b2d2      	uxtb	r2, r2
 8001922:	f042 0220 	orr.w	r2, r2, #32
 8001926:	b2d2      	uxtb	r2, r2
 8001928:	f002 021f 	and.w	r2, r2, #31
 800192c:	2101      	movs	r1, #1
 800192e:	fa01 f202 	lsl.w	r2, r1, r2
 8001932:	4013      	ands	r3, r2
 8001934:	2b00      	cmp	r3, #0
 8001936:	f43f af7f 	beq.w	8001838 <HAL_RCC_OscConfig+0xdd8>
 800193a:	e0dd      	b.n	8001af8 <HAL_RCC_OscConfig+0x1098>
 800193c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001940:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8001944:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001948:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800194a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800194e:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	fa93 f2a3 	rbit	r2, r3
 8001958:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800195c:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8001960:	601a      	str	r2, [r3, #0]
  return result;
 8001962:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001966:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 800196a:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800196c:	fab3 f383 	clz	r3, r3
 8001970:	b2db      	uxtb	r3, r3
 8001972:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001976:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800197a:	009b      	lsls	r3, r3, #2
 800197c:	461a      	mov	r2, r3
 800197e:	2300      	movs	r3, #0
 8001980:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001982:	f7fe fdc1 	bl	8000508 <HAL_GetTick>
 8001986:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800198a:	e009      	b.n	80019a0 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800198c:	f7fe fdbc 	bl	8000508 <HAL_GetTick>
 8001990:	4602      	mov	r2, r0
 8001992:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001996:	1ad3      	subs	r3, r2, r3
 8001998:	2b02      	cmp	r3, #2
 800199a:	d901      	bls.n	80019a0 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 800199c:	2303      	movs	r3, #3
 800199e:	e0ac      	b.n	8001afa <HAL_RCC_OscConfig+0x109a>
 80019a0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80019a4:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80019a8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80019ac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019ae:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80019b2:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	fa93 f2a3 	rbit	r2, r3
 80019bc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80019c0:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80019c4:	601a      	str	r2, [r3, #0]
  return result;
 80019c6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80019ca:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80019ce:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019d0:	fab3 f383 	clz	r3, r3
 80019d4:	b2db      	uxtb	r3, r3
 80019d6:	095b      	lsrs	r3, r3, #5
 80019d8:	b2db      	uxtb	r3, r3
 80019da:	f043 0301 	orr.w	r3, r3, #1
 80019de:	b2db      	uxtb	r3, r3
 80019e0:	2b01      	cmp	r3, #1
 80019e2:	d102      	bne.n	80019ea <HAL_RCC_OscConfig+0xf8a>
 80019e4:	4b47      	ldr	r3, [pc, #284]	@ (8001b04 <HAL_RCC_OscConfig+0x10a4>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	e027      	b.n	8001a3a <HAL_RCC_OscConfig+0xfda>
 80019ea:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80019ee:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 80019f2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80019f6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019f8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80019fc:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	fa93 f2a3 	rbit	r2, r3
 8001a06:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a0a:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8001a0e:	601a      	str	r2, [r3, #0]
 8001a10:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a14:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8001a18:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001a1c:	601a      	str	r2, [r3, #0]
 8001a1e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a22:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	fa93 f2a3 	rbit	r2, r3
 8001a2c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a30:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 8001a34:	601a      	str	r2, [r3, #0]
 8001a36:	4b33      	ldr	r3, [pc, #204]	@ (8001b04 <HAL_RCC_OscConfig+0x10a4>)
 8001a38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a3a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001a3e:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8001a42:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001a46:	6011      	str	r1, [r2, #0]
 8001a48:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001a4c:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8001a50:	6812      	ldr	r2, [r2, #0]
 8001a52:	fa92 f1a2 	rbit	r1, r2
 8001a56:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001a5a:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8001a5e:	6011      	str	r1, [r2, #0]
  return result;
 8001a60:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001a64:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8001a68:	6812      	ldr	r2, [r2, #0]
 8001a6a:	fab2 f282 	clz	r2, r2
 8001a6e:	b2d2      	uxtb	r2, r2
 8001a70:	f042 0220 	orr.w	r2, r2, #32
 8001a74:	b2d2      	uxtb	r2, r2
 8001a76:	f002 021f 	and.w	r2, r2, #31
 8001a7a:	2101      	movs	r1, #1
 8001a7c:	fa01 f202 	lsl.w	r2, r1, r2
 8001a80:	4013      	ands	r3, r2
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d182      	bne.n	800198c <HAL_RCC_OscConfig+0xf2c>
 8001a86:	e037      	b.n	8001af8 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a88:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a8c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	699b      	ldr	r3, [r3, #24]
 8001a94:	2b01      	cmp	r3, #1
 8001a96:	d101      	bne.n	8001a9c <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8001a98:	2301      	movs	r3, #1
 8001a9a:	e02e      	b.n	8001afa <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001a9c:	4b19      	ldr	r3, [pc, #100]	@ (8001b04 <HAL_RCC_OscConfig+0x10a4>)
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8001aa4:	4b17      	ldr	r3, [pc, #92]	@ (8001b04 <HAL_RCC_OscConfig+0x10a4>)
 8001aa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001aa8:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001aac:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8001ab0:	f403 32c0 	and.w	r2, r3, #98304	@ 0x18000
 8001ab4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ab8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	69db      	ldr	r3, [r3, #28]
 8001ac0:	429a      	cmp	r2, r3
 8001ac2:	d117      	bne.n	8001af4 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001ac4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8001ac8:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001acc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ad0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001ad8:	429a      	cmp	r2, r3
 8001ada:	d10b      	bne.n	8001af4 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8001adc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001ae0:	f003 020f 	and.w	r2, r3, #15
 8001ae4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ae8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001af0:	429a      	cmp	r2, r3
 8001af2:	d001      	beq.n	8001af8 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8001af4:	2301      	movs	r3, #1
 8001af6:	e000      	b.n	8001afa <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8001af8:	2300      	movs	r3, #0
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}
 8001b04:	40021000 	.word	0x40021000

08001b08 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b09e      	sub	sp, #120	@ 0x78
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
 8001b10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001b12:	2300      	movs	r3, #0
 8001b14:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d101      	bne.n	8001b20 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	e162      	b.n	8001de6 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b20:	4b90      	ldr	r3, [pc, #576]	@ (8001d64 <HAL_RCC_ClockConfig+0x25c>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f003 0307 	and.w	r3, r3, #7
 8001b28:	683a      	ldr	r2, [r7, #0]
 8001b2a:	429a      	cmp	r2, r3
 8001b2c:	d910      	bls.n	8001b50 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b2e:	4b8d      	ldr	r3, [pc, #564]	@ (8001d64 <HAL_RCC_ClockConfig+0x25c>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f023 0207 	bic.w	r2, r3, #7
 8001b36:	498b      	ldr	r1, [pc, #556]	@ (8001d64 <HAL_RCC_ClockConfig+0x25c>)
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	4313      	orrs	r3, r2
 8001b3c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b3e:	4b89      	ldr	r3, [pc, #548]	@ (8001d64 <HAL_RCC_ClockConfig+0x25c>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f003 0307 	and.w	r3, r3, #7
 8001b46:	683a      	ldr	r2, [r7, #0]
 8001b48:	429a      	cmp	r2, r3
 8001b4a:	d001      	beq.n	8001b50 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	e14a      	b.n	8001de6 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f003 0302 	and.w	r3, r3, #2
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d008      	beq.n	8001b6e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b5c:	4b82      	ldr	r3, [pc, #520]	@ (8001d68 <HAL_RCC_ClockConfig+0x260>)
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	689b      	ldr	r3, [r3, #8]
 8001b68:	497f      	ldr	r1, [pc, #508]	@ (8001d68 <HAL_RCC_ClockConfig+0x260>)
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f003 0301 	and.w	r3, r3, #1
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	f000 80dc 	beq.w	8001d34 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	2b01      	cmp	r3, #1
 8001b82:	d13c      	bne.n	8001bfe <HAL_RCC_ClockConfig+0xf6>
 8001b84:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001b88:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b8a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001b8c:	fa93 f3a3 	rbit	r3, r3
 8001b90:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8001b92:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b94:	fab3 f383 	clz	r3, r3
 8001b98:	b2db      	uxtb	r3, r3
 8001b9a:	095b      	lsrs	r3, r3, #5
 8001b9c:	b2db      	uxtb	r3, r3
 8001b9e:	f043 0301 	orr.w	r3, r3, #1
 8001ba2:	b2db      	uxtb	r3, r3
 8001ba4:	2b01      	cmp	r3, #1
 8001ba6:	d102      	bne.n	8001bae <HAL_RCC_ClockConfig+0xa6>
 8001ba8:	4b6f      	ldr	r3, [pc, #444]	@ (8001d68 <HAL_RCC_ClockConfig+0x260>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	e00f      	b.n	8001bce <HAL_RCC_ClockConfig+0xc6>
 8001bae:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001bb2:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bb4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001bb6:	fa93 f3a3 	rbit	r3, r3
 8001bba:	667b      	str	r3, [r7, #100]	@ 0x64
 8001bbc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001bc0:	663b      	str	r3, [r7, #96]	@ 0x60
 8001bc2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001bc4:	fa93 f3a3 	rbit	r3, r3
 8001bc8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001bca:	4b67      	ldr	r3, [pc, #412]	@ (8001d68 <HAL_RCC_ClockConfig+0x260>)
 8001bcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bce:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001bd2:	65ba      	str	r2, [r7, #88]	@ 0x58
 8001bd4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001bd6:	fa92 f2a2 	rbit	r2, r2
 8001bda:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8001bdc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8001bde:	fab2 f282 	clz	r2, r2
 8001be2:	b2d2      	uxtb	r2, r2
 8001be4:	f042 0220 	orr.w	r2, r2, #32
 8001be8:	b2d2      	uxtb	r2, r2
 8001bea:	f002 021f 	and.w	r2, r2, #31
 8001bee:	2101      	movs	r1, #1
 8001bf0:	fa01 f202 	lsl.w	r2, r1, r2
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d17b      	bne.n	8001cf2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	e0f3      	b.n	8001de6 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	2b02      	cmp	r3, #2
 8001c04:	d13c      	bne.n	8001c80 <HAL_RCC_ClockConfig+0x178>
 8001c06:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001c0a:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c0c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001c0e:	fa93 f3a3 	rbit	r3, r3
 8001c12:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8001c14:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c16:	fab3 f383 	clz	r3, r3
 8001c1a:	b2db      	uxtb	r3, r3
 8001c1c:	095b      	lsrs	r3, r3, #5
 8001c1e:	b2db      	uxtb	r3, r3
 8001c20:	f043 0301 	orr.w	r3, r3, #1
 8001c24:	b2db      	uxtb	r3, r3
 8001c26:	2b01      	cmp	r3, #1
 8001c28:	d102      	bne.n	8001c30 <HAL_RCC_ClockConfig+0x128>
 8001c2a:	4b4f      	ldr	r3, [pc, #316]	@ (8001d68 <HAL_RCC_ClockConfig+0x260>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	e00f      	b.n	8001c50 <HAL_RCC_ClockConfig+0x148>
 8001c30:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001c34:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c36:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001c38:	fa93 f3a3 	rbit	r3, r3
 8001c3c:	647b      	str	r3, [r7, #68]	@ 0x44
 8001c3e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001c42:	643b      	str	r3, [r7, #64]	@ 0x40
 8001c44:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001c46:	fa93 f3a3 	rbit	r3, r3
 8001c4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001c4c:	4b46      	ldr	r3, [pc, #280]	@ (8001d68 <HAL_RCC_ClockConfig+0x260>)
 8001c4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c50:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001c54:	63ba      	str	r2, [r7, #56]	@ 0x38
 8001c56:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001c58:	fa92 f2a2 	rbit	r2, r2
 8001c5c:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8001c5e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001c60:	fab2 f282 	clz	r2, r2
 8001c64:	b2d2      	uxtb	r2, r2
 8001c66:	f042 0220 	orr.w	r2, r2, #32
 8001c6a:	b2d2      	uxtb	r2, r2
 8001c6c:	f002 021f 	and.w	r2, r2, #31
 8001c70:	2101      	movs	r1, #1
 8001c72:	fa01 f202 	lsl.w	r2, r1, r2
 8001c76:	4013      	ands	r3, r2
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d13a      	bne.n	8001cf2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	e0b2      	b.n	8001de6 <HAL_RCC_ClockConfig+0x2de>
 8001c80:	2302      	movs	r3, #2
 8001c82:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001c86:	fa93 f3a3 	rbit	r3, r3
 8001c8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8001c8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c8e:	fab3 f383 	clz	r3, r3
 8001c92:	b2db      	uxtb	r3, r3
 8001c94:	095b      	lsrs	r3, r3, #5
 8001c96:	b2db      	uxtb	r3, r3
 8001c98:	f043 0301 	orr.w	r3, r3, #1
 8001c9c:	b2db      	uxtb	r3, r3
 8001c9e:	2b01      	cmp	r3, #1
 8001ca0:	d102      	bne.n	8001ca8 <HAL_RCC_ClockConfig+0x1a0>
 8001ca2:	4b31      	ldr	r3, [pc, #196]	@ (8001d68 <HAL_RCC_ClockConfig+0x260>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	e00d      	b.n	8001cc4 <HAL_RCC_ClockConfig+0x1bc>
 8001ca8:	2302      	movs	r3, #2
 8001caa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001cae:	fa93 f3a3 	rbit	r3, r3
 8001cb2:	627b      	str	r3, [r7, #36]	@ 0x24
 8001cb4:	2302      	movs	r3, #2
 8001cb6:	623b      	str	r3, [r7, #32]
 8001cb8:	6a3b      	ldr	r3, [r7, #32]
 8001cba:	fa93 f3a3 	rbit	r3, r3
 8001cbe:	61fb      	str	r3, [r7, #28]
 8001cc0:	4b29      	ldr	r3, [pc, #164]	@ (8001d68 <HAL_RCC_ClockConfig+0x260>)
 8001cc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cc4:	2202      	movs	r2, #2
 8001cc6:	61ba      	str	r2, [r7, #24]
 8001cc8:	69ba      	ldr	r2, [r7, #24]
 8001cca:	fa92 f2a2 	rbit	r2, r2
 8001cce:	617a      	str	r2, [r7, #20]
  return result;
 8001cd0:	697a      	ldr	r2, [r7, #20]
 8001cd2:	fab2 f282 	clz	r2, r2
 8001cd6:	b2d2      	uxtb	r2, r2
 8001cd8:	f042 0220 	orr.w	r2, r2, #32
 8001cdc:	b2d2      	uxtb	r2, r2
 8001cde:	f002 021f 	and.w	r2, r2, #31
 8001ce2:	2101      	movs	r1, #1
 8001ce4:	fa01 f202 	lsl.w	r2, r1, r2
 8001ce8:	4013      	ands	r3, r2
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d101      	bne.n	8001cf2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e079      	b.n	8001de6 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001cf2:	4b1d      	ldr	r3, [pc, #116]	@ (8001d68 <HAL_RCC_ClockConfig+0x260>)
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	f023 0203 	bic.w	r2, r3, #3
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	491a      	ldr	r1, [pc, #104]	@ (8001d68 <HAL_RCC_ClockConfig+0x260>)
 8001d00:	4313      	orrs	r3, r2
 8001d02:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d04:	f7fe fc00 	bl	8000508 <HAL_GetTick>
 8001d08:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d0a:	e00a      	b.n	8001d22 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d0c:	f7fe fbfc 	bl	8000508 <HAL_GetTick>
 8001d10:	4602      	mov	r2, r0
 8001d12:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001d14:	1ad3      	subs	r3, r2, r3
 8001d16:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d901      	bls.n	8001d22 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8001d1e:	2303      	movs	r3, #3
 8001d20:	e061      	b.n	8001de6 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d22:	4b11      	ldr	r3, [pc, #68]	@ (8001d68 <HAL_RCC_ClockConfig+0x260>)
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	f003 020c 	and.w	r2, r3, #12
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	009b      	lsls	r3, r3, #2
 8001d30:	429a      	cmp	r2, r3
 8001d32:	d1eb      	bne.n	8001d0c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d34:	4b0b      	ldr	r3, [pc, #44]	@ (8001d64 <HAL_RCC_ClockConfig+0x25c>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f003 0307 	and.w	r3, r3, #7
 8001d3c:	683a      	ldr	r2, [r7, #0]
 8001d3e:	429a      	cmp	r2, r3
 8001d40:	d214      	bcs.n	8001d6c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d42:	4b08      	ldr	r3, [pc, #32]	@ (8001d64 <HAL_RCC_ClockConfig+0x25c>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f023 0207 	bic.w	r2, r3, #7
 8001d4a:	4906      	ldr	r1, [pc, #24]	@ (8001d64 <HAL_RCC_ClockConfig+0x25c>)
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	4313      	orrs	r3, r2
 8001d50:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d52:	4b04      	ldr	r3, [pc, #16]	@ (8001d64 <HAL_RCC_ClockConfig+0x25c>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f003 0307 	and.w	r3, r3, #7
 8001d5a:	683a      	ldr	r2, [r7, #0]
 8001d5c:	429a      	cmp	r2, r3
 8001d5e:	d005      	beq.n	8001d6c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8001d60:	2301      	movs	r3, #1
 8001d62:	e040      	b.n	8001de6 <HAL_RCC_ClockConfig+0x2de>
 8001d64:	40022000 	.word	0x40022000
 8001d68:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f003 0304 	and.w	r3, r3, #4
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d008      	beq.n	8001d8a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d78:	4b1d      	ldr	r3, [pc, #116]	@ (8001df0 <HAL_RCC_ClockConfig+0x2e8>)
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	68db      	ldr	r3, [r3, #12]
 8001d84:	491a      	ldr	r1, [pc, #104]	@ (8001df0 <HAL_RCC_ClockConfig+0x2e8>)
 8001d86:	4313      	orrs	r3, r2
 8001d88:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f003 0308 	and.w	r3, r3, #8
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d009      	beq.n	8001daa <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d96:	4b16      	ldr	r3, [pc, #88]	@ (8001df0 <HAL_RCC_ClockConfig+0x2e8>)
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	691b      	ldr	r3, [r3, #16]
 8001da2:	00db      	lsls	r3, r3, #3
 8001da4:	4912      	ldr	r1, [pc, #72]	@ (8001df0 <HAL_RCC_ClockConfig+0x2e8>)
 8001da6:	4313      	orrs	r3, r2
 8001da8:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001daa:	f000 f829 	bl	8001e00 <HAL_RCC_GetSysClockFreq>
 8001dae:	4601      	mov	r1, r0
 8001db0:	4b0f      	ldr	r3, [pc, #60]	@ (8001df0 <HAL_RCC_ClockConfig+0x2e8>)
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001db8:	22f0      	movs	r2, #240	@ 0xf0
 8001dba:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dbc:	693a      	ldr	r2, [r7, #16]
 8001dbe:	fa92 f2a2 	rbit	r2, r2
 8001dc2:	60fa      	str	r2, [r7, #12]
  return result;
 8001dc4:	68fa      	ldr	r2, [r7, #12]
 8001dc6:	fab2 f282 	clz	r2, r2
 8001dca:	b2d2      	uxtb	r2, r2
 8001dcc:	40d3      	lsrs	r3, r2
 8001dce:	4a09      	ldr	r2, [pc, #36]	@ (8001df4 <HAL_RCC_ClockConfig+0x2ec>)
 8001dd0:	5cd3      	ldrb	r3, [r2, r3]
 8001dd2:	fa21 f303 	lsr.w	r3, r1, r3
 8001dd6:	4a08      	ldr	r2, [pc, #32]	@ (8001df8 <HAL_RCC_ClockConfig+0x2f0>)
 8001dd8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8001dda:	4b08      	ldr	r3, [pc, #32]	@ (8001dfc <HAL_RCC_ClockConfig+0x2f4>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4618      	mov	r0, r3
 8001de0:	f7fe fb4e 	bl	8000480 <HAL_InitTick>
  
  return HAL_OK;
 8001de4:	2300      	movs	r3, #0
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	3778      	adds	r7, #120	@ 0x78
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	bf00      	nop
 8001df0:	40021000 	.word	0x40021000
 8001df4:	08001f18 	.word	0x08001f18
 8001df8:	20000000 	.word	0x20000000
 8001dfc:	20000004 	.word	0x20000004

08001e00 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e00:	b480      	push	{r7}
 8001e02:	b087      	sub	sp, #28
 8001e04:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001e06:	2300      	movs	r3, #0
 8001e08:	60fb      	str	r3, [r7, #12]
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	60bb      	str	r3, [r7, #8]
 8001e0e:	2300      	movs	r3, #0
 8001e10:	617b      	str	r3, [r7, #20]
 8001e12:	2300      	movs	r3, #0
 8001e14:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001e16:	2300      	movs	r3, #0
 8001e18:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8001e1a:	4b1f      	ldr	r3, [pc, #124]	@ (8001e98 <HAL_RCC_GetSysClockFreq+0x98>)
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	f003 030c 	and.w	r3, r3, #12
 8001e26:	2b04      	cmp	r3, #4
 8001e28:	d002      	beq.n	8001e30 <HAL_RCC_GetSysClockFreq+0x30>
 8001e2a:	2b08      	cmp	r3, #8
 8001e2c:	d003      	beq.n	8001e36 <HAL_RCC_GetSysClockFreq+0x36>
 8001e2e:	e029      	b.n	8001e84 <HAL_RCC_GetSysClockFreq+0x84>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001e30:	4b1a      	ldr	r3, [pc, #104]	@ (8001e9c <HAL_RCC_GetSysClockFreq+0x9c>)
 8001e32:	613b      	str	r3, [r7, #16]
      break;
 8001e34:	e029      	b.n	8001e8a <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	0c9b      	lsrs	r3, r3, #18
 8001e3a:	f003 030f 	and.w	r3, r3, #15
 8001e3e:	4a18      	ldr	r2, [pc, #96]	@ (8001ea0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001e40:	5cd3      	ldrb	r3, [r2, r3]
 8001e42:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8001e44:	4b14      	ldr	r3, [pc, #80]	@ (8001e98 <HAL_RCC_GetSysClockFreq+0x98>)
 8001e46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e48:	f003 030f 	and.w	r3, r3, #15
 8001e4c:	4a15      	ldr	r2, [pc, #84]	@ (8001ea4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001e4e:	5cd3      	ldrb	r3, [r2, r3]
 8001e50:	60bb      	str	r3, [r7, #8]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d008      	beq.n	8001e6e <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001e5c:	4a0f      	ldr	r2, [pc, #60]	@ (8001e9c <HAL_RCC_GetSysClockFreq+0x9c>)
 8001e5e:	68bb      	ldr	r3, [r7, #8]
 8001e60:	fbb2 f2f3 	udiv	r2, r2, r3
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	fb02 f303 	mul.w	r3, r2, r3
 8001e6a:	617b      	str	r3, [r7, #20]
 8001e6c:	e007      	b.n	8001e7e <HAL_RCC_GetSysClockFreq+0x7e>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001e6e:	4a0b      	ldr	r2, [pc, #44]	@ (8001e9c <HAL_RCC_GetSysClockFreq+0x9c>)
 8001e70:	68bb      	ldr	r3, [r7, #8]
 8001e72:	fbb2 f2f3 	udiv	r2, r2, r3
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	fb02 f303 	mul.w	r3, r2, r3
 8001e7c:	617b      	str	r3, [r7, #20]
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8001e7e:	697b      	ldr	r3, [r7, #20]
 8001e80:	613b      	str	r3, [r7, #16]
      break;
 8001e82:	e002      	b.n	8001e8a <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001e84:	4b05      	ldr	r3, [pc, #20]	@ (8001e9c <HAL_RCC_GetSysClockFreq+0x9c>)
 8001e86:	613b      	str	r3, [r7, #16]
      break;
 8001e88:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e8a:	693b      	ldr	r3, [r7, #16]
}
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	371c      	adds	r7, #28
 8001e90:	46bd      	mov	sp, r7
 8001e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e96:	4770      	bx	lr
 8001e98:	40021000 	.word	0x40021000
 8001e9c:	007a1200 	.word	0x007a1200
 8001ea0:	08001f28 	.word	0x08001f28
 8001ea4:	08001f38 	.word	0x08001f38

08001ea8 <memset>:
 8001ea8:	4402      	add	r2, r0
 8001eaa:	4603      	mov	r3, r0
 8001eac:	4293      	cmp	r3, r2
 8001eae:	d100      	bne.n	8001eb2 <memset+0xa>
 8001eb0:	4770      	bx	lr
 8001eb2:	f803 1b01 	strb.w	r1, [r3], #1
 8001eb6:	e7f9      	b.n	8001eac <memset+0x4>

08001eb8 <__libc_init_array>:
 8001eb8:	b570      	push	{r4, r5, r6, lr}
 8001eba:	4d0d      	ldr	r5, [pc, #52]	@ (8001ef0 <__libc_init_array+0x38>)
 8001ebc:	4c0d      	ldr	r4, [pc, #52]	@ (8001ef4 <__libc_init_array+0x3c>)
 8001ebe:	1b64      	subs	r4, r4, r5
 8001ec0:	10a4      	asrs	r4, r4, #2
 8001ec2:	2600      	movs	r6, #0
 8001ec4:	42a6      	cmp	r6, r4
 8001ec6:	d109      	bne.n	8001edc <__libc_init_array+0x24>
 8001ec8:	4d0b      	ldr	r5, [pc, #44]	@ (8001ef8 <__libc_init_array+0x40>)
 8001eca:	4c0c      	ldr	r4, [pc, #48]	@ (8001efc <__libc_init_array+0x44>)
 8001ecc:	f000 f818 	bl	8001f00 <_init>
 8001ed0:	1b64      	subs	r4, r4, r5
 8001ed2:	10a4      	asrs	r4, r4, #2
 8001ed4:	2600      	movs	r6, #0
 8001ed6:	42a6      	cmp	r6, r4
 8001ed8:	d105      	bne.n	8001ee6 <__libc_init_array+0x2e>
 8001eda:	bd70      	pop	{r4, r5, r6, pc}
 8001edc:	f855 3b04 	ldr.w	r3, [r5], #4
 8001ee0:	4798      	blx	r3
 8001ee2:	3601      	adds	r6, #1
 8001ee4:	e7ee      	b.n	8001ec4 <__libc_init_array+0xc>
 8001ee6:	f855 3b04 	ldr.w	r3, [r5], #4
 8001eea:	4798      	blx	r3
 8001eec:	3601      	adds	r6, #1
 8001eee:	e7f2      	b.n	8001ed6 <__libc_init_array+0x1e>
 8001ef0:	08001f48 	.word	0x08001f48
 8001ef4:	08001f48 	.word	0x08001f48
 8001ef8:	08001f48 	.word	0x08001f48
 8001efc:	08001f4c 	.word	0x08001f4c

08001f00 <_init>:
 8001f00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f02:	bf00      	nop
 8001f04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001f06:	bc08      	pop	{r3}
 8001f08:	469e      	mov	lr, r3
 8001f0a:	4770      	bx	lr

08001f0c <_fini>:
 8001f0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f0e:	bf00      	nop
 8001f10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001f12:	bc08      	pop	{r3}
 8001f14:	469e      	mov	lr, r3
 8001f16:	4770      	bx	lr
