
TestButtonRegisters.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001e1c  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08001fb0  08001fb0  00002fb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001fe0  08001fe0  0000300c  2**0
                  CONTENTS
  4 .ARM          00000000  08001fe0  08001fe0  0000300c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001fe0  08001fe0  0000300c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001fe0  08001fe0  00002fe0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001fe4  08001fe4  00002fe4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08001fe8  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000300c  2**0
                  CONTENTS
 10 .bss          00000024  2000000c  2000000c  0000300c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000030  20000030  0000300c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000300c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00003f28  00000000  00000000  0000303c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000ebc  00000000  00000000  00006f64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000400  00000000  00000000  00007e20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000002dd  00000000  00000000  00008220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001e2b4  00000000  00000000  000084fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00005447  00000000  00000000  000267b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b706d  00000000  00000000  0002bbf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000e2c65  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000e28  00000000  00000000  000e2ca8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000087  00000000  00000000  000e3ad0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08001f98 	.word	0x08001f98

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08001f98 	.word	0x08001f98

080001d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001d8:	f000 f95c 	bl	8000494 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001dc:	f000 f804 	bl	80001e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001e0:	f000 f83e 	bl	8000260 <MX_GPIO_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001e4:	bf00      	nop
 80001e6:	e7fd      	b.n	80001e4 <main+0x10>

080001e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001e8:	b580      	push	{r7, lr}
 80001ea:	b090      	sub	sp, #64	@ 0x40
 80001ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001ee:	f107 0318 	add.w	r3, r7, #24
 80001f2:	2228      	movs	r2, #40	@ 0x28
 80001f4:	2100      	movs	r1, #0
 80001f6:	4618      	mov	r0, r3
 80001f8:	f001 fea2 	bl	8001f40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001fc:	1d3b      	adds	r3, r7, #4
 80001fe:	2200      	movs	r2, #0
 8000200:	601a      	str	r2, [r3, #0]
 8000202:	605a      	str	r2, [r3, #4]
 8000204:	609a      	str	r2, [r3, #8]
 8000206:	60da      	str	r2, [r3, #12]
 8000208:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800020a:	2302      	movs	r3, #2
 800020c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800020e:	2301      	movs	r3, #1
 8000210:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000212:	2310      	movs	r3, #16
 8000214:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000216:	2300      	movs	r3, #0
 8000218:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800021a:	f107 0318 	add.w	r3, r7, #24
 800021e:	4618      	mov	r0, r3
 8000220:	f000 fc6a 	bl	8000af8 <HAL_RCC_OscConfig>
 8000224:	4603      	mov	r3, r0
 8000226:	2b00      	cmp	r3, #0
 8000228:	d001      	beq.n	800022e <SystemClock_Config+0x46>
  {
    Error_Handler();
 800022a:	f000 f895 	bl	8000358 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800022e:	230f      	movs	r3, #15
 8000230:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000232:	2300      	movs	r3, #0
 8000234:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000236:	2300      	movs	r3, #0
 8000238:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800023a:	2300      	movs	r3, #0
 800023c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800023e:	2300      	movs	r3, #0
 8000240:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000242:	1d3b      	adds	r3, r7, #4
 8000244:	2100      	movs	r1, #0
 8000246:	4618      	mov	r0, r3
 8000248:	f001 fcaa 	bl	8001ba0 <HAL_RCC_ClockConfig>
 800024c:	4603      	mov	r3, r0
 800024e:	2b00      	cmp	r3, #0
 8000250:	d001      	beq.n	8000256 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000252:	f000 f881 	bl	8000358 <Error_Handler>
  }
}
 8000256:	bf00      	nop
 8000258:	3740      	adds	r7, #64	@ 0x40
 800025a:	46bd      	mov	sp, r7
 800025c:	bd80      	pop	{r7, pc}
	...

08000260 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000260:	b580      	push	{r7, lr}
 8000262:	b088      	sub	sp, #32
 8000264:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000266:	f107 030c 	add.w	r3, r7, #12
 800026a:	2200      	movs	r2, #0
 800026c:	601a      	str	r2, [r3, #0]
 800026e:	605a      	str	r2, [r3, #4]
 8000270:	609a      	str	r2, [r3, #8]
 8000272:	60da      	str	r2, [r3, #12]
 8000274:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000276:	4b23      	ldr	r3, [pc, #140]	@ (8000304 <MX_GPIO_Init+0xa4>)
 8000278:	695b      	ldr	r3, [r3, #20]
 800027a:	4a22      	ldr	r2, [pc, #136]	@ (8000304 <MX_GPIO_Init+0xa4>)
 800027c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000280:	6153      	str	r3, [r2, #20]
 8000282:	4b20      	ldr	r3, [pc, #128]	@ (8000304 <MX_GPIO_Init+0xa4>)
 8000284:	695b      	ldr	r3, [r3, #20]
 8000286:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800028a:	60bb      	str	r3, [r7, #8]
 800028c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800028e:	4b1d      	ldr	r3, [pc, #116]	@ (8000304 <MX_GPIO_Init+0xa4>)
 8000290:	695b      	ldr	r3, [r3, #20]
 8000292:	4a1c      	ldr	r2, [pc, #112]	@ (8000304 <MX_GPIO_Init+0xa4>)
 8000294:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000298:	6153      	str	r3, [r2, #20]
 800029a:	4b1a      	ldr	r3, [pc, #104]	@ (8000304 <MX_GPIO_Init+0xa4>)
 800029c:	695b      	ldr	r3, [r3, #20]
 800029e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80002a2:	607b      	str	r3, [r7, #4]
 80002a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80002a6:	2200      	movs	r2, #0
 80002a8:	2120      	movs	r1, #32
 80002aa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80002ae:	f000 fbf3 	bl	8000a98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_USER_Pin */
  GPIO_InitStruct.Pin = B1_USER_Pin;
 80002b2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80002b6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80002b8:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80002bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002be:	2300      	movs	r3, #0
 80002c0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(B1_USER_GPIO_Port, &GPIO_InitStruct);
 80002c2:	f107 030c 	add.w	r3, r7, #12
 80002c6:	4619      	mov	r1, r3
 80002c8:	480f      	ldr	r0, [pc, #60]	@ (8000308 <MX_GPIO_Init+0xa8>)
 80002ca:	f000 fa5b 	bl	8000784 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80002ce:	2320      	movs	r3, #32
 80002d0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002d2:	2301      	movs	r3, #1
 80002d4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002d6:	2300      	movs	r3, #0
 80002d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002da:	2300      	movs	r3, #0
 80002dc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80002de:	f107 030c 	add.w	r3, r7, #12
 80002e2:	4619      	mov	r1, r3
 80002e4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80002e8:	f000 fa4c 	bl	8000784 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
  /* Enable and set EXTI Line 15_10 Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 2, 0);         // Set priority for the interrupt
 80002ec:	2200      	movs	r2, #0
 80002ee:	2102      	movs	r1, #2
 80002f0:	2028      	movs	r0, #40	@ 0x28
 80002f2:	f000 fa10 	bl	8000716 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);                  // Enable the interrupt
 80002f6:	2028      	movs	r0, #40	@ 0x28
 80002f8:	f000 fa29 	bl	800074e <HAL_NVIC_EnableIRQ>
/* USER CODE END MX_GPIO_Init_2 */
}
 80002fc:	bf00      	nop
 80002fe:	3720      	adds	r7, #32
 8000300:	46bd      	mov	sp, r7
 8000302:	bd80      	pop	{r7, pc}
 8000304:	40021000 	.word	0x40021000
 8000308:	48000800 	.word	0x48000800

0800030c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
int prev_val = 0;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 800030c:	b580      	push	{r7, lr}
 800030e:	b082      	sub	sp, #8
 8000310:	af00      	add	r7, sp, #0
 8000312:	4603      	mov	r3, r0
 8000314:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == B1_USER_Pin) {
 8000316:	88fb      	ldrh	r3, [r7, #6]
 8000318:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800031c:	d116      	bne.n	800034c <HAL_GPIO_EXTI_Callback+0x40>
    	if (prev_val == 0){
 800031e:	4b0d      	ldr	r3, [pc, #52]	@ (8000354 <HAL_GPIO_EXTI_Callback+0x48>)
 8000320:	681b      	ldr	r3, [r3, #0]
 8000322:	2b00      	cmp	r3, #0
 8000324:	d109      	bne.n	800033a <HAL_GPIO_EXTI_Callback+0x2e>
    		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000326:	2200      	movs	r2, #0
 8000328:	2120      	movs	r1, #32
 800032a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800032e:	f000 fbb3 	bl	8000a98 <HAL_GPIO_WritePin>
    		prev_val = 1;
 8000332:	4b08      	ldr	r3, [pc, #32]	@ (8000354 <HAL_GPIO_EXTI_Callback+0x48>)
 8000334:	2201      	movs	r2, #1
 8000336:	601a      	str	r2, [r3, #0]
    		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
    		prev_val = 0;
    	}
        //HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
    }
}
 8000338:	e008      	b.n	800034c <HAL_GPIO_EXTI_Callback+0x40>
    		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 800033a:	2201      	movs	r2, #1
 800033c:	2120      	movs	r1, #32
 800033e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000342:	f000 fba9 	bl	8000a98 <HAL_GPIO_WritePin>
    		prev_val = 0;
 8000346:	4b03      	ldr	r3, [pc, #12]	@ (8000354 <HAL_GPIO_EXTI_Callback+0x48>)
 8000348:	2200      	movs	r2, #0
 800034a:	601a      	str	r2, [r3, #0]
}
 800034c:	bf00      	nop
 800034e:	3708      	adds	r7, #8
 8000350:	46bd      	mov	sp, r7
 8000352:	bd80      	pop	{r7, pc}
 8000354:	20000028 	.word	0x20000028

08000358 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000358:	b480      	push	{r7}
 800035a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800035c:	b672      	cpsid	i
}
 800035e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000360:	bf00      	nop
 8000362:	e7fd      	b.n	8000360 <Error_Handler+0x8>

08000364 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000364:	b480      	push	{r7}
 8000366:	b083      	sub	sp, #12
 8000368:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800036a:	4b0f      	ldr	r3, [pc, #60]	@ (80003a8 <HAL_MspInit+0x44>)
 800036c:	699b      	ldr	r3, [r3, #24]
 800036e:	4a0e      	ldr	r2, [pc, #56]	@ (80003a8 <HAL_MspInit+0x44>)
 8000370:	f043 0301 	orr.w	r3, r3, #1
 8000374:	6193      	str	r3, [r2, #24]
 8000376:	4b0c      	ldr	r3, [pc, #48]	@ (80003a8 <HAL_MspInit+0x44>)
 8000378:	699b      	ldr	r3, [r3, #24]
 800037a:	f003 0301 	and.w	r3, r3, #1
 800037e:	607b      	str	r3, [r7, #4]
 8000380:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000382:	4b09      	ldr	r3, [pc, #36]	@ (80003a8 <HAL_MspInit+0x44>)
 8000384:	69db      	ldr	r3, [r3, #28]
 8000386:	4a08      	ldr	r2, [pc, #32]	@ (80003a8 <HAL_MspInit+0x44>)
 8000388:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800038c:	61d3      	str	r3, [r2, #28]
 800038e:	4b06      	ldr	r3, [pc, #24]	@ (80003a8 <HAL_MspInit+0x44>)
 8000390:	69db      	ldr	r3, [r3, #28]
 8000392:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000396:	603b      	str	r3, [r7, #0]
 8000398:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800039a:	bf00      	nop
 800039c:	370c      	adds	r7, #12
 800039e:	46bd      	mov	sp, r7
 80003a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a4:	4770      	bx	lr
 80003a6:	bf00      	nop
 80003a8:	40021000 	.word	0x40021000

080003ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80003ac:	b480      	push	{r7}
 80003ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80003b0:	bf00      	nop
 80003b2:	e7fd      	b.n	80003b0 <NMI_Handler+0x4>

080003b4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80003b4:	b480      	push	{r7}
 80003b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80003b8:	bf00      	nop
 80003ba:	e7fd      	b.n	80003b8 <HardFault_Handler+0x4>

080003bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80003bc:	b480      	push	{r7}
 80003be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80003c0:	bf00      	nop
 80003c2:	e7fd      	b.n	80003c0 <MemManage_Handler+0x4>

080003c4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80003c4:	b480      	push	{r7}
 80003c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80003c8:	bf00      	nop
 80003ca:	e7fd      	b.n	80003c8 <BusFault_Handler+0x4>

080003cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80003cc:	b480      	push	{r7}
 80003ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80003d0:	bf00      	nop
 80003d2:	e7fd      	b.n	80003d0 <UsageFault_Handler+0x4>

080003d4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80003d4:	b480      	push	{r7}
 80003d6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80003d8:	bf00      	nop
 80003da:	46bd      	mov	sp, r7
 80003dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e0:	4770      	bx	lr

080003e2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80003e2:	b480      	push	{r7}
 80003e4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80003e6:	bf00      	nop
 80003e8:	46bd      	mov	sp, r7
 80003ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ee:	4770      	bx	lr

080003f0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80003f0:	b480      	push	{r7}
 80003f2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80003f4:	bf00      	nop
 80003f6:	46bd      	mov	sp, r7
 80003f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003fc:	4770      	bx	lr

080003fe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80003fe:	b580      	push	{r7, lr}
 8000400:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000402:	f000 f88d 	bl	8000520 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000406:	bf00      	nop
 8000408:	bd80      	pop	{r7, pc}

0800040a <EXTI15_10_IRQHandler>:
/* please refer to the startup file (startup_stm32f3xx.s).                    */
/******************************************************************************/

/* USER CODE BEGIN 1 */

void EXTI15_10_IRQHandler(void){
 800040a:	b580      	push	{r7, lr}
 800040c:	af00      	add	r7, sp, #0
    HAL_GPIO_EXTI_IRQHandler(B1_USER_Pin);
 800040e:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000412:	f000 fb59 	bl	8000ac8 <HAL_GPIO_EXTI_IRQHandler>
}
 8000416:	bf00      	nop
 8000418:	bd80      	pop	{r7, pc}
	...

0800041c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800041c:	b480      	push	{r7}
 800041e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000420:	4b06      	ldr	r3, [pc, #24]	@ (800043c <SystemInit+0x20>)
 8000422:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000426:	4a05      	ldr	r2, [pc, #20]	@ (800043c <SystemInit+0x20>)
 8000428:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800042c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000430:	bf00      	nop
 8000432:	46bd      	mov	sp, r7
 8000434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000438:	4770      	bx	lr
 800043a:	bf00      	nop
 800043c:	e000ed00 	.word	0xe000ed00

08000440 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000440:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000478 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000444:	f7ff ffea 	bl	800041c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000448:	480c      	ldr	r0, [pc, #48]	@ (800047c <LoopForever+0x6>)
  ldr r1, =_edata
 800044a:	490d      	ldr	r1, [pc, #52]	@ (8000480 <LoopForever+0xa>)
  ldr r2, =_sidata
 800044c:	4a0d      	ldr	r2, [pc, #52]	@ (8000484 <LoopForever+0xe>)
  movs r3, #0
 800044e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000450:	e002      	b.n	8000458 <LoopCopyDataInit>

08000452 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000452:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000454:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000456:	3304      	adds	r3, #4

08000458 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000458:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800045a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800045c:	d3f9      	bcc.n	8000452 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800045e:	4a0a      	ldr	r2, [pc, #40]	@ (8000488 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000460:	4c0a      	ldr	r4, [pc, #40]	@ (800048c <LoopForever+0x16>)
  movs r3, #0
 8000462:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000464:	e001      	b.n	800046a <LoopFillZerobss>

08000466 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000466:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000468:	3204      	adds	r2, #4

0800046a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800046a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800046c:	d3fb      	bcc.n	8000466 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800046e:	f001 fd6f 	bl	8001f50 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000472:	f7ff feaf 	bl	80001d4 <main>

08000476 <LoopForever>:

LoopForever:
    b LoopForever
 8000476:	e7fe      	b.n	8000476 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000478:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800047c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000480:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000484:	08001fe8 	.word	0x08001fe8
  ldr r2, =_sbss
 8000488:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800048c:	20000030 	.word	0x20000030

08000490 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000490:	e7fe      	b.n	8000490 <ADC1_2_IRQHandler>
	...

08000494 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000498:	4b08      	ldr	r3, [pc, #32]	@ (80004bc <HAL_Init+0x28>)
 800049a:	681b      	ldr	r3, [r3, #0]
 800049c:	4a07      	ldr	r2, [pc, #28]	@ (80004bc <HAL_Init+0x28>)
 800049e:	f043 0310 	orr.w	r3, r3, #16
 80004a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80004a4:	2003      	movs	r0, #3
 80004a6:	f000 f92b 	bl	8000700 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80004aa:	200f      	movs	r0, #15
 80004ac:	f000 f808 	bl	80004c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80004b0:	f7ff ff58 	bl	8000364 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80004b4:	2300      	movs	r3, #0
}
 80004b6:	4618      	mov	r0, r3
 80004b8:	bd80      	pop	{r7, pc}
 80004ba:	bf00      	nop
 80004bc:	40022000 	.word	0x40022000

080004c0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b082      	sub	sp, #8
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80004c8:	4b12      	ldr	r3, [pc, #72]	@ (8000514 <HAL_InitTick+0x54>)
 80004ca:	681a      	ldr	r2, [r3, #0]
 80004cc:	4b12      	ldr	r3, [pc, #72]	@ (8000518 <HAL_InitTick+0x58>)
 80004ce:	781b      	ldrb	r3, [r3, #0]
 80004d0:	4619      	mov	r1, r3
 80004d2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80004d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80004da:	fbb2 f3f3 	udiv	r3, r2, r3
 80004de:	4618      	mov	r0, r3
 80004e0:	f000 f943 	bl	800076a <HAL_SYSTICK_Config>
 80004e4:	4603      	mov	r3, r0
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	d001      	beq.n	80004ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80004ea:	2301      	movs	r3, #1
 80004ec:	e00e      	b.n	800050c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	2b0f      	cmp	r3, #15
 80004f2:	d80a      	bhi.n	800050a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80004f4:	2200      	movs	r2, #0
 80004f6:	6879      	ldr	r1, [r7, #4]
 80004f8:	f04f 30ff 	mov.w	r0, #4294967295
 80004fc:	f000 f90b 	bl	8000716 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000500:	4a06      	ldr	r2, [pc, #24]	@ (800051c <HAL_InitTick+0x5c>)
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000506:	2300      	movs	r3, #0
 8000508:	e000      	b.n	800050c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800050a:	2301      	movs	r3, #1
}
 800050c:	4618      	mov	r0, r3
 800050e:	3708      	adds	r7, #8
 8000510:	46bd      	mov	sp, r7
 8000512:	bd80      	pop	{r7, pc}
 8000514:	20000000 	.word	0x20000000
 8000518:	20000008 	.word	0x20000008
 800051c:	20000004 	.word	0x20000004

08000520 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000520:	b480      	push	{r7}
 8000522:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000524:	4b06      	ldr	r3, [pc, #24]	@ (8000540 <HAL_IncTick+0x20>)
 8000526:	781b      	ldrb	r3, [r3, #0]
 8000528:	461a      	mov	r2, r3
 800052a:	4b06      	ldr	r3, [pc, #24]	@ (8000544 <HAL_IncTick+0x24>)
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	4413      	add	r3, r2
 8000530:	4a04      	ldr	r2, [pc, #16]	@ (8000544 <HAL_IncTick+0x24>)
 8000532:	6013      	str	r3, [r2, #0]
}
 8000534:	bf00      	nop
 8000536:	46bd      	mov	sp, r7
 8000538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053c:	4770      	bx	lr
 800053e:	bf00      	nop
 8000540:	20000008 	.word	0x20000008
 8000544:	2000002c 	.word	0x2000002c

08000548 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000548:	b480      	push	{r7}
 800054a:	af00      	add	r7, sp, #0
  return uwTick;  
 800054c:	4b03      	ldr	r3, [pc, #12]	@ (800055c <HAL_GetTick+0x14>)
 800054e:	681b      	ldr	r3, [r3, #0]
}
 8000550:	4618      	mov	r0, r3
 8000552:	46bd      	mov	sp, r7
 8000554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000558:	4770      	bx	lr
 800055a:	bf00      	nop
 800055c:	2000002c 	.word	0x2000002c

08000560 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000560:	b480      	push	{r7}
 8000562:	b085      	sub	sp, #20
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	f003 0307 	and.w	r3, r3, #7
 800056e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000570:	4b0c      	ldr	r3, [pc, #48]	@ (80005a4 <__NVIC_SetPriorityGrouping+0x44>)
 8000572:	68db      	ldr	r3, [r3, #12]
 8000574:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000576:	68ba      	ldr	r2, [r7, #8]
 8000578:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800057c:	4013      	ands	r3, r2
 800057e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000580:	68fb      	ldr	r3, [r7, #12]
 8000582:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000584:	68bb      	ldr	r3, [r7, #8]
 8000586:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000588:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800058c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000590:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000592:	4a04      	ldr	r2, [pc, #16]	@ (80005a4 <__NVIC_SetPriorityGrouping+0x44>)
 8000594:	68bb      	ldr	r3, [r7, #8]
 8000596:	60d3      	str	r3, [r2, #12]
}
 8000598:	bf00      	nop
 800059a:	3714      	adds	r7, #20
 800059c:	46bd      	mov	sp, r7
 800059e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a2:	4770      	bx	lr
 80005a4:	e000ed00 	.word	0xe000ed00

080005a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80005a8:	b480      	push	{r7}
 80005aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005ac:	4b04      	ldr	r3, [pc, #16]	@ (80005c0 <__NVIC_GetPriorityGrouping+0x18>)
 80005ae:	68db      	ldr	r3, [r3, #12]
 80005b0:	0a1b      	lsrs	r3, r3, #8
 80005b2:	f003 0307 	and.w	r3, r3, #7
}
 80005b6:	4618      	mov	r0, r3
 80005b8:	46bd      	mov	sp, r7
 80005ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005be:	4770      	bx	lr
 80005c0:	e000ed00 	.word	0xe000ed00

080005c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80005c4:	b480      	push	{r7}
 80005c6:	b083      	sub	sp, #12
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	4603      	mov	r3, r0
 80005cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	db0b      	blt.n	80005ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80005d6:	79fb      	ldrb	r3, [r7, #7]
 80005d8:	f003 021f 	and.w	r2, r3, #31
 80005dc:	4907      	ldr	r1, [pc, #28]	@ (80005fc <__NVIC_EnableIRQ+0x38>)
 80005de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005e2:	095b      	lsrs	r3, r3, #5
 80005e4:	2001      	movs	r0, #1
 80005e6:	fa00 f202 	lsl.w	r2, r0, r2
 80005ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80005ee:	bf00      	nop
 80005f0:	370c      	adds	r7, #12
 80005f2:	46bd      	mov	sp, r7
 80005f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f8:	4770      	bx	lr
 80005fa:	bf00      	nop
 80005fc:	e000e100 	.word	0xe000e100

08000600 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000600:	b480      	push	{r7}
 8000602:	b083      	sub	sp, #12
 8000604:	af00      	add	r7, sp, #0
 8000606:	4603      	mov	r3, r0
 8000608:	6039      	str	r1, [r7, #0]
 800060a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800060c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000610:	2b00      	cmp	r3, #0
 8000612:	db0a      	blt.n	800062a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000614:	683b      	ldr	r3, [r7, #0]
 8000616:	b2da      	uxtb	r2, r3
 8000618:	490c      	ldr	r1, [pc, #48]	@ (800064c <__NVIC_SetPriority+0x4c>)
 800061a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800061e:	0112      	lsls	r2, r2, #4
 8000620:	b2d2      	uxtb	r2, r2
 8000622:	440b      	add	r3, r1
 8000624:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000628:	e00a      	b.n	8000640 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800062a:	683b      	ldr	r3, [r7, #0]
 800062c:	b2da      	uxtb	r2, r3
 800062e:	4908      	ldr	r1, [pc, #32]	@ (8000650 <__NVIC_SetPriority+0x50>)
 8000630:	79fb      	ldrb	r3, [r7, #7]
 8000632:	f003 030f 	and.w	r3, r3, #15
 8000636:	3b04      	subs	r3, #4
 8000638:	0112      	lsls	r2, r2, #4
 800063a:	b2d2      	uxtb	r2, r2
 800063c:	440b      	add	r3, r1
 800063e:	761a      	strb	r2, [r3, #24]
}
 8000640:	bf00      	nop
 8000642:	370c      	adds	r7, #12
 8000644:	46bd      	mov	sp, r7
 8000646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064a:	4770      	bx	lr
 800064c:	e000e100 	.word	0xe000e100
 8000650:	e000ed00 	.word	0xe000ed00

08000654 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000654:	b480      	push	{r7}
 8000656:	b089      	sub	sp, #36	@ 0x24
 8000658:	af00      	add	r7, sp, #0
 800065a:	60f8      	str	r0, [r7, #12]
 800065c:	60b9      	str	r1, [r7, #8]
 800065e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000660:	68fb      	ldr	r3, [r7, #12]
 8000662:	f003 0307 	and.w	r3, r3, #7
 8000666:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000668:	69fb      	ldr	r3, [r7, #28]
 800066a:	f1c3 0307 	rsb	r3, r3, #7
 800066e:	2b04      	cmp	r3, #4
 8000670:	bf28      	it	cs
 8000672:	2304      	movcs	r3, #4
 8000674:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000676:	69fb      	ldr	r3, [r7, #28]
 8000678:	3304      	adds	r3, #4
 800067a:	2b06      	cmp	r3, #6
 800067c:	d902      	bls.n	8000684 <NVIC_EncodePriority+0x30>
 800067e:	69fb      	ldr	r3, [r7, #28]
 8000680:	3b03      	subs	r3, #3
 8000682:	e000      	b.n	8000686 <NVIC_EncodePriority+0x32>
 8000684:	2300      	movs	r3, #0
 8000686:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000688:	f04f 32ff 	mov.w	r2, #4294967295
 800068c:	69bb      	ldr	r3, [r7, #24]
 800068e:	fa02 f303 	lsl.w	r3, r2, r3
 8000692:	43da      	mvns	r2, r3
 8000694:	68bb      	ldr	r3, [r7, #8]
 8000696:	401a      	ands	r2, r3
 8000698:	697b      	ldr	r3, [r7, #20]
 800069a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800069c:	f04f 31ff 	mov.w	r1, #4294967295
 80006a0:	697b      	ldr	r3, [r7, #20]
 80006a2:	fa01 f303 	lsl.w	r3, r1, r3
 80006a6:	43d9      	mvns	r1, r3
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006ac:	4313      	orrs	r3, r2
         );
}
 80006ae:	4618      	mov	r0, r3
 80006b0:	3724      	adds	r7, #36	@ 0x24
 80006b2:	46bd      	mov	sp, r7
 80006b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b8:	4770      	bx	lr
	...

080006bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b082      	sub	sp, #8
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	3b01      	subs	r3, #1
 80006c8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80006cc:	d301      	bcc.n	80006d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80006ce:	2301      	movs	r3, #1
 80006d0:	e00f      	b.n	80006f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006d2:	4a0a      	ldr	r2, [pc, #40]	@ (80006fc <SysTick_Config+0x40>)
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	3b01      	subs	r3, #1
 80006d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80006da:	210f      	movs	r1, #15
 80006dc:	f04f 30ff 	mov.w	r0, #4294967295
 80006e0:	f7ff ff8e 	bl	8000600 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80006e4:	4b05      	ldr	r3, [pc, #20]	@ (80006fc <SysTick_Config+0x40>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80006ea:	4b04      	ldr	r3, [pc, #16]	@ (80006fc <SysTick_Config+0x40>)
 80006ec:	2207      	movs	r2, #7
 80006ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80006f0:	2300      	movs	r3, #0
}
 80006f2:	4618      	mov	r0, r3
 80006f4:	3708      	adds	r7, #8
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	e000e010 	.word	0xe000e010

08000700 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b082      	sub	sp, #8
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000708:	6878      	ldr	r0, [r7, #4]
 800070a:	f7ff ff29 	bl	8000560 <__NVIC_SetPriorityGrouping>
}
 800070e:	bf00      	nop
 8000710:	3708      	adds	r7, #8
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}

08000716 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000716:	b580      	push	{r7, lr}
 8000718:	b086      	sub	sp, #24
 800071a:	af00      	add	r7, sp, #0
 800071c:	4603      	mov	r3, r0
 800071e:	60b9      	str	r1, [r7, #8]
 8000720:	607a      	str	r2, [r7, #4]
 8000722:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000724:	2300      	movs	r3, #0
 8000726:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000728:	f7ff ff3e 	bl	80005a8 <__NVIC_GetPriorityGrouping>
 800072c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800072e:	687a      	ldr	r2, [r7, #4]
 8000730:	68b9      	ldr	r1, [r7, #8]
 8000732:	6978      	ldr	r0, [r7, #20]
 8000734:	f7ff ff8e 	bl	8000654 <NVIC_EncodePriority>
 8000738:	4602      	mov	r2, r0
 800073a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800073e:	4611      	mov	r1, r2
 8000740:	4618      	mov	r0, r3
 8000742:	f7ff ff5d 	bl	8000600 <__NVIC_SetPriority>
}
 8000746:	bf00      	nop
 8000748:	3718      	adds	r7, #24
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}

0800074e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800074e:	b580      	push	{r7, lr}
 8000750:	b082      	sub	sp, #8
 8000752:	af00      	add	r7, sp, #0
 8000754:	4603      	mov	r3, r0
 8000756:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000758:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800075c:	4618      	mov	r0, r3
 800075e:	f7ff ff31 	bl	80005c4 <__NVIC_EnableIRQ>
}
 8000762:	bf00      	nop
 8000764:	3708      	adds	r7, #8
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}

0800076a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800076a:	b580      	push	{r7, lr}
 800076c:	b082      	sub	sp, #8
 800076e:	af00      	add	r7, sp, #0
 8000770:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000772:	6878      	ldr	r0, [r7, #4]
 8000774:	f7ff ffa2 	bl	80006bc <SysTick_Config>
 8000778:	4603      	mov	r3, r0
}
 800077a:	4618      	mov	r0, r3
 800077c:	3708      	adds	r7, #8
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
	...

08000784 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000784:	b480      	push	{r7}
 8000786:	b087      	sub	sp, #28
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
 800078c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800078e:	2300      	movs	r3, #0
 8000790:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000792:	e160      	b.n	8000a56 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000794:	683b      	ldr	r3, [r7, #0]
 8000796:	681a      	ldr	r2, [r3, #0]
 8000798:	2101      	movs	r1, #1
 800079a:	697b      	ldr	r3, [r7, #20]
 800079c:	fa01 f303 	lsl.w	r3, r1, r3
 80007a0:	4013      	ands	r3, r2
 80007a2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80007a4:	68fb      	ldr	r3, [r7, #12]
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	f000 8152 	beq.w	8000a50 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80007ac:	683b      	ldr	r3, [r7, #0]
 80007ae:	685b      	ldr	r3, [r3, #4]
 80007b0:	f003 0303 	and.w	r3, r3, #3
 80007b4:	2b01      	cmp	r3, #1
 80007b6:	d005      	beq.n	80007c4 <HAL_GPIO_Init+0x40>
 80007b8:	683b      	ldr	r3, [r7, #0]
 80007ba:	685b      	ldr	r3, [r3, #4]
 80007bc:	f003 0303 	and.w	r3, r3, #3
 80007c0:	2b02      	cmp	r3, #2
 80007c2:	d130      	bne.n	8000826 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	689b      	ldr	r3, [r3, #8]
 80007c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80007ca:	697b      	ldr	r3, [r7, #20]
 80007cc:	005b      	lsls	r3, r3, #1
 80007ce:	2203      	movs	r2, #3
 80007d0:	fa02 f303 	lsl.w	r3, r2, r3
 80007d4:	43db      	mvns	r3, r3
 80007d6:	693a      	ldr	r2, [r7, #16]
 80007d8:	4013      	ands	r3, r2
 80007da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80007dc:	683b      	ldr	r3, [r7, #0]
 80007de:	68da      	ldr	r2, [r3, #12]
 80007e0:	697b      	ldr	r3, [r7, #20]
 80007e2:	005b      	lsls	r3, r3, #1
 80007e4:	fa02 f303 	lsl.w	r3, r2, r3
 80007e8:	693a      	ldr	r2, [r7, #16]
 80007ea:	4313      	orrs	r3, r2
 80007ec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	693a      	ldr	r2, [r7, #16]
 80007f2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	685b      	ldr	r3, [r3, #4]
 80007f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80007fa:	2201      	movs	r2, #1
 80007fc:	697b      	ldr	r3, [r7, #20]
 80007fe:	fa02 f303 	lsl.w	r3, r2, r3
 8000802:	43db      	mvns	r3, r3
 8000804:	693a      	ldr	r2, [r7, #16]
 8000806:	4013      	ands	r3, r2
 8000808:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800080a:	683b      	ldr	r3, [r7, #0]
 800080c:	685b      	ldr	r3, [r3, #4]
 800080e:	091b      	lsrs	r3, r3, #4
 8000810:	f003 0201 	and.w	r2, r3, #1
 8000814:	697b      	ldr	r3, [r7, #20]
 8000816:	fa02 f303 	lsl.w	r3, r2, r3
 800081a:	693a      	ldr	r2, [r7, #16]
 800081c:	4313      	orrs	r3, r2
 800081e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	693a      	ldr	r2, [r7, #16]
 8000824:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000826:	683b      	ldr	r3, [r7, #0]
 8000828:	685b      	ldr	r3, [r3, #4]
 800082a:	f003 0303 	and.w	r3, r3, #3
 800082e:	2b03      	cmp	r3, #3
 8000830:	d017      	beq.n	8000862 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	68db      	ldr	r3, [r3, #12]
 8000836:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000838:	697b      	ldr	r3, [r7, #20]
 800083a:	005b      	lsls	r3, r3, #1
 800083c:	2203      	movs	r2, #3
 800083e:	fa02 f303 	lsl.w	r3, r2, r3
 8000842:	43db      	mvns	r3, r3
 8000844:	693a      	ldr	r2, [r7, #16]
 8000846:	4013      	ands	r3, r2
 8000848:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800084a:	683b      	ldr	r3, [r7, #0]
 800084c:	689a      	ldr	r2, [r3, #8]
 800084e:	697b      	ldr	r3, [r7, #20]
 8000850:	005b      	lsls	r3, r3, #1
 8000852:	fa02 f303 	lsl.w	r3, r2, r3
 8000856:	693a      	ldr	r2, [r7, #16]
 8000858:	4313      	orrs	r3, r2
 800085a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	693a      	ldr	r2, [r7, #16]
 8000860:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000862:	683b      	ldr	r3, [r7, #0]
 8000864:	685b      	ldr	r3, [r3, #4]
 8000866:	f003 0303 	and.w	r3, r3, #3
 800086a:	2b02      	cmp	r3, #2
 800086c:	d123      	bne.n	80008b6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800086e:	697b      	ldr	r3, [r7, #20]
 8000870:	08da      	lsrs	r2, r3, #3
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	3208      	adds	r2, #8
 8000876:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800087a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800087c:	697b      	ldr	r3, [r7, #20]
 800087e:	f003 0307 	and.w	r3, r3, #7
 8000882:	009b      	lsls	r3, r3, #2
 8000884:	220f      	movs	r2, #15
 8000886:	fa02 f303 	lsl.w	r3, r2, r3
 800088a:	43db      	mvns	r3, r3
 800088c:	693a      	ldr	r2, [r7, #16]
 800088e:	4013      	ands	r3, r2
 8000890:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000892:	683b      	ldr	r3, [r7, #0]
 8000894:	691a      	ldr	r2, [r3, #16]
 8000896:	697b      	ldr	r3, [r7, #20]
 8000898:	f003 0307 	and.w	r3, r3, #7
 800089c:	009b      	lsls	r3, r3, #2
 800089e:	fa02 f303 	lsl.w	r3, r2, r3
 80008a2:	693a      	ldr	r2, [r7, #16]
 80008a4:	4313      	orrs	r3, r2
 80008a6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80008a8:	697b      	ldr	r3, [r7, #20]
 80008aa:	08da      	lsrs	r2, r3, #3
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	3208      	adds	r2, #8
 80008b0:	6939      	ldr	r1, [r7, #16]
 80008b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80008bc:	697b      	ldr	r3, [r7, #20]
 80008be:	005b      	lsls	r3, r3, #1
 80008c0:	2203      	movs	r2, #3
 80008c2:	fa02 f303 	lsl.w	r3, r2, r3
 80008c6:	43db      	mvns	r3, r3
 80008c8:	693a      	ldr	r2, [r7, #16]
 80008ca:	4013      	ands	r3, r2
 80008cc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80008ce:	683b      	ldr	r3, [r7, #0]
 80008d0:	685b      	ldr	r3, [r3, #4]
 80008d2:	f003 0203 	and.w	r2, r3, #3
 80008d6:	697b      	ldr	r3, [r7, #20]
 80008d8:	005b      	lsls	r3, r3, #1
 80008da:	fa02 f303 	lsl.w	r3, r2, r3
 80008de:	693a      	ldr	r2, [r7, #16]
 80008e0:	4313      	orrs	r3, r2
 80008e2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	693a      	ldr	r2, [r7, #16]
 80008e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80008ea:	683b      	ldr	r3, [r7, #0]
 80008ec:	685b      	ldr	r3, [r3, #4]
 80008ee:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	f000 80ac 	beq.w	8000a50 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008f8:	4b5e      	ldr	r3, [pc, #376]	@ (8000a74 <HAL_GPIO_Init+0x2f0>)
 80008fa:	699b      	ldr	r3, [r3, #24]
 80008fc:	4a5d      	ldr	r2, [pc, #372]	@ (8000a74 <HAL_GPIO_Init+0x2f0>)
 80008fe:	f043 0301 	orr.w	r3, r3, #1
 8000902:	6193      	str	r3, [r2, #24]
 8000904:	4b5b      	ldr	r3, [pc, #364]	@ (8000a74 <HAL_GPIO_Init+0x2f0>)
 8000906:	699b      	ldr	r3, [r3, #24]
 8000908:	f003 0301 	and.w	r3, r3, #1
 800090c:	60bb      	str	r3, [r7, #8]
 800090e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000910:	4a59      	ldr	r2, [pc, #356]	@ (8000a78 <HAL_GPIO_Init+0x2f4>)
 8000912:	697b      	ldr	r3, [r7, #20]
 8000914:	089b      	lsrs	r3, r3, #2
 8000916:	3302      	adds	r3, #2
 8000918:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800091c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800091e:	697b      	ldr	r3, [r7, #20]
 8000920:	f003 0303 	and.w	r3, r3, #3
 8000924:	009b      	lsls	r3, r3, #2
 8000926:	220f      	movs	r2, #15
 8000928:	fa02 f303 	lsl.w	r3, r2, r3
 800092c:	43db      	mvns	r3, r3
 800092e:	693a      	ldr	r2, [r7, #16]
 8000930:	4013      	ands	r3, r2
 8000932:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800093a:	d025      	beq.n	8000988 <HAL_GPIO_Init+0x204>
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	4a4f      	ldr	r2, [pc, #316]	@ (8000a7c <HAL_GPIO_Init+0x2f8>)
 8000940:	4293      	cmp	r3, r2
 8000942:	d01f      	beq.n	8000984 <HAL_GPIO_Init+0x200>
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	4a4e      	ldr	r2, [pc, #312]	@ (8000a80 <HAL_GPIO_Init+0x2fc>)
 8000948:	4293      	cmp	r3, r2
 800094a:	d019      	beq.n	8000980 <HAL_GPIO_Init+0x1fc>
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	4a4d      	ldr	r2, [pc, #308]	@ (8000a84 <HAL_GPIO_Init+0x300>)
 8000950:	4293      	cmp	r3, r2
 8000952:	d013      	beq.n	800097c <HAL_GPIO_Init+0x1f8>
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	4a4c      	ldr	r2, [pc, #304]	@ (8000a88 <HAL_GPIO_Init+0x304>)
 8000958:	4293      	cmp	r3, r2
 800095a:	d00d      	beq.n	8000978 <HAL_GPIO_Init+0x1f4>
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	4a4b      	ldr	r2, [pc, #300]	@ (8000a8c <HAL_GPIO_Init+0x308>)
 8000960:	4293      	cmp	r3, r2
 8000962:	d007      	beq.n	8000974 <HAL_GPIO_Init+0x1f0>
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	4a4a      	ldr	r2, [pc, #296]	@ (8000a90 <HAL_GPIO_Init+0x30c>)
 8000968:	4293      	cmp	r3, r2
 800096a:	d101      	bne.n	8000970 <HAL_GPIO_Init+0x1ec>
 800096c:	2306      	movs	r3, #6
 800096e:	e00c      	b.n	800098a <HAL_GPIO_Init+0x206>
 8000970:	2307      	movs	r3, #7
 8000972:	e00a      	b.n	800098a <HAL_GPIO_Init+0x206>
 8000974:	2305      	movs	r3, #5
 8000976:	e008      	b.n	800098a <HAL_GPIO_Init+0x206>
 8000978:	2304      	movs	r3, #4
 800097a:	e006      	b.n	800098a <HAL_GPIO_Init+0x206>
 800097c:	2303      	movs	r3, #3
 800097e:	e004      	b.n	800098a <HAL_GPIO_Init+0x206>
 8000980:	2302      	movs	r3, #2
 8000982:	e002      	b.n	800098a <HAL_GPIO_Init+0x206>
 8000984:	2301      	movs	r3, #1
 8000986:	e000      	b.n	800098a <HAL_GPIO_Init+0x206>
 8000988:	2300      	movs	r3, #0
 800098a:	697a      	ldr	r2, [r7, #20]
 800098c:	f002 0203 	and.w	r2, r2, #3
 8000990:	0092      	lsls	r2, r2, #2
 8000992:	4093      	lsls	r3, r2
 8000994:	693a      	ldr	r2, [r7, #16]
 8000996:	4313      	orrs	r3, r2
 8000998:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800099a:	4937      	ldr	r1, [pc, #220]	@ (8000a78 <HAL_GPIO_Init+0x2f4>)
 800099c:	697b      	ldr	r3, [r7, #20]
 800099e:	089b      	lsrs	r3, r3, #2
 80009a0:	3302      	adds	r3, #2
 80009a2:	693a      	ldr	r2, [r7, #16]
 80009a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80009a8:	4b3a      	ldr	r3, [pc, #232]	@ (8000a94 <HAL_GPIO_Init+0x310>)
 80009aa:	689b      	ldr	r3, [r3, #8]
 80009ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80009ae:	68fb      	ldr	r3, [r7, #12]
 80009b0:	43db      	mvns	r3, r3
 80009b2:	693a      	ldr	r2, [r7, #16]
 80009b4:	4013      	ands	r3, r2
 80009b6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80009b8:	683b      	ldr	r3, [r7, #0]
 80009ba:	685b      	ldr	r3, [r3, #4]
 80009bc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d003      	beq.n	80009cc <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 80009c4:	693a      	ldr	r2, [r7, #16]
 80009c6:	68fb      	ldr	r3, [r7, #12]
 80009c8:	4313      	orrs	r3, r2
 80009ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80009cc:	4a31      	ldr	r2, [pc, #196]	@ (8000a94 <HAL_GPIO_Init+0x310>)
 80009ce:	693b      	ldr	r3, [r7, #16]
 80009d0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80009d2:	4b30      	ldr	r3, [pc, #192]	@ (8000a94 <HAL_GPIO_Init+0x310>)
 80009d4:	68db      	ldr	r3, [r3, #12]
 80009d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80009d8:	68fb      	ldr	r3, [r7, #12]
 80009da:	43db      	mvns	r3, r3
 80009dc:	693a      	ldr	r2, [r7, #16]
 80009de:	4013      	ands	r3, r2
 80009e0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80009e2:	683b      	ldr	r3, [r7, #0]
 80009e4:	685b      	ldr	r3, [r3, #4]
 80009e6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d003      	beq.n	80009f6 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 80009ee:	693a      	ldr	r2, [r7, #16]
 80009f0:	68fb      	ldr	r3, [r7, #12]
 80009f2:	4313      	orrs	r3, r2
 80009f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80009f6:	4a27      	ldr	r2, [pc, #156]	@ (8000a94 <HAL_GPIO_Init+0x310>)
 80009f8:	693b      	ldr	r3, [r7, #16]
 80009fa:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80009fc:	4b25      	ldr	r3, [pc, #148]	@ (8000a94 <HAL_GPIO_Init+0x310>)
 80009fe:	685b      	ldr	r3, [r3, #4]
 8000a00:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a02:	68fb      	ldr	r3, [r7, #12]
 8000a04:	43db      	mvns	r3, r3
 8000a06:	693a      	ldr	r2, [r7, #16]
 8000a08:	4013      	ands	r3, r2
 8000a0a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000a0c:	683b      	ldr	r3, [r7, #0]
 8000a0e:	685b      	ldr	r3, [r3, #4]
 8000a10:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d003      	beq.n	8000a20 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8000a18:	693a      	ldr	r2, [r7, #16]
 8000a1a:	68fb      	ldr	r3, [r7, #12]
 8000a1c:	4313      	orrs	r3, r2
 8000a1e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000a20:	4a1c      	ldr	r2, [pc, #112]	@ (8000a94 <HAL_GPIO_Init+0x310>)
 8000a22:	693b      	ldr	r3, [r7, #16]
 8000a24:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000a26:	4b1b      	ldr	r3, [pc, #108]	@ (8000a94 <HAL_GPIO_Init+0x310>)
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a2c:	68fb      	ldr	r3, [r7, #12]
 8000a2e:	43db      	mvns	r3, r3
 8000a30:	693a      	ldr	r2, [r7, #16]
 8000a32:	4013      	ands	r3, r2
 8000a34:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000a36:	683b      	ldr	r3, [r7, #0]
 8000a38:	685b      	ldr	r3, [r3, #4]
 8000a3a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d003      	beq.n	8000a4a <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8000a42:	693a      	ldr	r2, [r7, #16]
 8000a44:	68fb      	ldr	r3, [r7, #12]
 8000a46:	4313      	orrs	r3, r2
 8000a48:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000a4a:	4a12      	ldr	r2, [pc, #72]	@ (8000a94 <HAL_GPIO_Init+0x310>)
 8000a4c:	693b      	ldr	r3, [r7, #16]
 8000a4e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000a50:	697b      	ldr	r3, [r7, #20]
 8000a52:	3301      	adds	r3, #1
 8000a54:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a56:	683b      	ldr	r3, [r7, #0]
 8000a58:	681a      	ldr	r2, [r3, #0]
 8000a5a:	697b      	ldr	r3, [r7, #20]
 8000a5c:	fa22 f303 	lsr.w	r3, r2, r3
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	f47f ae97 	bne.w	8000794 <HAL_GPIO_Init+0x10>
  }
}
 8000a66:	bf00      	nop
 8000a68:	bf00      	nop
 8000a6a:	371c      	adds	r7, #28
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a72:	4770      	bx	lr
 8000a74:	40021000 	.word	0x40021000
 8000a78:	40010000 	.word	0x40010000
 8000a7c:	48000400 	.word	0x48000400
 8000a80:	48000800 	.word	0x48000800
 8000a84:	48000c00 	.word	0x48000c00
 8000a88:	48001000 	.word	0x48001000
 8000a8c:	48001400 	.word	0x48001400
 8000a90:	48001800 	.word	0x48001800
 8000a94:	40010400 	.word	0x40010400

08000a98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	b083      	sub	sp, #12
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
 8000aa0:	460b      	mov	r3, r1
 8000aa2:	807b      	strh	r3, [r7, #2]
 8000aa4:	4613      	mov	r3, r2
 8000aa6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000aa8:	787b      	ldrb	r3, [r7, #1]
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d003      	beq.n	8000ab6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000aae:	887a      	ldrh	r2, [r7, #2]
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000ab4:	e002      	b.n	8000abc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000ab6:	887a      	ldrh	r2, [r7, #2]
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000abc:	bf00      	nop
 8000abe:	370c      	adds	r7, #12
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac6:	4770      	bx	lr

08000ac8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b082      	sub	sp, #8
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	4603      	mov	r3, r0
 8000ad0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000ad2:	4b08      	ldr	r3, [pc, #32]	@ (8000af4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000ad4:	695a      	ldr	r2, [r3, #20]
 8000ad6:	88fb      	ldrh	r3, [r7, #6]
 8000ad8:	4013      	ands	r3, r2
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d006      	beq.n	8000aec <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000ade:	4a05      	ldr	r2, [pc, #20]	@ (8000af4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000ae0:	88fb      	ldrh	r3, [r7, #6]
 8000ae2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000ae4:	88fb      	ldrh	r3, [r7, #6]
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	f7ff fc10 	bl	800030c <HAL_GPIO_EXTI_Callback>
  }
}
 8000aec:	bf00      	nop
 8000aee:	3708      	adds	r7, #8
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	40010400 	.word	0x40010400

08000af8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 8000afe:	af00      	add	r7, sp, #0
 8000b00:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000b04:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000b08:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000b0a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000b0e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d102      	bne.n	8000b1e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8000b18:	2301      	movs	r3, #1
 8000b1a:	f001 b83a 	b.w	8001b92 <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000b1e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000b22:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	f003 0301 	and.w	r3, r3, #1
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	f000 816f 	beq.w	8000e12 <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000b34:	4bb5      	ldr	r3, [pc, #724]	@ (8000e0c <HAL_RCC_OscConfig+0x314>)
 8000b36:	685b      	ldr	r3, [r3, #4]
 8000b38:	f003 030c 	and.w	r3, r3, #12
 8000b3c:	2b04      	cmp	r3, #4
 8000b3e:	d00c      	beq.n	8000b5a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000b40:	4bb2      	ldr	r3, [pc, #712]	@ (8000e0c <HAL_RCC_OscConfig+0x314>)
 8000b42:	685b      	ldr	r3, [r3, #4]
 8000b44:	f003 030c 	and.w	r3, r3, #12
 8000b48:	2b08      	cmp	r3, #8
 8000b4a:	d15c      	bne.n	8000c06 <HAL_RCC_OscConfig+0x10e>
 8000b4c:	4baf      	ldr	r3, [pc, #700]	@ (8000e0c <HAL_RCC_OscConfig+0x314>)
 8000b4e:	685b      	ldr	r3, [r3, #4]
 8000b50:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8000b54:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000b58:	d155      	bne.n	8000c06 <HAL_RCC_OscConfig+0x10e>
 8000b5a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000b5e:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b62:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8000b66:	fa93 f3a3 	rbit	r3, r3
 8000b6a:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000b6e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b72:	fab3 f383 	clz	r3, r3
 8000b76:	b2db      	uxtb	r3, r3
 8000b78:	095b      	lsrs	r3, r3, #5
 8000b7a:	b2db      	uxtb	r3, r3
 8000b7c:	f043 0301 	orr.w	r3, r3, #1
 8000b80:	b2db      	uxtb	r3, r3
 8000b82:	2b01      	cmp	r3, #1
 8000b84:	d102      	bne.n	8000b8c <HAL_RCC_OscConfig+0x94>
 8000b86:	4ba1      	ldr	r3, [pc, #644]	@ (8000e0c <HAL_RCC_OscConfig+0x314>)
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	e015      	b.n	8000bb8 <HAL_RCC_OscConfig+0xc0>
 8000b8c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000b90:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b94:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 8000b98:	fa93 f3a3 	rbit	r3, r3
 8000b9c:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 8000ba0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000ba4:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8000ba8:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 8000bac:	fa93 f3a3 	rbit	r3, r3
 8000bb0:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8000bb4:	4b95      	ldr	r3, [pc, #596]	@ (8000e0c <HAL_RCC_OscConfig+0x314>)
 8000bb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000bb8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000bbc:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 8000bc0:	f8d7 21dc 	ldr.w	r2, [r7, #476]	@ 0x1dc
 8000bc4:	fa92 f2a2 	rbit	r2, r2
 8000bc8:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
  return result;
 8000bcc:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8000bd0:	fab2 f282 	clz	r2, r2
 8000bd4:	b2d2      	uxtb	r2, r2
 8000bd6:	f042 0220 	orr.w	r2, r2, #32
 8000bda:	b2d2      	uxtb	r2, r2
 8000bdc:	f002 021f 	and.w	r2, r2, #31
 8000be0:	2101      	movs	r1, #1
 8000be2:	fa01 f202 	lsl.w	r2, r1, r2
 8000be6:	4013      	ands	r3, r2
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	f000 8111 	beq.w	8000e10 <HAL_RCC_OscConfig+0x318>
 8000bee:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000bf2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	685b      	ldr	r3, [r3, #4]
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	f040 8108 	bne.w	8000e10 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8000c00:	2301      	movs	r3, #1
 8000c02:	f000 bfc6 	b.w	8001b92 <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c06:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000c0a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	685b      	ldr	r3, [r3, #4]
 8000c12:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000c16:	d106      	bne.n	8000c26 <HAL_RCC_OscConfig+0x12e>
 8000c18:	4b7c      	ldr	r3, [pc, #496]	@ (8000e0c <HAL_RCC_OscConfig+0x314>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	4a7b      	ldr	r2, [pc, #492]	@ (8000e0c <HAL_RCC_OscConfig+0x314>)
 8000c1e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000c22:	6013      	str	r3, [r2, #0]
 8000c24:	e036      	b.n	8000c94 <HAL_RCC_OscConfig+0x19c>
 8000c26:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000c2a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	685b      	ldr	r3, [r3, #4]
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d10c      	bne.n	8000c50 <HAL_RCC_OscConfig+0x158>
 8000c36:	4b75      	ldr	r3, [pc, #468]	@ (8000e0c <HAL_RCC_OscConfig+0x314>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	4a74      	ldr	r2, [pc, #464]	@ (8000e0c <HAL_RCC_OscConfig+0x314>)
 8000c3c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000c40:	6013      	str	r3, [r2, #0]
 8000c42:	4b72      	ldr	r3, [pc, #456]	@ (8000e0c <HAL_RCC_OscConfig+0x314>)
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	4a71      	ldr	r2, [pc, #452]	@ (8000e0c <HAL_RCC_OscConfig+0x314>)
 8000c48:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000c4c:	6013      	str	r3, [r2, #0]
 8000c4e:	e021      	b.n	8000c94 <HAL_RCC_OscConfig+0x19c>
 8000c50:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000c54:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	685b      	ldr	r3, [r3, #4]
 8000c5c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000c60:	d10c      	bne.n	8000c7c <HAL_RCC_OscConfig+0x184>
 8000c62:	4b6a      	ldr	r3, [pc, #424]	@ (8000e0c <HAL_RCC_OscConfig+0x314>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	4a69      	ldr	r2, [pc, #420]	@ (8000e0c <HAL_RCC_OscConfig+0x314>)
 8000c68:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000c6c:	6013      	str	r3, [r2, #0]
 8000c6e:	4b67      	ldr	r3, [pc, #412]	@ (8000e0c <HAL_RCC_OscConfig+0x314>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	4a66      	ldr	r2, [pc, #408]	@ (8000e0c <HAL_RCC_OscConfig+0x314>)
 8000c74:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000c78:	6013      	str	r3, [r2, #0]
 8000c7a:	e00b      	b.n	8000c94 <HAL_RCC_OscConfig+0x19c>
 8000c7c:	4b63      	ldr	r3, [pc, #396]	@ (8000e0c <HAL_RCC_OscConfig+0x314>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	4a62      	ldr	r2, [pc, #392]	@ (8000e0c <HAL_RCC_OscConfig+0x314>)
 8000c82:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000c86:	6013      	str	r3, [r2, #0]
 8000c88:	4b60      	ldr	r3, [pc, #384]	@ (8000e0c <HAL_RCC_OscConfig+0x314>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	4a5f      	ldr	r2, [pc, #380]	@ (8000e0c <HAL_RCC_OscConfig+0x314>)
 8000c8e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000c92:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000c94:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000c98:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	685b      	ldr	r3, [r3, #4]
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d059      	beq.n	8000d58 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ca4:	f7ff fc50 	bl	8000548 <HAL_GetTick>
 8000ca8:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000cac:	e00a      	b.n	8000cc4 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000cae:	f7ff fc4b 	bl	8000548 <HAL_GetTick>
 8000cb2:	4602      	mov	r2, r0
 8000cb4:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8000cb8:	1ad3      	subs	r3, r2, r3
 8000cba:	2b64      	cmp	r3, #100	@ 0x64
 8000cbc:	d902      	bls.n	8000cc4 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8000cbe:	2303      	movs	r3, #3
 8000cc0:	f000 bf67 	b.w	8001b92 <HAL_RCC_OscConfig+0x109a>
 8000cc4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000cc8:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ccc:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8000cd0:	fa93 f3a3 	rbit	r3, r3
 8000cd4:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
  return result;
 8000cd8:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000cdc:	fab3 f383 	clz	r3, r3
 8000ce0:	b2db      	uxtb	r3, r3
 8000ce2:	095b      	lsrs	r3, r3, #5
 8000ce4:	b2db      	uxtb	r3, r3
 8000ce6:	f043 0301 	orr.w	r3, r3, #1
 8000cea:	b2db      	uxtb	r3, r3
 8000cec:	2b01      	cmp	r3, #1
 8000cee:	d102      	bne.n	8000cf6 <HAL_RCC_OscConfig+0x1fe>
 8000cf0:	4b46      	ldr	r3, [pc, #280]	@ (8000e0c <HAL_RCC_OscConfig+0x314>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	e015      	b.n	8000d22 <HAL_RCC_OscConfig+0x22a>
 8000cf6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000cfa:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000cfe:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8000d02:	fa93 f3a3 	rbit	r3, r3
 8000d06:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 8000d0a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000d0e:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8000d12:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8000d16:	fa93 f3a3 	rbit	r3, r3
 8000d1a:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8000d1e:	4b3b      	ldr	r3, [pc, #236]	@ (8000e0c <HAL_RCC_OscConfig+0x314>)
 8000d20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d22:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000d26:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 8000d2a:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 8000d2e:	fa92 f2a2 	rbit	r2, r2
 8000d32:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
  return result;
 8000d36:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8000d3a:	fab2 f282 	clz	r2, r2
 8000d3e:	b2d2      	uxtb	r2, r2
 8000d40:	f042 0220 	orr.w	r2, r2, #32
 8000d44:	b2d2      	uxtb	r2, r2
 8000d46:	f002 021f 	and.w	r2, r2, #31
 8000d4a:	2101      	movs	r1, #1
 8000d4c:	fa01 f202 	lsl.w	r2, r1, r2
 8000d50:	4013      	ands	r3, r2
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d0ab      	beq.n	8000cae <HAL_RCC_OscConfig+0x1b6>
 8000d56:	e05c      	b.n	8000e12 <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d58:	f7ff fbf6 	bl	8000548 <HAL_GetTick>
 8000d5c:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d60:	e00a      	b.n	8000d78 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d62:	f7ff fbf1 	bl	8000548 <HAL_GetTick>
 8000d66:	4602      	mov	r2, r0
 8000d68:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8000d6c:	1ad3      	subs	r3, r2, r3
 8000d6e:	2b64      	cmp	r3, #100	@ 0x64
 8000d70:	d902      	bls.n	8000d78 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8000d72:	2303      	movs	r3, #3
 8000d74:	f000 bf0d 	b.w	8001b92 <HAL_RCC_OscConfig+0x109a>
 8000d78:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000d7c:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d80:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8000d84:	fa93 f3a3 	rbit	r3, r3
 8000d88:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
  return result;
 8000d8c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d90:	fab3 f383 	clz	r3, r3
 8000d94:	b2db      	uxtb	r3, r3
 8000d96:	095b      	lsrs	r3, r3, #5
 8000d98:	b2db      	uxtb	r3, r3
 8000d9a:	f043 0301 	orr.w	r3, r3, #1
 8000d9e:	b2db      	uxtb	r3, r3
 8000da0:	2b01      	cmp	r3, #1
 8000da2:	d102      	bne.n	8000daa <HAL_RCC_OscConfig+0x2b2>
 8000da4:	4b19      	ldr	r3, [pc, #100]	@ (8000e0c <HAL_RCC_OscConfig+0x314>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	e015      	b.n	8000dd6 <HAL_RCC_OscConfig+0x2de>
 8000daa:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000dae:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000db2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8000db6:	fa93 f3a3 	rbit	r3, r3
 8000dba:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 8000dbe:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000dc2:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8000dc6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8000dca:	fa93 f3a3 	rbit	r3, r3
 8000dce:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8000dd2:	4b0e      	ldr	r3, [pc, #56]	@ (8000e0c <HAL_RCC_OscConfig+0x314>)
 8000dd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000dd6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000dda:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 8000dde:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 8000de2:	fa92 f2a2 	rbit	r2, r2
 8000de6:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
  return result;
 8000dea:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8000dee:	fab2 f282 	clz	r2, r2
 8000df2:	b2d2      	uxtb	r2, r2
 8000df4:	f042 0220 	orr.w	r2, r2, #32
 8000df8:	b2d2      	uxtb	r2, r2
 8000dfa:	f002 021f 	and.w	r2, r2, #31
 8000dfe:	2101      	movs	r1, #1
 8000e00:	fa01 f202 	lsl.w	r2, r1, r2
 8000e04:	4013      	ands	r3, r2
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d1ab      	bne.n	8000d62 <HAL_RCC_OscConfig+0x26a>
 8000e0a:	e002      	b.n	8000e12 <HAL_RCC_OscConfig+0x31a>
 8000e0c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e12:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000e16:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	f003 0302 	and.w	r3, r3, #2
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	f000 817f 	beq.w	8001126 <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000e28:	4ba7      	ldr	r3, [pc, #668]	@ (80010c8 <HAL_RCC_OscConfig+0x5d0>)
 8000e2a:	685b      	ldr	r3, [r3, #4]
 8000e2c:	f003 030c 	and.w	r3, r3, #12
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d00c      	beq.n	8000e4e <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000e34:	4ba4      	ldr	r3, [pc, #656]	@ (80010c8 <HAL_RCC_OscConfig+0x5d0>)
 8000e36:	685b      	ldr	r3, [r3, #4]
 8000e38:	f003 030c 	and.w	r3, r3, #12
 8000e3c:	2b08      	cmp	r3, #8
 8000e3e:	d173      	bne.n	8000f28 <HAL_RCC_OscConfig+0x430>
 8000e40:	4ba1      	ldr	r3, [pc, #644]	@ (80010c8 <HAL_RCC_OscConfig+0x5d0>)
 8000e42:	685b      	ldr	r3, [r3, #4]
 8000e44:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8000e48:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8000e4c:	d16c      	bne.n	8000f28 <HAL_RCC_OscConfig+0x430>
 8000e4e:	2302      	movs	r3, #2
 8000e50:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e54:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8000e58:	fa93 f3a3 	rbit	r3, r3
 8000e5c:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
  return result;
 8000e60:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e64:	fab3 f383 	clz	r3, r3
 8000e68:	b2db      	uxtb	r3, r3
 8000e6a:	095b      	lsrs	r3, r3, #5
 8000e6c:	b2db      	uxtb	r3, r3
 8000e6e:	f043 0301 	orr.w	r3, r3, #1
 8000e72:	b2db      	uxtb	r3, r3
 8000e74:	2b01      	cmp	r3, #1
 8000e76:	d102      	bne.n	8000e7e <HAL_RCC_OscConfig+0x386>
 8000e78:	4b93      	ldr	r3, [pc, #588]	@ (80010c8 <HAL_RCC_OscConfig+0x5d0>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	e013      	b.n	8000ea6 <HAL_RCC_OscConfig+0x3ae>
 8000e7e:	2302      	movs	r3, #2
 8000e80:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e84:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8000e88:	fa93 f3a3 	rbit	r3, r3
 8000e8c:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 8000e90:	2302      	movs	r3, #2
 8000e92:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8000e96:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8000e9a:	fa93 f3a3 	rbit	r3, r3
 8000e9e:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8000ea2:	4b89      	ldr	r3, [pc, #548]	@ (80010c8 <HAL_RCC_OscConfig+0x5d0>)
 8000ea4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ea6:	2202      	movs	r2, #2
 8000ea8:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 8000eac:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 8000eb0:	fa92 f2a2 	rbit	r2, r2
 8000eb4:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
  return result;
 8000eb8:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8000ebc:	fab2 f282 	clz	r2, r2
 8000ec0:	b2d2      	uxtb	r2, r2
 8000ec2:	f042 0220 	orr.w	r2, r2, #32
 8000ec6:	b2d2      	uxtb	r2, r2
 8000ec8:	f002 021f 	and.w	r2, r2, #31
 8000ecc:	2101      	movs	r1, #1
 8000ece:	fa01 f202 	lsl.w	r2, r1, r2
 8000ed2:	4013      	ands	r3, r2
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d00a      	beq.n	8000eee <HAL_RCC_OscConfig+0x3f6>
 8000ed8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000edc:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	68db      	ldr	r3, [r3, #12]
 8000ee4:	2b01      	cmp	r3, #1
 8000ee6:	d002      	beq.n	8000eee <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8000ee8:	2301      	movs	r3, #1
 8000eea:	f000 be52 	b.w	8001b92 <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000eee:	4b76      	ldr	r3, [pc, #472]	@ (80010c8 <HAL_RCC_OscConfig+0x5d0>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000ef6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000efa:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	691b      	ldr	r3, [r3, #16]
 8000f02:	21f8      	movs	r1, #248	@ 0xf8
 8000f04:	f8c7 1174 	str.w	r1, [r7, #372]	@ 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f08:	f8d7 1174 	ldr.w	r1, [r7, #372]	@ 0x174
 8000f0c:	fa91 f1a1 	rbit	r1, r1
 8000f10:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
  return result;
 8000f14:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8000f18:	fab1 f181 	clz	r1, r1
 8000f1c:	b2c9      	uxtb	r1, r1
 8000f1e:	408b      	lsls	r3, r1
 8000f20:	4969      	ldr	r1, [pc, #420]	@ (80010c8 <HAL_RCC_OscConfig+0x5d0>)
 8000f22:	4313      	orrs	r3, r2
 8000f24:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f26:	e0fe      	b.n	8001126 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000f28:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000f2c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	68db      	ldr	r3, [r3, #12]
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	f000 8088 	beq.w	800104a <HAL_RCC_OscConfig+0x552>
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f40:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8000f44:	fa93 f3a3 	rbit	r3, r3
 8000f48:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
  return result;
 8000f4c:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000f50:	fab3 f383 	clz	r3, r3
 8000f54:	b2db      	uxtb	r3, r3
 8000f56:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8000f5a:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8000f5e:	009b      	lsls	r3, r3, #2
 8000f60:	461a      	mov	r2, r3
 8000f62:	2301      	movs	r3, #1
 8000f64:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f66:	f7ff faef 	bl	8000548 <HAL_GetTick>
 8000f6a:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f6e:	e00a      	b.n	8000f86 <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000f70:	f7ff faea 	bl	8000548 <HAL_GetTick>
 8000f74:	4602      	mov	r2, r0
 8000f76:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8000f7a:	1ad3      	subs	r3, r2, r3
 8000f7c:	2b02      	cmp	r3, #2
 8000f7e:	d902      	bls.n	8000f86 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8000f80:	2303      	movs	r3, #3
 8000f82:	f000 be06 	b.w	8001b92 <HAL_RCC_OscConfig+0x109a>
 8000f86:	2302      	movs	r3, #2
 8000f88:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f8c:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8000f90:	fa93 f3a3 	rbit	r3, r3
 8000f94:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
  return result;
 8000f98:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f9c:	fab3 f383 	clz	r3, r3
 8000fa0:	b2db      	uxtb	r3, r3
 8000fa2:	095b      	lsrs	r3, r3, #5
 8000fa4:	b2db      	uxtb	r3, r3
 8000fa6:	f043 0301 	orr.w	r3, r3, #1
 8000faa:	b2db      	uxtb	r3, r3
 8000fac:	2b01      	cmp	r3, #1
 8000fae:	d102      	bne.n	8000fb6 <HAL_RCC_OscConfig+0x4be>
 8000fb0:	4b45      	ldr	r3, [pc, #276]	@ (80010c8 <HAL_RCC_OscConfig+0x5d0>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	e013      	b.n	8000fde <HAL_RCC_OscConfig+0x4e6>
 8000fb6:	2302      	movs	r3, #2
 8000fb8:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fbc:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8000fc0:	fa93 f3a3 	rbit	r3, r3
 8000fc4:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 8000fc8:	2302      	movs	r3, #2
 8000fca:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8000fce:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8000fd2:	fa93 f3a3 	rbit	r3, r3
 8000fd6:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8000fda:	4b3b      	ldr	r3, [pc, #236]	@ (80010c8 <HAL_RCC_OscConfig+0x5d0>)
 8000fdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000fde:	2202      	movs	r2, #2
 8000fe0:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 8000fe4:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8000fe8:	fa92 f2a2 	rbit	r2, r2
 8000fec:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
  return result;
 8000ff0:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8000ff4:	fab2 f282 	clz	r2, r2
 8000ff8:	b2d2      	uxtb	r2, r2
 8000ffa:	f042 0220 	orr.w	r2, r2, #32
 8000ffe:	b2d2      	uxtb	r2, r2
 8001000:	f002 021f 	and.w	r2, r2, #31
 8001004:	2101      	movs	r1, #1
 8001006:	fa01 f202 	lsl.w	r2, r1, r2
 800100a:	4013      	ands	r3, r2
 800100c:	2b00      	cmp	r3, #0
 800100e:	d0af      	beq.n	8000f70 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001010:	4b2d      	ldr	r3, [pc, #180]	@ (80010c8 <HAL_RCC_OscConfig+0x5d0>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001018:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800101c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	691b      	ldr	r3, [r3, #16]
 8001024:	21f8      	movs	r1, #248	@ 0xf8
 8001026:	f8c7 1144 	str.w	r1, [r7, #324]	@ 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800102a:	f8d7 1144 	ldr.w	r1, [r7, #324]	@ 0x144
 800102e:	fa91 f1a1 	rbit	r1, r1
 8001032:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
  return result;
 8001036:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 800103a:	fab1 f181 	clz	r1, r1
 800103e:	b2c9      	uxtb	r1, r1
 8001040:	408b      	lsls	r3, r1
 8001042:	4921      	ldr	r1, [pc, #132]	@ (80010c8 <HAL_RCC_OscConfig+0x5d0>)
 8001044:	4313      	orrs	r3, r2
 8001046:	600b      	str	r3, [r1, #0]
 8001048:	e06d      	b.n	8001126 <HAL_RCC_OscConfig+0x62e>
 800104a:	2301      	movs	r3, #1
 800104c:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001050:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8001054:	fa93 f3a3 	rbit	r3, r3
 8001058:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  return result;
 800105c:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001060:	fab3 f383 	clz	r3, r3
 8001064:	b2db      	uxtb	r3, r3
 8001066:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800106a:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800106e:	009b      	lsls	r3, r3, #2
 8001070:	461a      	mov	r2, r3
 8001072:	2300      	movs	r3, #0
 8001074:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001076:	f7ff fa67 	bl	8000548 <HAL_GetTick>
 800107a:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800107e:	e00a      	b.n	8001096 <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001080:	f7ff fa62 	bl	8000548 <HAL_GetTick>
 8001084:	4602      	mov	r2, r0
 8001086:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800108a:	1ad3      	subs	r3, r2, r3
 800108c:	2b02      	cmp	r3, #2
 800108e:	d902      	bls.n	8001096 <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8001090:	2303      	movs	r3, #3
 8001092:	f000 bd7e 	b.w	8001b92 <HAL_RCC_OscConfig+0x109a>
 8001096:	2302      	movs	r3, #2
 8001098:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800109c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80010a0:	fa93 f3a3 	rbit	r3, r3
 80010a4:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  return result;
 80010a8:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010ac:	fab3 f383 	clz	r3, r3
 80010b0:	b2db      	uxtb	r3, r3
 80010b2:	095b      	lsrs	r3, r3, #5
 80010b4:	b2db      	uxtb	r3, r3
 80010b6:	f043 0301 	orr.w	r3, r3, #1
 80010ba:	b2db      	uxtb	r3, r3
 80010bc:	2b01      	cmp	r3, #1
 80010be:	d105      	bne.n	80010cc <HAL_RCC_OscConfig+0x5d4>
 80010c0:	4b01      	ldr	r3, [pc, #4]	@ (80010c8 <HAL_RCC_OscConfig+0x5d0>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	e016      	b.n	80010f4 <HAL_RCC_OscConfig+0x5fc>
 80010c6:	bf00      	nop
 80010c8:	40021000 	.word	0x40021000
 80010cc:	2302      	movs	r3, #2
 80010ce:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80010d6:	fa93 f3a3 	rbit	r3, r3
 80010da:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 80010de:	2302      	movs	r3, #2
 80010e0:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80010e4:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80010e8:	fa93 f3a3 	rbit	r3, r3
 80010ec:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 80010f0:	4bbf      	ldr	r3, [pc, #764]	@ (80013f0 <HAL_RCC_OscConfig+0x8f8>)
 80010f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010f4:	2202      	movs	r2, #2
 80010f6:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 80010fa:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 80010fe:	fa92 f2a2 	rbit	r2, r2
 8001102:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
  return result;
 8001106:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800110a:	fab2 f282 	clz	r2, r2
 800110e:	b2d2      	uxtb	r2, r2
 8001110:	f042 0220 	orr.w	r2, r2, #32
 8001114:	b2d2      	uxtb	r2, r2
 8001116:	f002 021f 	and.w	r2, r2, #31
 800111a:	2101      	movs	r1, #1
 800111c:	fa01 f202 	lsl.w	r2, r1, r2
 8001120:	4013      	ands	r3, r2
 8001122:	2b00      	cmp	r3, #0
 8001124:	d1ac      	bne.n	8001080 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001126:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800112a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f003 0308 	and.w	r3, r3, #8
 8001136:	2b00      	cmp	r3, #0
 8001138:	f000 8113 	beq.w	8001362 <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800113c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001140:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	695b      	ldr	r3, [r3, #20]
 8001148:	2b00      	cmp	r3, #0
 800114a:	d07c      	beq.n	8001246 <HAL_RCC_OscConfig+0x74e>
 800114c:	2301      	movs	r3, #1
 800114e:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001152:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001156:	fa93 f3a3 	rbit	r3, r3
 800115a:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  return result;
 800115e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001162:	fab3 f383 	clz	r3, r3
 8001166:	b2db      	uxtb	r3, r3
 8001168:	461a      	mov	r2, r3
 800116a:	4ba2      	ldr	r3, [pc, #648]	@ (80013f4 <HAL_RCC_OscConfig+0x8fc>)
 800116c:	4413      	add	r3, r2
 800116e:	009b      	lsls	r3, r3, #2
 8001170:	461a      	mov	r2, r3
 8001172:	2301      	movs	r3, #1
 8001174:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001176:	f7ff f9e7 	bl	8000548 <HAL_GetTick>
 800117a:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800117e:	e00a      	b.n	8001196 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001180:	f7ff f9e2 	bl	8000548 <HAL_GetTick>
 8001184:	4602      	mov	r2, r0
 8001186:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800118a:	1ad3      	subs	r3, r2, r3
 800118c:	2b02      	cmp	r3, #2
 800118e:	d902      	bls.n	8001196 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8001190:	2303      	movs	r3, #3
 8001192:	f000 bcfe 	b.w	8001b92 <HAL_RCC_OscConfig+0x109a>
 8001196:	2302      	movs	r3, #2
 8001198:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800119c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80011a0:	fa93 f2a3 	rbit	r2, r3
 80011a4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80011a8:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80011ac:	601a      	str	r2, [r3, #0]
 80011ae:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80011b2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80011b6:	2202      	movs	r2, #2
 80011b8:	601a      	str	r2, [r3, #0]
 80011ba:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80011be:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	fa93 f2a3 	rbit	r2, r3
 80011c8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80011cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80011d0:	601a      	str	r2, [r3, #0]
 80011d2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80011d6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80011da:	2202      	movs	r2, #2
 80011dc:	601a      	str	r2, [r3, #0]
 80011de:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80011e2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	fa93 f2a3 	rbit	r2, r3
 80011ec:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80011f0:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80011f4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011f6:	4b7e      	ldr	r3, [pc, #504]	@ (80013f0 <HAL_RCC_OscConfig+0x8f8>)
 80011f8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80011fa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80011fe:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001202:	2102      	movs	r1, #2
 8001204:	6019      	str	r1, [r3, #0]
 8001206:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800120a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	fa93 f1a3 	rbit	r1, r3
 8001214:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001218:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800121c:	6019      	str	r1, [r3, #0]
  return result;
 800121e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001222:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	fab3 f383 	clz	r3, r3
 800122c:	b2db      	uxtb	r3, r3
 800122e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001232:	b2db      	uxtb	r3, r3
 8001234:	f003 031f 	and.w	r3, r3, #31
 8001238:	2101      	movs	r1, #1
 800123a:	fa01 f303 	lsl.w	r3, r1, r3
 800123e:	4013      	ands	r3, r2
 8001240:	2b00      	cmp	r3, #0
 8001242:	d09d      	beq.n	8001180 <HAL_RCC_OscConfig+0x688>
 8001244:	e08d      	b.n	8001362 <HAL_RCC_OscConfig+0x86a>
 8001246:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800124a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800124e:	2201      	movs	r2, #1
 8001250:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001252:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001256:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	fa93 f2a3 	rbit	r2, r3
 8001260:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001264:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001268:	601a      	str	r2, [r3, #0]
  return result;
 800126a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800126e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001272:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001274:	fab3 f383 	clz	r3, r3
 8001278:	b2db      	uxtb	r3, r3
 800127a:	461a      	mov	r2, r3
 800127c:	4b5d      	ldr	r3, [pc, #372]	@ (80013f4 <HAL_RCC_OscConfig+0x8fc>)
 800127e:	4413      	add	r3, r2
 8001280:	009b      	lsls	r3, r3, #2
 8001282:	461a      	mov	r2, r3
 8001284:	2300      	movs	r3, #0
 8001286:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001288:	f7ff f95e 	bl	8000548 <HAL_GetTick>
 800128c:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001290:	e00a      	b.n	80012a8 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001292:	f7ff f959 	bl	8000548 <HAL_GetTick>
 8001296:	4602      	mov	r2, r0
 8001298:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800129c:	1ad3      	subs	r3, r2, r3
 800129e:	2b02      	cmp	r3, #2
 80012a0:	d902      	bls.n	80012a8 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 80012a2:	2303      	movs	r3, #3
 80012a4:	f000 bc75 	b.w	8001b92 <HAL_RCC_OscConfig+0x109a>
 80012a8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80012ac:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80012b0:	2202      	movs	r2, #2
 80012b2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012b4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80012b8:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	fa93 f2a3 	rbit	r2, r3
 80012c2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80012c6:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80012ca:	601a      	str	r2, [r3, #0]
 80012cc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80012d0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80012d4:	2202      	movs	r2, #2
 80012d6:	601a      	str	r2, [r3, #0]
 80012d8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80012dc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	fa93 f2a3 	rbit	r2, r3
 80012e6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80012ea:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80012ee:	601a      	str	r2, [r3, #0]
 80012f0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80012f4:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80012f8:	2202      	movs	r2, #2
 80012fa:	601a      	str	r2, [r3, #0]
 80012fc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001300:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	fa93 f2a3 	rbit	r2, r3
 800130a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800130e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001312:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001314:	4b36      	ldr	r3, [pc, #216]	@ (80013f0 <HAL_RCC_OscConfig+0x8f8>)
 8001316:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001318:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800131c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001320:	2102      	movs	r1, #2
 8001322:	6019      	str	r1, [r3, #0]
 8001324:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001328:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	fa93 f1a3 	rbit	r1, r3
 8001332:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001336:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800133a:	6019      	str	r1, [r3, #0]
  return result;
 800133c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001340:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	fab3 f383 	clz	r3, r3
 800134a:	b2db      	uxtb	r3, r3
 800134c:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001350:	b2db      	uxtb	r3, r3
 8001352:	f003 031f 	and.w	r3, r3, #31
 8001356:	2101      	movs	r1, #1
 8001358:	fa01 f303 	lsl.w	r3, r1, r3
 800135c:	4013      	ands	r3, r2
 800135e:	2b00      	cmp	r3, #0
 8001360:	d197      	bne.n	8001292 <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001362:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001366:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f003 0304 	and.w	r3, r3, #4
 8001372:	2b00      	cmp	r3, #0
 8001374:	f000 81a5 	beq.w	80016c2 <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001378:	2300      	movs	r3, #0
 800137a:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800137e:	4b1c      	ldr	r3, [pc, #112]	@ (80013f0 <HAL_RCC_OscConfig+0x8f8>)
 8001380:	69db      	ldr	r3, [r3, #28]
 8001382:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001386:	2b00      	cmp	r3, #0
 8001388:	d116      	bne.n	80013b8 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800138a:	4b19      	ldr	r3, [pc, #100]	@ (80013f0 <HAL_RCC_OscConfig+0x8f8>)
 800138c:	69db      	ldr	r3, [r3, #28]
 800138e:	4a18      	ldr	r2, [pc, #96]	@ (80013f0 <HAL_RCC_OscConfig+0x8f8>)
 8001390:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001394:	61d3      	str	r3, [r2, #28]
 8001396:	4b16      	ldr	r3, [pc, #88]	@ (80013f0 <HAL_RCC_OscConfig+0x8f8>)
 8001398:	69db      	ldr	r3, [r3, #28]
 800139a:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 800139e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80013a2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80013a6:	601a      	str	r2, [r3, #0]
 80013a8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80013ac:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80013b0:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80013b2:	2301      	movs	r3, #1
 80013b4:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013b8:	4b0f      	ldr	r3, [pc, #60]	@ (80013f8 <HAL_RCC_OscConfig+0x900>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d121      	bne.n	8001408 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80013c4:	4b0c      	ldr	r3, [pc, #48]	@ (80013f8 <HAL_RCC_OscConfig+0x900>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4a0b      	ldr	r2, [pc, #44]	@ (80013f8 <HAL_RCC_OscConfig+0x900>)
 80013ca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013ce:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80013d0:	f7ff f8ba 	bl	8000548 <HAL_GetTick>
 80013d4:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013d8:	e010      	b.n	80013fc <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013da:	f7ff f8b5 	bl	8000548 <HAL_GetTick>
 80013de:	4602      	mov	r2, r0
 80013e0:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80013e4:	1ad3      	subs	r3, r2, r3
 80013e6:	2b64      	cmp	r3, #100	@ 0x64
 80013e8:	d908      	bls.n	80013fc <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 80013ea:	2303      	movs	r3, #3
 80013ec:	e3d1      	b.n	8001b92 <HAL_RCC_OscConfig+0x109a>
 80013ee:	bf00      	nop
 80013f0:	40021000 	.word	0x40021000
 80013f4:	10908120 	.word	0x10908120
 80013f8:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013fc:	4b8d      	ldr	r3, [pc, #564]	@ (8001634 <HAL_RCC_OscConfig+0xb3c>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001404:	2b00      	cmp	r3, #0
 8001406:	d0e8      	beq.n	80013da <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001408:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800140c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	689b      	ldr	r3, [r3, #8]
 8001414:	2b01      	cmp	r3, #1
 8001416:	d106      	bne.n	8001426 <HAL_RCC_OscConfig+0x92e>
 8001418:	4b87      	ldr	r3, [pc, #540]	@ (8001638 <HAL_RCC_OscConfig+0xb40>)
 800141a:	6a1b      	ldr	r3, [r3, #32]
 800141c:	4a86      	ldr	r2, [pc, #536]	@ (8001638 <HAL_RCC_OscConfig+0xb40>)
 800141e:	f043 0301 	orr.w	r3, r3, #1
 8001422:	6213      	str	r3, [r2, #32]
 8001424:	e035      	b.n	8001492 <HAL_RCC_OscConfig+0x99a>
 8001426:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800142a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	689b      	ldr	r3, [r3, #8]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d10c      	bne.n	8001450 <HAL_RCC_OscConfig+0x958>
 8001436:	4b80      	ldr	r3, [pc, #512]	@ (8001638 <HAL_RCC_OscConfig+0xb40>)
 8001438:	6a1b      	ldr	r3, [r3, #32]
 800143a:	4a7f      	ldr	r2, [pc, #508]	@ (8001638 <HAL_RCC_OscConfig+0xb40>)
 800143c:	f023 0301 	bic.w	r3, r3, #1
 8001440:	6213      	str	r3, [r2, #32]
 8001442:	4b7d      	ldr	r3, [pc, #500]	@ (8001638 <HAL_RCC_OscConfig+0xb40>)
 8001444:	6a1b      	ldr	r3, [r3, #32]
 8001446:	4a7c      	ldr	r2, [pc, #496]	@ (8001638 <HAL_RCC_OscConfig+0xb40>)
 8001448:	f023 0304 	bic.w	r3, r3, #4
 800144c:	6213      	str	r3, [r2, #32]
 800144e:	e020      	b.n	8001492 <HAL_RCC_OscConfig+0x99a>
 8001450:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001454:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	689b      	ldr	r3, [r3, #8]
 800145c:	2b05      	cmp	r3, #5
 800145e:	d10c      	bne.n	800147a <HAL_RCC_OscConfig+0x982>
 8001460:	4b75      	ldr	r3, [pc, #468]	@ (8001638 <HAL_RCC_OscConfig+0xb40>)
 8001462:	6a1b      	ldr	r3, [r3, #32]
 8001464:	4a74      	ldr	r2, [pc, #464]	@ (8001638 <HAL_RCC_OscConfig+0xb40>)
 8001466:	f043 0304 	orr.w	r3, r3, #4
 800146a:	6213      	str	r3, [r2, #32]
 800146c:	4b72      	ldr	r3, [pc, #456]	@ (8001638 <HAL_RCC_OscConfig+0xb40>)
 800146e:	6a1b      	ldr	r3, [r3, #32]
 8001470:	4a71      	ldr	r2, [pc, #452]	@ (8001638 <HAL_RCC_OscConfig+0xb40>)
 8001472:	f043 0301 	orr.w	r3, r3, #1
 8001476:	6213      	str	r3, [r2, #32]
 8001478:	e00b      	b.n	8001492 <HAL_RCC_OscConfig+0x99a>
 800147a:	4b6f      	ldr	r3, [pc, #444]	@ (8001638 <HAL_RCC_OscConfig+0xb40>)
 800147c:	6a1b      	ldr	r3, [r3, #32]
 800147e:	4a6e      	ldr	r2, [pc, #440]	@ (8001638 <HAL_RCC_OscConfig+0xb40>)
 8001480:	f023 0301 	bic.w	r3, r3, #1
 8001484:	6213      	str	r3, [r2, #32]
 8001486:	4b6c      	ldr	r3, [pc, #432]	@ (8001638 <HAL_RCC_OscConfig+0xb40>)
 8001488:	6a1b      	ldr	r3, [r3, #32]
 800148a:	4a6b      	ldr	r2, [pc, #428]	@ (8001638 <HAL_RCC_OscConfig+0xb40>)
 800148c:	f023 0304 	bic.w	r3, r3, #4
 8001490:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001492:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001496:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	689b      	ldr	r3, [r3, #8]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	f000 8081 	beq.w	80015a6 <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014a4:	f7ff f850 	bl	8000548 <HAL_GetTick>
 80014a8:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014ac:	e00b      	b.n	80014c6 <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014ae:	f7ff f84b 	bl	8000548 <HAL_GetTick>
 80014b2:	4602      	mov	r2, r0
 80014b4:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80014b8:	1ad3      	subs	r3, r2, r3
 80014ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80014be:	4293      	cmp	r3, r2
 80014c0:	d901      	bls.n	80014c6 <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 80014c2:	2303      	movs	r3, #3
 80014c4:	e365      	b.n	8001b92 <HAL_RCC_OscConfig+0x109a>
 80014c6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80014ca:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80014ce:	2202      	movs	r2, #2
 80014d0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014d2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80014d6:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	fa93 f2a3 	rbit	r2, r3
 80014e0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80014e4:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80014e8:	601a      	str	r2, [r3, #0]
 80014ea:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80014ee:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80014f2:	2202      	movs	r2, #2
 80014f4:	601a      	str	r2, [r3, #0]
 80014f6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80014fa:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	fa93 f2a3 	rbit	r2, r3
 8001504:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001508:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800150c:	601a      	str	r2, [r3, #0]
  return result;
 800150e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001512:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001516:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001518:	fab3 f383 	clz	r3, r3
 800151c:	b2db      	uxtb	r3, r3
 800151e:	095b      	lsrs	r3, r3, #5
 8001520:	b2db      	uxtb	r3, r3
 8001522:	f043 0302 	orr.w	r3, r3, #2
 8001526:	b2db      	uxtb	r3, r3
 8001528:	2b02      	cmp	r3, #2
 800152a:	d102      	bne.n	8001532 <HAL_RCC_OscConfig+0xa3a>
 800152c:	4b42      	ldr	r3, [pc, #264]	@ (8001638 <HAL_RCC_OscConfig+0xb40>)
 800152e:	6a1b      	ldr	r3, [r3, #32]
 8001530:	e013      	b.n	800155a <HAL_RCC_OscConfig+0xa62>
 8001532:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001536:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800153a:	2202      	movs	r2, #2
 800153c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800153e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001542:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	fa93 f2a3 	rbit	r2, r3
 800154c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001550:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8001554:	601a      	str	r2, [r3, #0]
 8001556:	4b38      	ldr	r3, [pc, #224]	@ (8001638 <HAL_RCC_OscConfig+0xb40>)
 8001558:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800155a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800155e:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8001562:	2102      	movs	r1, #2
 8001564:	6011      	str	r1, [r2, #0]
 8001566:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800156a:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 800156e:	6812      	ldr	r2, [r2, #0]
 8001570:	fa92 f1a2 	rbit	r1, r2
 8001574:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001578:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 800157c:	6011      	str	r1, [r2, #0]
  return result;
 800157e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001582:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 8001586:	6812      	ldr	r2, [r2, #0]
 8001588:	fab2 f282 	clz	r2, r2
 800158c:	b2d2      	uxtb	r2, r2
 800158e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001592:	b2d2      	uxtb	r2, r2
 8001594:	f002 021f 	and.w	r2, r2, #31
 8001598:	2101      	movs	r1, #1
 800159a:	fa01 f202 	lsl.w	r2, r1, r2
 800159e:	4013      	ands	r3, r2
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d084      	beq.n	80014ae <HAL_RCC_OscConfig+0x9b6>
 80015a4:	e083      	b.n	80016ae <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015a6:	f7fe ffcf 	bl	8000548 <HAL_GetTick>
 80015aa:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015ae:	e00b      	b.n	80015c8 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015b0:	f7fe ffca 	bl	8000548 <HAL_GetTick>
 80015b4:	4602      	mov	r2, r0
 80015b6:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80015ba:	1ad3      	subs	r3, r2, r3
 80015bc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80015c0:	4293      	cmp	r3, r2
 80015c2:	d901      	bls.n	80015c8 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 80015c4:	2303      	movs	r3, #3
 80015c6:	e2e4      	b.n	8001b92 <HAL_RCC_OscConfig+0x109a>
 80015c8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80015cc:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80015d0:	2202      	movs	r2, #2
 80015d2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015d4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80015d8:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	fa93 f2a3 	rbit	r2, r3
 80015e2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80015e6:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80015ea:	601a      	str	r2, [r3, #0]
 80015ec:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80015f0:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80015f4:	2202      	movs	r2, #2
 80015f6:	601a      	str	r2, [r3, #0]
 80015f8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80015fc:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	fa93 f2a3 	rbit	r2, r3
 8001606:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800160a:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800160e:	601a      	str	r2, [r3, #0]
  return result;
 8001610:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001614:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001618:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800161a:	fab3 f383 	clz	r3, r3
 800161e:	b2db      	uxtb	r3, r3
 8001620:	095b      	lsrs	r3, r3, #5
 8001622:	b2db      	uxtb	r3, r3
 8001624:	f043 0302 	orr.w	r3, r3, #2
 8001628:	b2db      	uxtb	r3, r3
 800162a:	2b02      	cmp	r3, #2
 800162c:	d106      	bne.n	800163c <HAL_RCC_OscConfig+0xb44>
 800162e:	4b02      	ldr	r3, [pc, #8]	@ (8001638 <HAL_RCC_OscConfig+0xb40>)
 8001630:	6a1b      	ldr	r3, [r3, #32]
 8001632:	e017      	b.n	8001664 <HAL_RCC_OscConfig+0xb6c>
 8001634:	40007000 	.word	0x40007000
 8001638:	40021000 	.word	0x40021000
 800163c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001640:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8001644:	2202      	movs	r2, #2
 8001646:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001648:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800164c:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	fa93 f2a3 	rbit	r2, r3
 8001656:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800165a:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 800165e:	601a      	str	r2, [r3, #0]
 8001660:	4bb3      	ldr	r3, [pc, #716]	@ (8001930 <HAL_RCC_OscConfig+0xe38>)
 8001662:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001664:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001668:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 800166c:	2102      	movs	r1, #2
 800166e:	6011      	str	r1, [r2, #0]
 8001670:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001674:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8001678:	6812      	ldr	r2, [r2, #0]
 800167a:	fa92 f1a2 	rbit	r1, r2
 800167e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001682:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8001686:	6011      	str	r1, [r2, #0]
  return result;
 8001688:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800168c:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8001690:	6812      	ldr	r2, [r2, #0]
 8001692:	fab2 f282 	clz	r2, r2
 8001696:	b2d2      	uxtb	r2, r2
 8001698:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800169c:	b2d2      	uxtb	r2, r2
 800169e:	f002 021f 	and.w	r2, r2, #31
 80016a2:	2101      	movs	r1, #1
 80016a4:	fa01 f202 	lsl.w	r2, r1, r2
 80016a8:	4013      	ands	r3, r2
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d180      	bne.n	80015b0 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80016ae:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 80016b2:	2b01      	cmp	r3, #1
 80016b4:	d105      	bne.n	80016c2 <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016b6:	4b9e      	ldr	r3, [pc, #632]	@ (8001930 <HAL_RCC_OscConfig+0xe38>)
 80016b8:	69db      	ldr	r3, [r3, #28]
 80016ba:	4a9d      	ldr	r2, [pc, #628]	@ (8001930 <HAL_RCC_OscConfig+0xe38>)
 80016bc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80016c0:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016c2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80016c6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	699b      	ldr	r3, [r3, #24]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	f000 825e 	beq.w	8001b90 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80016d4:	4b96      	ldr	r3, [pc, #600]	@ (8001930 <HAL_RCC_OscConfig+0xe38>)
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	f003 030c 	and.w	r3, r3, #12
 80016dc:	2b08      	cmp	r3, #8
 80016de:	f000 821f 	beq.w	8001b20 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016e2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80016e6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	699b      	ldr	r3, [r3, #24]
 80016ee:	2b02      	cmp	r3, #2
 80016f0:	f040 8170 	bne.w	80019d4 <HAL_RCC_OscConfig+0xedc>
 80016f4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80016f8:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80016fc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001700:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001702:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001706:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	fa93 f2a3 	rbit	r2, r3
 8001710:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001714:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8001718:	601a      	str	r2, [r3, #0]
  return result;
 800171a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800171e:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8001722:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001724:	fab3 f383 	clz	r3, r3
 8001728:	b2db      	uxtb	r3, r3
 800172a:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800172e:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001732:	009b      	lsls	r3, r3, #2
 8001734:	461a      	mov	r2, r3
 8001736:	2300      	movs	r3, #0
 8001738:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800173a:	f7fe ff05 	bl	8000548 <HAL_GetTick>
 800173e:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001742:	e009      	b.n	8001758 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001744:	f7fe ff00 	bl	8000548 <HAL_GetTick>
 8001748:	4602      	mov	r2, r0
 800174a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800174e:	1ad3      	subs	r3, r2, r3
 8001750:	2b02      	cmp	r3, #2
 8001752:	d901      	bls.n	8001758 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8001754:	2303      	movs	r3, #3
 8001756:	e21c      	b.n	8001b92 <HAL_RCC_OscConfig+0x109a>
 8001758:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800175c:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8001760:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001764:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001766:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800176a:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	fa93 f2a3 	rbit	r2, r3
 8001774:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001778:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800177c:	601a      	str	r2, [r3, #0]
  return result;
 800177e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001782:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8001786:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001788:	fab3 f383 	clz	r3, r3
 800178c:	b2db      	uxtb	r3, r3
 800178e:	095b      	lsrs	r3, r3, #5
 8001790:	b2db      	uxtb	r3, r3
 8001792:	f043 0301 	orr.w	r3, r3, #1
 8001796:	b2db      	uxtb	r3, r3
 8001798:	2b01      	cmp	r3, #1
 800179a:	d102      	bne.n	80017a2 <HAL_RCC_OscConfig+0xcaa>
 800179c:	4b64      	ldr	r3, [pc, #400]	@ (8001930 <HAL_RCC_OscConfig+0xe38>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	e027      	b.n	80017f2 <HAL_RCC_OscConfig+0xcfa>
 80017a2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80017a6:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80017aa:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80017ae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017b0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80017b4:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	fa93 f2a3 	rbit	r2, r3
 80017be:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80017c2:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80017c6:	601a      	str	r2, [r3, #0]
 80017c8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80017cc:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80017d0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80017d4:	601a      	str	r2, [r3, #0]
 80017d6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80017da:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	fa93 f2a3 	rbit	r2, r3
 80017e4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80017e8:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 80017ec:	601a      	str	r2, [r3, #0]
 80017ee:	4b50      	ldr	r3, [pc, #320]	@ (8001930 <HAL_RCC_OscConfig+0xe38>)
 80017f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017f2:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80017f6:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80017fa:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80017fe:	6011      	str	r1, [r2, #0]
 8001800:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001804:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8001808:	6812      	ldr	r2, [r2, #0]
 800180a:	fa92 f1a2 	rbit	r1, r2
 800180e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001812:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8001816:	6011      	str	r1, [r2, #0]
  return result;
 8001818:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800181c:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8001820:	6812      	ldr	r2, [r2, #0]
 8001822:	fab2 f282 	clz	r2, r2
 8001826:	b2d2      	uxtb	r2, r2
 8001828:	f042 0220 	orr.w	r2, r2, #32
 800182c:	b2d2      	uxtb	r2, r2
 800182e:	f002 021f 	and.w	r2, r2, #31
 8001832:	2101      	movs	r1, #1
 8001834:	fa01 f202 	lsl.w	r2, r1, r2
 8001838:	4013      	ands	r3, r2
 800183a:	2b00      	cmp	r3, #0
 800183c:	d182      	bne.n	8001744 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800183e:	4b3c      	ldr	r3, [pc, #240]	@ (8001930 <HAL_RCC_OscConfig+0xe38>)
 8001840:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001842:	f023 020f 	bic.w	r2, r3, #15
 8001846:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800184a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001852:	4937      	ldr	r1, [pc, #220]	@ (8001930 <HAL_RCC_OscConfig+0xe38>)
 8001854:	4313      	orrs	r3, r2
 8001856:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8001858:	4b35      	ldr	r3, [pc, #212]	@ (8001930 <HAL_RCC_OscConfig+0xe38>)
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	f423 1276 	bic.w	r2, r3, #4030464	@ 0x3d8000
 8001860:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001864:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	6a19      	ldr	r1, [r3, #32]
 800186c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001870:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	69db      	ldr	r3, [r3, #28]
 8001878:	430b      	orrs	r3, r1
 800187a:	492d      	ldr	r1, [pc, #180]	@ (8001930 <HAL_RCC_OscConfig+0xe38>)
 800187c:	4313      	orrs	r3, r2
 800187e:	604b      	str	r3, [r1, #4]
 8001880:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001884:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8001888:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800188c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800188e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001892:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	fa93 f2a3 	rbit	r2, r3
 800189c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80018a0:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80018a4:	601a      	str	r2, [r3, #0]
  return result;
 80018a6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80018aa:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80018ae:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018b0:	fab3 f383 	clz	r3, r3
 80018b4:	b2db      	uxtb	r3, r3
 80018b6:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80018ba:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80018be:	009b      	lsls	r3, r3, #2
 80018c0:	461a      	mov	r2, r3
 80018c2:	2301      	movs	r3, #1
 80018c4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018c6:	f7fe fe3f 	bl	8000548 <HAL_GetTick>
 80018ca:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80018ce:	e009      	b.n	80018e4 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018d0:	f7fe fe3a 	bl	8000548 <HAL_GetTick>
 80018d4:	4602      	mov	r2, r0
 80018d6:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80018da:	1ad3      	subs	r3, r2, r3
 80018dc:	2b02      	cmp	r3, #2
 80018de:	d901      	bls.n	80018e4 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 80018e0:	2303      	movs	r3, #3
 80018e2:	e156      	b.n	8001b92 <HAL_RCC_OscConfig+0x109a>
 80018e4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80018e8:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80018ec:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80018f0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018f2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80018f6:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	fa93 f2a3 	rbit	r2, r3
 8001900:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001904:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8001908:	601a      	str	r2, [r3, #0]
  return result;
 800190a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800190e:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8001912:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001914:	fab3 f383 	clz	r3, r3
 8001918:	b2db      	uxtb	r3, r3
 800191a:	095b      	lsrs	r3, r3, #5
 800191c:	b2db      	uxtb	r3, r3
 800191e:	f043 0301 	orr.w	r3, r3, #1
 8001922:	b2db      	uxtb	r3, r3
 8001924:	2b01      	cmp	r3, #1
 8001926:	d105      	bne.n	8001934 <HAL_RCC_OscConfig+0xe3c>
 8001928:	4b01      	ldr	r3, [pc, #4]	@ (8001930 <HAL_RCC_OscConfig+0xe38>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	e02a      	b.n	8001984 <HAL_RCC_OscConfig+0xe8c>
 800192e:	bf00      	nop
 8001930:	40021000 	.word	0x40021000
 8001934:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001938:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800193c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001940:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001942:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001946:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	fa93 f2a3 	rbit	r2, r3
 8001950:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001954:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8001958:	601a      	str	r2, [r3, #0]
 800195a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800195e:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8001962:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001966:	601a      	str	r2, [r3, #0]
 8001968:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800196c:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	fa93 f2a3 	rbit	r2, r3
 8001976:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800197a:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 800197e:	601a      	str	r2, [r3, #0]
 8001980:	4b86      	ldr	r3, [pc, #536]	@ (8001b9c <HAL_RCC_OscConfig+0x10a4>)
 8001982:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001984:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001988:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 800198c:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001990:	6011      	str	r1, [r2, #0]
 8001992:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001996:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 800199a:	6812      	ldr	r2, [r2, #0]
 800199c:	fa92 f1a2 	rbit	r1, r2
 80019a0:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80019a4:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 80019a8:	6011      	str	r1, [r2, #0]
  return result;
 80019aa:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80019ae:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 80019b2:	6812      	ldr	r2, [r2, #0]
 80019b4:	fab2 f282 	clz	r2, r2
 80019b8:	b2d2      	uxtb	r2, r2
 80019ba:	f042 0220 	orr.w	r2, r2, #32
 80019be:	b2d2      	uxtb	r2, r2
 80019c0:	f002 021f 	and.w	r2, r2, #31
 80019c4:	2101      	movs	r1, #1
 80019c6:	fa01 f202 	lsl.w	r2, r1, r2
 80019ca:	4013      	ands	r3, r2
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	f43f af7f 	beq.w	80018d0 <HAL_RCC_OscConfig+0xdd8>
 80019d2:	e0dd      	b.n	8001b90 <HAL_RCC_OscConfig+0x1098>
 80019d4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80019d8:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80019dc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80019e0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019e2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80019e6:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	fa93 f2a3 	rbit	r2, r3
 80019f0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80019f4:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80019f8:	601a      	str	r2, [r3, #0]
  return result;
 80019fa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80019fe:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8001a02:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a04:	fab3 f383 	clz	r3, r3
 8001a08:	b2db      	uxtb	r3, r3
 8001a0a:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001a0e:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001a12:	009b      	lsls	r3, r3, #2
 8001a14:	461a      	mov	r2, r3
 8001a16:	2300      	movs	r3, #0
 8001a18:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a1a:	f7fe fd95 	bl	8000548 <HAL_GetTick>
 8001a1e:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a22:	e009      	b.n	8001a38 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a24:	f7fe fd90 	bl	8000548 <HAL_GetTick>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001a2e:	1ad3      	subs	r3, r2, r3
 8001a30:	2b02      	cmp	r3, #2
 8001a32:	d901      	bls.n	8001a38 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8001a34:	2303      	movs	r3, #3
 8001a36:	e0ac      	b.n	8001b92 <HAL_RCC_OscConfig+0x109a>
 8001a38:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a3c:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8001a40:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001a44:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a46:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a4a:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	fa93 f2a3 	rbit	r2, r3
 8001a54:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a58:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8001a5c:	601a      	str	r2, [r3, #0]
  return result;
 8001a5e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a62:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8001a66:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a68:	fab3 f383 	clz	r3, r3
 8001a6c:	b2db      	uxtb	r3, r3
 8001a6e:	095b      	lsrs	r3, r3, #5
 8001a70:	b2db      	uxtb	r3, r3
 8001a72:	f043 0301 	orr.w	r3, r3, #1
 8001a76:	b2db      	uxtb	r3, r3
 8001a78:	2b01      	cmp	r3, #1
 8001a7a:	d102      	bne.n	8001a82 <HAL_RCC_OscConfig+0xf8a>
 8001a7c:	4b47      	ldr	r3, [pc, #284]	@ (8001b9c <HAL_RCC_OscConfig+0x10a4>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	e027      	b.n	8001ad2 <HAL_RCC_OscConfig+0xfda>
 8001a82:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a86:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8001a8a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001a8e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a90:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a94:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	fa93 f2a3 	rbit	r2, r3
 8001a9e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001aa2:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8001aa6:	601a      	str	r2, [r3, #0]
 8001aa8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001aac:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8001ab0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001ab4:	601a      	str	r2, [r3, #0]
 8001ab6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001aba:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	fa93 f2a3 	rbit	r2, r3
 8001ac4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ac8:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 8001acc:	601a      	str	r2, [r3, #0]
 8001ace:	4b33      	ldr	r3, [pc, #204]	@ (8001b9c <HAL_RCC_OscConfig+0x10a4>)
 8001ad0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ad2:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001ad6:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8001ada:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001ade:	6011      	str	r1, [r2, #0]
 8001ae0:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001ae4:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8001ae8:	6812      	ldr	r2, [r2, #0]
 8001aea:	fa92 f1a2 	rbit	r1, r2
 8001aee:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001af2:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8001af6:	6011      	str	r1, [r2, #0]
  return result;
 8001af8:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001afc:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8001b00:	6812      	ldr	r2, [r2, #0]
 8001b02:	fab2 f282 	clz	r2, r2
 8001b06:	b2d2      	uxtb	r2, r2
 8001b08:	f042 0220 	orr.w	r2, r2, #32
 8001b0c:	b2d2      	uxtb	r2, r2
 8001b0e:	f002 021f 	and.w	r2, r2, #31
 8001b12:	2101      	movs	r1, #1
 8001b14:	fa01 f202 	lsl.w	r2, r1, r2
 8001b18:	4013      	ands	r3, r2
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d182      	bne.n	8001a24 <HAL_RCC_OscConfig+0xf2c>
 8001b1e:	e037      	b.n	8001b90 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b20:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b24:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	699b      	ldr	r3, [r3, #24]
 8001b2c:	2b01      	cmp	r3, #1
 8001b2e:	d101      	bne.n	8001b34 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8001b30:	2301      	movs	r3, #1
 8001b32:	e02e      	b.n	8001b92 <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001b34:	4b19      	ldr	r3, [pc, #100]	@ (8001b9c <HAL_RCC_OscConfig+0x10a4>)
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8001b3c:	4b17      	ldr	r3, [pc, #92]	@ (8001b9c <HAL_RCC_OscConfig+0x10a4>)
 8001b3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b40:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001b44:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8001b48:	f403 32c0 	and.w	r2, r3, #98304	@ 0x18000
 8001b4c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b50:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	69db      	ldr	r3, [r3, #28]
 8001b58:	429a      	cmp	r2, r3
 8001b5a:	d117      	bne.n	8001b8c <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001b5c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8001b60:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001b64:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b68:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001b70:	429a      	cmp	r2, r3
 8001b72:	d10b      	bne.n	8001b8c <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8001b74:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001b78:	f003 020f 	and.w	r2, r3, #15
 8001b7c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b80:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001b88:	429a      	cmp	r2, r3
 8001b8a:	d001      	beq.n	8001b90 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	e000      	b.n	8001b92 <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8001b90:	2300      	movs	r3, #0
}
 8001b92:	4618      	mov	r0, r3
 8001b94:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}
 8001b9c:	40021000 	.word	0x40021000

08001ba0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b09e      	sub	sp, #120	@ 0x78
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
 8001ba8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001baa:	2300      	movs	r3, #0
 8001bac:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d101      	bne.n	8001bb8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	e162      	b.n	8001e7e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001bb8:	4b90      	ldr	r3, [pc, #576]	@ (8001dfc <HAL_RCC_ClockConfig+0x25c>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f003 0307 	and.w	r3, r3, #7
 8001bc0:	683a      	ldr	r2, [r7, #0]
 8001bc2:	429a      	cmp	r2, r3
 8001bc4:	d910      	bls.n	8001be8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bc6:	4b8d      	ldr	r3, [pc, #564]	@ (8001dfc <HAL_RCC_ClockConfig+0x25c>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f023 0207 	bic.w	r2, r3, #7
 8001bce:	498b      	ldr	r1, [pc, #556]	@ (8001dfc <HAL_RCC_ClockConfig+0x25c>)
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bd6:	4b89      	ldr	r3, [pc, #548]	@ (8001dfc <HAL_RCC_ClockConfig+0x25c>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f003 0307 	and.w	r3, r3, #7
 8001bde:	683a      	ldr	r2, [r7, #0]
 8001be0:	429a      	cmp	r2, r3
 8001be2:	d001      	beq.n	8001be8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001be4:	2301      	movs	r3, #1
 8001be6:	e14a      	b.n	8001e7e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f003 0302 	and.w	r3, r3, #2
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d008      	beq.n	8001c06 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bf4:	4b82      	ldr	r3, [pc, #520]	@ (8001e00 <HAL_RCC_ClockConfig+0x260>)
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	689b      	ldr	r3, [r3, #8]
 8001c00:	497f      	ldr	r1, [pc, #508]	@ (8001e00 <HAL_RCC_ClockConfig+0x260>)
 8001c02:	4313      	orrs	r3, r2
 8001c04:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f003 0301 	and.w	r3, r3, #1
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	f000 80dc 	beq.w	8001dcc <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	2b01      	cmp	r3, #1
 8001c1a:	d13c      	bne.n	8001c96 <HAL_RCC_ClockConfig+0xf6>
 8001c1c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001c20:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c22:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001c24:	fa93 f3a3 	rbit	r3, r3
 8001c28:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8001c2a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c2c:	fab3 f383 	clz	r3, r3
 8001c30:	b2db      	uxtb	r3, r3
 8001c32:	095b      	lsrs	r3, r3, #5
 8001c34:	b2db      	uxtb	r3, r3
 8001c36:	f043 0301 	orr.w	r3, r3, #1
 8001c3a:	b2db      	uxtb	r3, r3
 8001c3c:	2b01      	cmp	r3, #1
 8001c3e:	d102      	bne.n	8001c46 <HAL_RCC_ClockConfig+0xa6>
 8001c40:	4b6f      	ldr	r3, [pc, #444]	@ (8001e00 <HAL_RCC_ClockConfig+0x260>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	e00f      	b.n	8001c66 <HAL_RCC_ClockConfig+0xc6>
 8001c46:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001c4a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c4c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001c4e:	fa93 f3a3 	rbit	r3, r3
 8001c52:	667b      	str	r3, [r7, #100]	@ 0x64
 8001c54:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001c58:	663b      	str	r3, [r7, #96]	@ 0x60
 8001c5a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001c5c:	fa93 f3a3 	rbit	r3, r3
 8001c60:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001c62:	4b67      	ldr	r3, [pc, #412]	@ (8001e00 <HAL_RCC_ClockConfig+0x260>)
 8001c64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c66:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001c6a:	65ba      	str	r2, [r7, #88]	@ 0x58
 8001c6c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001c6e:	fa92 f2a2 	rbit	r2, r2
 8001c72:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8001c74:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8001c76:	fab2 f282 	clz	r2, r2
 8001c7a:	b2d2      	uxtb	r2, r2
 8001c7c:	f042 0220 	orr.w	r2, r2, #32
 8001c80:	b2d2      	uxtb	r2, r2
 8001c82:	f002 021f 	and.w	r2, r2, #31
 8001c86:	2101      	movs	r1, #1
 8001c88:	fa01 f202 	lsl.w	r2, r1, r2
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d17b      	bne.n	8001d8a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001c92:	2301      	movs	r3, #1
 8001c94:	e0f3      	b.n	8001e7e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	2b02      	cmp	r3, #2
 8001c9c:	d13c      	bne.n	8001d18 <HAL_RCC_ClockConfig+0x178>
 8001c9e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001ca2:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ca4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001ca6:	fa93 f3a3 	rbit	r3, r3
 8001caa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8001cac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cae:	fab3 f383 	clz	r3, r3
 8001cb2:	b2db      	uxtb	r3, r3
 8001cb4:	095b      	lsrs	r3, r3, #5
 8001cb6:	b2db      	uxtb	r3, r3
 8001cb8:	f043 0301 	orr.w	r3, r3, #1
 8001cbc:	b2db      	uxtb	r3, r3
 8001cbe:	2b01      	cmp	r3, #1
 8001cc0:	d102      	bne.n	8001cc8 <HAL_RCC_ClockConfig+0x128>
 8001cc2:	4b4f      	ldr	r3, [pc, #316]	@ (8001e00 <HAL_RCC_ClockConfig+0x260>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	e00f      	b.n	8001ce8 <HAL_RCC_ClockConfig+0x148>
 8001cc8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001ccc:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001cd0:	fa93 f3a3 	rbit	r3, r3
 8001cd4:	647b      	str	r3, [r7, #68]	@ 0x44
 8001cd6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001cda:	643b      	str	r3, [r7, #64]	@ 0x40
 8001cdc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001cde:	fa93 f3a3 	rbit	r3, r3
 8001ce2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001ce4:	4b46      	ldr	r3, [pc, #280]	@ (8001e00 <HAL_RCC_ClockConfig+0x260>)
 8001ce6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ce8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001cec:	63ba      	str	r2, [r7, #56]	@ 0x38
 8001cee:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001cf0:	fa92 f2a2 	rbit	r2, r2
 8001cf4:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8001cf6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001cf8:	fab2 f282 	clz	r2, r2
 8001cfc:	b2d2      	uxtb	r2, r2
 8001cfe:	f042 0220 	orr.w	r2, r2, #32
 8001d02:	b2d2      	uxtb	r2, r2
 8001d04:	f002 021f 	and.w	r2, r2, #31
 8001d08:	2101      	movs	r1, #1
 8001d0a:	fa01 f202 	lsl.w	r2, r1, r2
 8001d0e:	4013      	ands	r3, r2
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d13a      	bne.n	8001d8a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001d14:	2301      	movs	r3, #1
 8001d16:	e0b2      	b.n	8001e7e <HAL_RCC_ClockConfig+0x2de>
 8001d18:	2302      	movs	r3, #2
 8001d1a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d1e:	fa93 f3a3 	rbit	r3, r3
 8001d22:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8001d24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d26:	fab3 f383 	clz	r3, r3
 8001d2a:	b2db      	uxtb	r3, r3
 8001d2c:	095b      	lsrs	r3, r3, #5
 8001d2e:	b2db      	uxtb	r3, r3
 8001d30:	f043 0301 	orr.w	r3, r3, #1
 8001d34:	b2db      	uxtb	r3, r3
 8001d36:	2b01      	cmp	r3, #1
 8001d38:	d102      	bne.n	8001d40 <HAL_RCC_ClockConfig+0x1a0>
 8001d3a:	4b31      	ldr	r3, [pc, #196]	@ (8001e00 <HAL_RCC_ClockConfig+0x260>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	e00d      	b.n	8001d5c <HAL_RCC_ClockConfig+0x1bc>
 8001d40:	2302      	movs	r3, #2
 8001d42:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d46:	fa93 f3a3 	rbit	r3, r3
 8001d4a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d4c:	2302      	movs	r3, #2
 8001d4e:	623b      	str	r3, [r7, #32]
 8001d50:	6a3b      	ldr	r3, [r7, #32]
 8001d52:	fa93 f3a3 	rbit	r3, r3
 8001d56:	61fb      	str	r3, [r7, #28]
 8001d58:	4b29      	ldr	r3, [pc, #164]	@ (8001e00 <HAL_RCC_ClockConfig+0x260>)
 8001d5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d5c:	2202      	movs	r2, #2
 8001d5e:	61ba      	str	r2, [r7, #24]
 8001d60:	69ba      	ldr	r2, [r7, #24]
 8001d62:	fa92 f2a2 	rbit	r2, r2
 8001d66:	617a      	str	r2, [r7, #20]
  return result;
 8001d68:	697a      	ldr	r2, [r7, #20]
 8001d6a:	fab2 f282 	clz	r2, r2
 8001d6e:	b2d2      	uxtb	r2, r2
 8001d70:	f042 0220 	orr.w	r2, r2, #32
 8001d74:	b2d2      	uxtb	r2, r2
 8001d76:	f002 021f 	and.w	r2, r2, #31
 8001d7a:	2101      	movs	r1, #1
 8001d7c:	fa01 f202 	lsl.w	r2, r1, r2
 8001d80:	4013      	ands	r3, r2
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d101      	bne.n	8001d8a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001d86:	2301      	movs	r3, #1
 8001d88:	e079      	b.n	8001e7e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d8a:	4b1d      	ldr	r3, [pc, #116]	@ (8001e00 <HAL_RCC_ClockConfig+0x260>)
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	f023 0203 	bic.w	r2, r3, #3
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	491a      	ldr	r1, [pc, #104]	@ (8001e00 <HAL_RCC_ClockConfig+0x260>)
 8001d98:	4313      	orrs	r3, r2
 8001d9a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d9c:	f7fe fbd4 	bl	8000548 <HAL_GetTick>
 8001da0:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001da2:	e00a      	b.n	8001dba <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001da4:	f7fe fbd0 	bl	8000548 <HAL_GetTick>
 8001da8:	4602      	mov	r2, r0
 8001daa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001dac:	1ad3      	subs	r3, r2, r3
 8001dae:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d901      	bls.n	8001dba <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8001db6:	2303      	movs	r3, #3
 8001db8:	e061      	b.n	8001e7e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dba:	4b11      	ldr	r3, [pc, #68]	@ (8001e00 <HAL_RCC_ClockConfig+0x260>)
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	f003 020c 	and.w	r2, r3, #12
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	009b      	lsls	r3, r3, #2
 8001dc8:	429a      	cmp	r2, r3
 8001dca:	d1eb      	bne.n	8001da4 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001dcc:	4b0b      	ldr	r3, [pc, #44]	@ (8001dfc <HAL_RCC_ClockConfig+0x25c>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f003 0307 	and.w	r3, r3, #7
 8001dd4:	683a      	ldr	r2, [r7, #0]
 8001dd6:	429a      	cmp	r2, r3
 8001dd8:	d214      	bcs.n	8001e04 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dda:	4b08      	ldr	r3, [pc, #32]	@ (8001dfc <HAL_RCC_ClockConfig+0x25c>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f023 0207 	bic.w	r2, r3, #7
 8001de2:	4906      	ldr	r1, [pc, #24]	@ (8001dfc <HAL_RCC_ClockConfig+0x25c>)
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	4313      	orrs	r3, r2
 8001de8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dea:	4b04      	ldr	r3, [pc, #16]	@ (8001dfc <HAL_RCC_ClockConfig+0x25c>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f003 0307 	and.w	r3, r3, #7
 8001df2:	683a      	ldr	r2, [r7, #0]
 8001df4:	429a      	cmp	r2, r3
 8001df6:	d005      	beq.n	8001e04 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8001df8:	2301      	movs	r3, #1
 8001dfa:	e040      	b.n	8001e7e <HAL_RCC_ClockConfig+0x2de>
 8001dfc:	40022000 	.word	0x40022000
 8001e00:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f003 0304 	and.w	r3, r3, #4
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d008      	beq.n	8001e22 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e10:	4b1d      	ldr	r3, [pc, #116]	@ (8001e88 <HAL_RCC_ClockConfig+0x2e8>)
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	68db      	ldr	r3, [r3, #12]
 8001e1c:	491a      	ldr	r1, [pc, #104]	@ (8001e88 <HAL_RCC_ClockConfig+0x2e8>)
 8001e1e:	4313      	orrs	r3, r2
 8001e20:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f003 0308 	and.w	r3, r3, #8
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d009      	beq.n	8001e42 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e2e:	4b16      	ldr	r3, [pc, #88]	@ (8001e88 <HAL_RCC_ClockConfig+0x2e8>)
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	691b      	ldr	r3, [r3, #16]
 8001e3a:	00db      	lsls	r3, r3, #3
 8001e3c:	4912      	ldr	r1, [pc, #72]	@ (8001e88 <HAL_RCC_ClockConfig+0x2e8>)
 8001e3e:	4313      	orrs	r3, r2
 8001e40:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001e42:	f000 f829 	bl	8001e98 <HAL_RCC_GetSysClockFreq>
 8001e46:	4601      	mov	r1, r0
 8001e48:	4b0f      	ldr	r3, [pc, #60]	@ (8001e88 <HAL_RCC_ClockConfig+0x2e8>)
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001e50:	22f0      	movs	r2, #240	@ 0xf0
 8001e52:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e54:	693a      	ldr	r2, [r7, #16]
 8001e56:	fa92 f2a2 	rbit	r2, r2
 8001e5a:	60fa      	str	r2, [r7, #12]
  return result;
 8001e5c:	68fa      	ldr	r2, [r7, #12]
 8001e5e:	fab2 f282 	clz	r2, r2
 8001e62:	b2d2      	uxtb	r2, r2
 8001e64:	40d3      	lsrs	r3, r2
 8001e66:	4a09      	ldr	r2, [pc, #36]	@ (8001e8c <HAL_RCC_ClockConfig+0x2ec>)
 8001e68:	5cd3      	ldrb	r3, [r2, r3]
 8001e6a:	fa21 f303 	lsr.w	r3, r1, r3
 8001e6e:	4a08      	ldr	r2, [pc, #32]	@ (8001e90 <HAL_RCC_ClockConfig+0x2f0>)
 8001e70:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8001e72:	4b08      	ldr	r3, [pc, #32]	@ (8001e94 <HAL_RCC_ClockConfig+0x2f4>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4618      	mov	r0, r3
 8001e78:	f7fe fb22 	bl	80004c0 <HAL_InitTick>
  
  return HAL_OK;
 8001e7c:	2300      	movs	r3, #0
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	3778      	adds	r7, #120	@ 0x78
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	40021000 	.word	0x40021000
 8001e8c:	08001fb0 	.word	0x08001fb0
 8001e90:	20000000 	.word	0x20000000
 8001e94:	20000004 	.word	0x20000004

08001e98 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b087      	sub	sp, #28
 8001e9c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	60fb      	str	r3, [r7, #12]
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	60bb      	str	r3, [r7, #8]
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	617b      	str	r3, [r7, #20]
 8001eaa:	2300      	movs	r3, #0
 8001eac:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8001eb2:	4b1f      	ldr	r3, [pc, #124]	@ (8001f30 <HAL_RCC_GetSysClockFreq+0x98>)
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	f003 030c 	and.w	r3, r3, #12
 8001ebe:	2b04      	cmp	r3, #4
 8001ec0:	d002      	beq.n	8001ec8 <HAL_RCC_GetSysClockFreq+0x30>
 8001ec2:	2b08      	cmp	r3, #8
 8001ec4:	d003      	beq.n	8001ece <HAL_RCC_GetSysClockFreq+0x36>
 8001ec6:	e029      	b.n	8001f1c <HAL_RCC_GetSysClockFreq+0x84>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001ec8:	4b1a      	ldr	r3, [pc, #104]	@ (8001f34 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001eca:	613b      	str	r3, [r7, #16]
      break;
 8001ecc:	e029      	b.n	8001f22 <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	0c9b      	lsrs	r3, r3, #18
 8001ed2:	f003 030f 	and.w	r3, r3, #15
 8001ed6:	4a18      	ldr	r2, [pc, #96]	@ (8001f38 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001ed8:	5cd3      	ldrb	r3, [r2, r3]
 8001eda:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8001edc:	4b14      	ldr	r3, [pc, #80]	@ (8001f30 <HAL_RCC_GetSysClockFreq+0x98>)
 8001ede:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ee0:	f003 030f 	and.w	r3, r3, #15
 8001ee4:	4a15      	ldr	r2, [pc, #84]	@ (8001f3c <HAL_RCC_GetSysClockFreq+0xa4>)
 8001ee6:	5cd3      	ldrb	r3, [r2, r3]
 8001ee8:	60bb      	str	r3, [r7, #8]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d008      	beq.n	8001f06 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001ef4:	4a0f      	ldr	r2, [pc, #60]	@ (8001f34 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001ef6:	68bb      	ldr	r3, [r7, #8]
 8001ef8:	fbb2 f2f3 	udiv	r2, r2, r3
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	fb02 f303 	mul.w	r3, r2, r3
 8001f02:	617b      	str	r3, [r7, #20]
 8001f04:	e007      	b.n	8001f16 <HAL_RCC_GetSysClockFreq+0x7e>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001f06:	4a0b      	ldr	r2, [pc, #44]	@ (8001f34 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001f08:	68bb      	ldr	r3, [r7, #8]
 8001f0a:	fbb2 f2f3 	udiv	r2, r2, r3
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	fb02 f303 	mul.w	r3, r2, r3
 8001f14:	617b      	str	r3, [r7, #20]
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8001f16:	697b      	ldr	r3, [r7, #20]
 8001f18:	613b      	str	r3, [r7, #16]
      break;
 8001f1a:	e002      	b.n	8001f22 <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001f1c:	4b05      	ldr	r3, [pc, #20]	@ (8001f34 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001f1e:	613b      	str	r3, [r7, #16]
      break;
 8001f20:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f22:	693b      	ldr	r3, [r7, #16]
}
 8001f24:	4618      	mov	r0, r3
 8001f26:	371c      	adds	r7, #28
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2e:	4770      	bx	lr
 8001f30:	40021000 	.word	0x40021000
 8001f34:	007a1200 	.word	0x007a1200
 8001f38:	08001fc0 	.word	0x08001fc0
 8001f3c:	08001fd0 	.word	0x08001fd0

08001f40 <memset>:
 8001f40:	4402      	add	r2, r0
 8001f42:	4603      	mov	r3, r0
 8001f44:	4293      	cmp	r3, r2
 8001f46:	d100      	bne.n	8001f4a <memset+0xa>
 8001f48:	4770      	bx	lr
 8001f4a:	f803 1b01 	strb.w	r1, [r3], #1
 8001f4e:	e7f9      	b.n	8001f44 <memset+0x4>

08001f50 <__libc_init_array>:
 8001f50:	b570      	push	{r4, r5, r6, lr}
 8001f52:	4d0d      	ldr	r5, [pc, #52]	@ (8001f88 <__libc_init_array+0x38>)
 8001f54:	4c0d      	ldr	r4, [pc, #52]	@ (8001f8c <__libc_init_array+0x3c>)
 8001f56:	1b64      	subs	r4, r4, r5
 8001f58:	10a4      	asrs	r4, r4, #2
 8001f5a:	2600      	movs	r6, #0
 8001f5c:	42a6      	cmp	r6, r4
 8001f5e:	d109      	bne.n	8001f74 <__libc_init_array+0x24>
 8001f60:	4d0b      	ldr	r5, [pc, #44]	@ (8001f90 <__libc_init_array+0x40>)
 8001f62:	4c0c      	ldr	r4, [pc, #48]	@ (8001f94 <__libc_init_array+0x44>)
 8001f64:	f000 f818 	bl	8001f98 <_init>
 8001f68:	1b64      	subs	r4, r4, r5
 8001f6a:	10a4      	asrs	r4, r4, #2
 8001f6c:	2600      	movs	r6, #0
 8001f6e:	42a6      	cmp	r6, r4
 8001f70:	d105      	bne.n	8001f7e <__libc_init_array+0x2e>
 8001f72:	bd70      	pop	{r4, r5, r6, pc}
 8001f74:	f855 3b04 	ldr.w	r3, [r5], #4
 8001f78:	4798      	blx	r3
 8001f7a:	3601      	adds	r6, #1
 8001f7c:	e7ee      	b.n	8001f5c <__libc_init_array+0xc>
 8001f7e:	f855 3b04 	ldr.w	r3, [r5], #4
 8001f82:	4798      	blx	r3
 8001f84:	3601      	adds	r6, #1
 8001f86:	e7f2      	b.n	8001f6e <__libc_init_array+0x1e>
 8001f88:	08001fe0 	.word	0x08001fe0
 8001f8c:	08001fe0 	.word	0x08001fe0
 8001f90:	08001fe0 	.word	0x08001fe0
 8001f94:	08001fe4 	.word	0x08001fe4

08001f98 <_init>:
 8001f98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f9a:	bf00      	nop
 8001f9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001f9e:	bc08      	pop	{r3}
 8001fa0:	469e      	mov	lr, r3
 8001fa2:	4770      	bx	lr

08001fa4 <_fini>:
 8001fa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001fa6:	bf00      	nop
 8001fa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001faa:	bc08      	pop	{r3}
 8001fac:	469e      	mov	lr, r3
 8001fae:	4770      	bx	lr
